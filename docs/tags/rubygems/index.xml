<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>gam0022.net</title>
    <link>https://gam0022.net/tags/rubygems/index.xml</link>
    <description>Recent content on gam0022.net</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>jp</language>
    <copyright>&amp;copy; 2016 gam0022</copyright>
    <atom:link href="/tags/rubygems/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Rubyで関数型プログラミングをするための ImmutableList gem を公開</title>
      <link>https://gam0022.net/blog/2013/10/22/immutable-list-gem/</link>
      <pubDate>Tue, 22 Oct 2013 14:17:00 +0900</pubDate>
      
      <guid>https://gam0022.net/blog/2013/10/22/immutable-list-gem/</guid>
      <description>&lt;h1 id=&#34;immutablelist-gem-とは&#34;&gt;ImmutableList gem とは&lt;/h1&gt;

&lt;p&gt;Immutable な LinkedList を Ruby で使うためのライブラリです。&lt;/p&gt;

&lt;p&gt;C-Extension なので、Rubyで実装したものに比べて動作が高速です。&lt;/p&gt;

&lt;p&gt;Ruby の &lt;code&gt;Array&lt;/code&gt; は 配列で実装されているため、
長いリストでの先頭への要素を追加(&lt;code&gt;cons&lt;/code&gt;)や連結(&lt;code&gt;append&lt;/code&gt;)が
とても遅いという問題を解決しようと思って作りました。&lt;/p&gt;

&lt;p&gt;用途としては、Rubyで再帰を使って関数型言語風にプログラムを組むことを想定しています。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/MjwxdjZX6fPjtf&#34; width=&#34;595&#34; height=&#34;485&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&#34;margin-bottom:5px&#34;&gt; &lt;strong&gt; &lt;a href=&#34;//www.slideshare.net/shohosoda9/immutable-list-gem-klab-alm&#34; title=&#34;Immutable List Gem (KLab ALM版)&#34; target=&#34;_blank&#34;&gt;Immutable List Gem (KLab ALM版)&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a target=&#34;_blank&#34; href=&#34;//www.slideshare.net/shohosoda9&#34;&gt;Sho Hosoda&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/p&gt;

&lt;h2 id=&#34;導入方法&#34;&gt;導入方法&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://rubygems.org/gems/immutable_list&#34;&gt;RubyGems&lt;/a&gt; で公開したので、次のようにターミナルで入力するだけで導入できます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ gem install immutable_list
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;基本的な使い方&#34;&gt;基本的な使い方&lt;/h1&gt;

&lt;p&gt;基本的には、Ocaml の List のような動作をします。メソッド名も Ocaml を意識しています。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;immutable_list&#39;

p ImmutableList.new # =&amp;gt; ()

p l1 = ImmutableList.new.cons(1).cons(2).cons(3) # =&amp;gt; (3, 2, 1)
p l1.head # =&amp;gt; 3
p l1.tail # =&amp;gt; (2, 1)

p l2 = ImmutableList[1, 2, 3, &amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;] #=&amp;gt; (1, 2, 3, &amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;)

p l1.rev_append(l2) #=&amp;gt; (1, 2, 3, 1, 2, 3, &amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;)
p l1.rev #=&amp;gt; (1, 2, 3)
p l3 = l1.append(l2) #=&amp;gt; (3, 2, 1, 1, 2, 3, &amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;)

p l3.length # =&amp;gt; 8
p ImmutableList[].length #=&amp;gt; 0

p l3.nth(0) #=&amp;gt; 3
p l3[7] #=&amp;gt; &amp;quot;b&amp;quot;
p l3[100] #=&amp;gt; nil
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;rubyで関数型プログラミングを書きたい&#34;&gt;Rubyで関数型プログラミングを書きたい&lt;/h1&gt;

&lt;p&gt;まずここで言う、関数型プログラミングというのは、
一般的な言語がループを使って繰り返しを表現するのに対して、
再帰を使って繰り返しを表現することを指します。&lt;/p&gt;

&lt;p&gt;例えば、&lt;code&gt;ImmutableList&lt;/code&gt;を使えば、クイックソートを次のように実装することができます。&lt;/p&gt;

&lt;p&gt;再帰を使うことで、プログラムの本質に関係ないループと変数が消えて、
とても読みやすく短くプログラムを書くことができます。(読みやすさには個人差があります。)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;immutable_list&#39;

def partition(a, l, lt, ge)
  if l.empty?
    [lt, ge]
  elsif l.head &amp;lt; a
    partition(a, l.tail, lt.cons(l.head), ge)
  else
    partition(a, l.tail, lt, ge.cons(l.head))
  end
end

def qsort(l)
  if l.empty?
    ImmutableList.new
  else
    lt, ge = partition(l.head, l.tail, ImmutableList.new, ImmutableList.new)
    qsort(lt) + qsort(ge).cons(l.head)
  end
end

l = ImmutableList[3, 5, 8, 1, 4, 7, 10, -3, 2, 100, 43, 10, 50]
p qsort(l) #=&amp;gt; (-3, 1, 2, 3, 4, 5, 7, 8, 10, 10, 43, 50, 100)
&lt;/code&gt;&lt;/pre&gt;

&lt;!--## 補足

なぜ、関数型プログラミングするためには Immutable なリストが必要なのかわからない人に補足です。

もし、リストに破壊的な操作を許してしまうと、再帰の過程で
--&gt;

&lt;h1 id=&#34;動作速度について&#34;&gt;動作速度について&lt;/h1&gt;

&lt;p&gt;C-Extension なので、動作が高速だと言いますが、どのくらい速いのか気になる人もいるかと思います。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Array&lt;/code&gt;と&lt;code&gt;ImmutableList&lt;/code&gt;で、先頭に長さ3のリストを 連結する処理にかかった秒数を、
連結した回数ごとにまとめました。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;連結回数&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Array&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;LinkedList&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;10&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.5e-05&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.0e-05&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;1000&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.007251&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.00166&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;10000&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.727542&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.015206&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;100000&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;102.080825&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.414083&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;この測定には、&lt;a href=&#34;https://github.com/gam0022/linkedlist/blob/master/benchmark.rb&#34;&gt;benchmark.rb&lt;/a&gt; を用いました。&lt;/p&gt;

&lt;p&gt;リストの長さが長くなるほど、&lt;code&gt;Array&lt;/code&gt;よりも&lt;code&gt;LinkedList&lt;/code&gt; の方が相対的に高速になります。&lt;/p&gt;

&lt;h1 id=&#34;その他&#34;&gt;その他&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;GitHub

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/gam0022/immutable_list&#34;&gt;https://github.com/gam0022/immutable_list&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.loveruby.net/w/RubyExtensionProgrammingGuide.html&#34;&gt;RubyExtensionProgrammingGuide&lt;/a&gt; がとても参考になりました。&lt;/li&gt;
&lt;li&gt;WBなどはしていないので、&lt;a href=&#34;http://www.atdot.net/~ko1/activities/RubyKaigi2013-ko1.pdf&#34;&gt;RGenGC&lt;/a&gt; に対応できてるか不安です。

&lt;ul&gt;
&lt;li&gt;そもそも、どの関数も破壊的ではないので、WBが発生するタイミングが無い?&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;セーフレベルやオブジェクトの汚染など、セキュリティのことは全く考えてません。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;head&lt;/code&gt; や &lt;code&gt;tail&lt;/code&gt; や &lt;code&gt;nth&lt;/code&gt; で要素がない場合ですが、すべて&lt;code&gt;nil&lt;/code&gt;を返すようにして、例外は発生させないことにしました。

&lt;ul&gt;
&lt;li&gt;将来的には例外を発生させるように仕様を変更するかもしれません。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;これまでのあらすじ&#34;&gt;これまでのあらすじ&lt;/h1&gt;

&lt;p&gt;RubyのC-Extentionとして、Immutable な LinkedList を作り、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gam0022.net/blog/2013/08/19/ruby-linkedlist/&#34;&gt;RubyでLinkedListを使うためのC拡張を作った&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;RubyGems で C-Extention を含んだGemを作る方法を紹介しました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gam0022.net/blog/2013/10/18/gems-with-extensions/&#34;&gt;BundlerでC拡張を含んだgemを公開する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;1つ目の記事と内容がほとんど同じですが、クラス名やインストール方法が変わったので、記事を書き直しました。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>

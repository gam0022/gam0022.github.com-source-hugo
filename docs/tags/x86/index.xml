<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>gam0022.net</title>
    <link>https://gam0022.net/tags/x86/index.xml</link>
    <description>Recent content on gam0022.net</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>jp</language>
    <copyright>&amp;copy; 2016 gam0022</copyright>
    <atom:link href="/tags/x86/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>x86のアドレッシングモードでハマった</title>
      <link>https://gam0022.net/blog/2012/12/26/x86-addressing-mode/</link>
      <pubDate>Wed, 26 Dec 2012 23:05:00 +0900</pubDate>
      
      <guid>https://gam0022.net/blog/2012/12/26/x86-addressing-mode/</guid>
      <description>

&lt;h1 id=&#34;なぜx86&#34;&gt;なぜx86&lt;/h1&gt;

&lt;p&gt;大学の機械語序論という授業でx86(x86_64ではない)でアセンブラを書いています。&lt;/p&gt;

&lt;p&gt;x86のアドレッシングモードが難しかったので復習を兼ねてまとめます。&lt;/p&gt;

&lt;h1 id=&#34;やりたかったこと&#34;&gt;やりたかったこと&lt;/h1&gt;

&lt;p&gt;授業で&lt;strong&gt;&lt;code&gt;fib(10)&lt;/code&gt;を求めて&lt;code&gt;ebx&lt;/code&gt;に格納する&lt;/strong&gt;課題がありました。&lt;/p&gt;

&lt;p&gt;方針としては、aというシンボルのデータ領域を、アドレッシングモードを使って配列のように扱い、
フィボナッチ数列を計算することにしました。&lt;/p&gt;

&lt;p&gt;わかりやすくRubyで書くとこんな方針です。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# fib.rb
a = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0]
(0..8).each {|i| a[i+2] = a[i+1] + a[i]}
puts a[10]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;アセンブラで&lt;code&gt;a[i+2]&lt;/code&gt;や&lt;code&gt;a[i+1]&lt;/code&gt;を参照する必要があったので、
アドレッシングモードを利用したいと思ったわけです。&lt;/p&gt;

&lt;h1 id=&#34;x86のアドレッシングモード&#34;&gt;x86のアドレッシングモード&lt;/h1&gt;

&lt;p&gt;授業の資料によると、x86 では、以下のアドレッシングができるそうです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;BASE+(INDEX*SCALE)+DISPLACEMENT
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;DISPLACEMENT:  アドレス、もしくはベースレジスタからのオフセットを示す。定数。&lt;/li&gt;
&lt;li&gt;BASE:  ベースレジスタ&lt;/li&gt;
&lt;li&gt;INDEX:  インデックスレジスタ、配列の添え字のようなもの&lt;/li&gt;
&lt;li&gt;SCALE: 2,4,8 のいずれか。配列要素のサイズを指定する。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;そして、これを次のように記述するらしいです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DISPLACEMENT(BASE, INDEX, SCALE)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;注意点&#34;&gt;注意点&lt;/h2&gt;

&lt;p&gt;ここがポイントなのですが、&lt;/p&gt;

&lt;p&gt;&lt;em&gt;アドレッシングモードを利用するときには必ず型を守らなくてはいけません。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;特に、 &lt;em&gt;BASEをレジスタにするのを忘れて&lt;/em&gt; エラーになるケースが多いような気がします。&lt;/p&gt;

&lt;p&gt;コンパイラは&lt;code&gt;junk error&lt;/code&gt;とか適当なエラーメッセージしか出してくれないので、
何がいけないのか分からずに苦労しました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DISPLACEMENTには定数を指定する。&lt;/li&gt;
&lt;li&gt;BASEとINDEXにはレジスタを指定する。&lt;/li&gt;
&lt;li&gt;DISPLACEMENTはバイト単位(long型の配列なら、添字*4を指定する)。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これらを踏まえると、&lt;code&gt;%eax&lt;/code&gt;にインデックス、&lt;code&gt;%ecx&lt;/code&gt;に配列arrayの先頭アドレスを格納したとき、
&lt;code&gt;array[%eax+2]&lt;/code&gt;を参照するためには、次のようにする必要がありました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-s&#34;&gt;8(%ecx, %eax, 4) # array[%eax+2]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;慣れている人にとっては常識かもしれませんが、
普段RubyとかC#しか書いていない人にとっては苦行でした。&lt;/p&gt;

&lt;p&gt;また、&lt;code&gt;%ecx&lt;/code&gt;に配列aの先頭アドレスを格納するときには、
&lt;code&gt;mov $a, %ecx&lt;/code&gt;というようにaにダラーが必要なのですが、これも知らないと間違えそうです。&lt;/p&gt;

&lt;h1 id=&#34;成果物&#34;&gt;成果物&lt;/h1&gt;

&lt;p&gt;最終的に&lt;code&gt;fib(10)&lt;/code&gt;を求めて&lt;code&gt;ebx&lt;/code&gt;に格納するx86のアセンブラのコードはこんなのになりました。&lt;/p&gt;

&lt;p&gt;アセンブラは難しいです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-s&#34;&gt;# fib-x84asm.s
.data
.align 4
a:
  .long 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0

.text
.global main
main:
  mov $0, %eax # ループカウンタ
  mov $a, %ecx # aの先頭ポインタ

L1:                          # for(eax=0; eax&amp;lt;9; eax++)
  cmp $9, %eax
  je L2

  mov (%ecx,%eax, 4), %ebx   # ebx = a[eax]
  add 4(%ecx, %eax, 4), %ebx # ebx += a[eax+1]
  mov %ebx, 8(%ecx, %eax, 4) # a[eax+2] = ebx

  add $1, %eax
  jmp L1

L2:
  call stop
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>

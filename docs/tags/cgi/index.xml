<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>gam0022.net</title>
    <link>https://gam0022.net/tags/cgi/index.xml</link>
    <description>Recent content on gam0022.net</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>jp</language>
    <copyright>&amp;copy; 2016 gam0022</copyright>
    <atom:link href="/tags/cgi/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>WEBrickを使って、RubyCGIをローカル上でテストする</title>
      <link>https://gam0022.net/blog/2012/08/25/preview-ruby-cgi-using-webrick/</link>
      <pubDate>Sat, 25 Aug 2012 11:19:00 +0900</pubDate>
      
      <guid>https://gam0022.net/blog/2012/08/25/preview-ruby-cgi-using-webrick/</guid>
      <description>

&lt;p&gt;WEBrickを使って、RubyCGIをローカル上でプレビューする方法を紹介します。前にTwinCalを作った時にこの方法を覚えました。&lt;/p&gt;

&lt;p&gt;ApacheはC言語で書かれていているために&lt;a href=&#34;http://thinkit.co.jp/article/117/4?page=0,1&#34;&gt;パフォーマンスが良い&lt;/a&gt;ので本番環境ではApacheを採用しましたが、
ローカルでテスト用に使うにはWEBrickでちょろっとサーバを立てるのが良いですよね、そうしましょう。&lt;/p&gt;

&lt;p&gt;テスト環境(ローカル)
:WEBrick&lt;/p&gt;

&lt;p&gt;本番環境(サーバ)
:Apache&lt;/p&gt;

&lt;p&gt;あとは、rsyncとかでファイルを同期できるようにしたら完璧。&lt;/p&gt;

&lt;h3 id=&#34;1-rubyのパスを本番環境とテスト環境で統一する&#34;&gt;1. Rubyのパスを本番環境とテスト環境で統一する&lt;/h3&gt;

&lt;p&gt;Rubyのパスを本番環境とテスト環境で統一するために、
&lt;code&gt;/usr/bin/ruby&lt;/code&gt;のシンボリックリンクをrvmなどで入れたRubyに置き換えます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mv /usr/bin/ruby /usr/bin/ruby-original
ln -s /Users/gam0022/.rvm/rubies/ruby-1.9.3-p194/bin/ruby /usr/bin/ruby
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;本番環境とテスト環境の両方で行います。&lt;/p&gt;

&lt;p&gt;当然ですが、RubyのCGIではこのパスを1行目に指定します。&lt;/p&gt;

&lt;h3 id=&#34;2-webrickを使う&#34;&gt;2. WEBrickを使う&lt;/h3&gt;

&lt;p&gt;WEBrickについて簡単に説明すると、RubyでWEBサーバを立てるためのライブラリです。
これをrequireすることで、10行くらいのコードを書くだけで簡易WEBサーバが完成します。&lt;/p&gt;

&lt;p&gt;私の場合、次のような&lt;code&gt;preview.rb&lt;/code&gt;を書きました。
WEBrickで.rbをAddHandlerする方法がなかなかわからなくて苦労しました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;webrick&#39;
include WEBrick

module WEBrick::HTTPServlet
  FileHandler.add_handler(&#39;rb&#39;, CGIHandler)
end

s = HTTPServer.new(
  :Port =&amp;gt; 3000,
  :DocumentRoot =&amp;gt; File.join(Dir.pwd),
  :DirectoryIndex =&amp;gt; [&#39;index.rb&#39;]
)
trap(&amp;quot;INT&amp;quot;) { s.shutdown }
s.start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この&lt;code&gt;preview.rb&lt;/code&gt;を公開したいディレクトリに設置し、
ターミナルで&lt;code&gt;ruby preview.rb&lt;/code&gt;をすれば、ブラウザで&lt;code&gt;localhost:3000&lt;/code&gt;にアクセスすることで、
簡単にローカル上でCGIをテストすることができます。&lt;/p&gt;

&lt;h3 id=&#34;おまけ-webrickでrequesturitoolargeが発生したときの対処方法&#34;&gt;おまけ: WEBrickでRequestURITooLargeが発生したときの対処方法&lt;/h3&gt;

&lt;p&gt;ApacheではURIの上限が大きいので、かなり長いURIを発行しても問題がないのですが、WEBrickでは2083byteの制限があるので、
CGIで長いURIを発行すると、RequestURITooLargeというエラーになってしまうことがあります。&lt;/p&gt;

&lt;p&gt;これは、WEBrickのソースコードを書き換えることで対処できます。&lt;/p&gt;

&lt;p&gt;私の環境では、&lt;code&gt;/usr/local/rvm/rubies/ruby-1.9.3-p194/lib/ruby/1.9.1/webrick/httprequest.rb&lt;/code&gt;のL293に、
&lt;code&gt;MAX_URI_LENGTH&lt;/code&gt;という定数があったので、これを書き換えることで対処できました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;291     private
292 
293     MAX_URI_LENGTH = 20830#2083 # :nodoc:
294 
295     def read_request_line(socket)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://mukaer.com/archives/2012/03/19/rubywebrickrequ/&#34;&gt;RubyでWebrick利用時にRequestURITooLargeエラー発生時の対処&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ServersMan@VPSでRubyのCGIを実行するまでのメモ</title>
      <link>https://gam0022.net/blog/2012/07/26/run-ruby-cgi-on-serversman-at-vps/</link>
      <pubDate>Thu, 26 Jul 2012 00:11:00 +0900</pubDate>
      
      <guid>https://gam0022.net/blog/2012/07/26/run-ruby-cgi-on-serversman-at-vps/</guid>
      <description>

&lt;p&gt;ServersMan@VPS(Ubuntu)でRubyのCGIを実行するまでのメモです。&lt;/p&gt;

&lt;h2 id=&#34;apache2をインストールする&#34;&gt;apache2をインストールする&lt;/h2&gt;

&lt;p&gt;apt-getかaptitudeでインストールすればいいと思います。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo aptitude install apache2	
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;addhandlerを設定する&#34;&gt;AddHandlerを設定する&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;/etc/apache2/mods-enabled/mime.conf&lt;/code&gt;にAddHandlerを設定します。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;#AddHandler cgi-script .cgi&lt;/code&gt;という行があるので、
見つけてコメントアウトを解除して、次のように書き換えればいいと思います。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;AddHandler cgi-script .cgi .rb
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;options-execcgiを設定する&#34;&gt;Options +ExecCGIを設定する&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;/etc/apache2/sites-available/default&lt;/code&gt;でOptions +ExecCGIを設定します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;Directory /var/www/html/&amp;gt;
	#Options Indexes FollowSymLinks MultiViews 
	Options Indexes FollowSymLinks MultiViews ExecCGI
	AllowOverride None
	Order allow,deny
	allow from all
&amp;lt;/Directory&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;apache2を再起動する&#34;&gt;apache2を再起動する&lt;/h2&gt;

&lt;p&gt;上の2つのファイルを編集したら、apacheを再起動して設定を反映させます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo /etc/init.d/apache2 restart	
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;ruby-cgiのパーミッションを755にする&#34;&gt;Ruby CGIのパーミッションを755にする&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd /var/www/html
chmod 755 test.rb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これでたぶん動くようになります。&lt;/p&gt;

&lt;p&gt;ね？簡単でしょ？&lt;/p&gt;

&lt;h2 id=&#34;うまくいかないときは&#34;&gt;うまくいかないときは&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;/var/log/apache2/error.log&lt;/code&gt;のエラーメッセージを見ましょう。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

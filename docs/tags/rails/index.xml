<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>gam0022.net</title>
    <link>https://gam0022.net/tags/rails/index.xml</link>
    <description>Recent content on gam0022.net</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>jp</language>
    <copyright>&amp;copy; 2016 gam0022</copyright>
    <atom:link href="/tags/rails/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>JavaScriptとCoffeeScriptのメモ</title>
      <link>https://gam0022.net/blog/2014/06/15/javascript-and-coffeescript/</link>
      <pubDate>Sun, 15 Jun 2014 06:50:00 +0900</pubDate>
      
      <guid>https://gam0022.net/blog/2014/06/15/javascript-and-coffeescript/</guid>
      <description>&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;

&lt;p&gt;卒研で &lt;a href=&#34;http://threejs.org/&#34;&gt;three.js&lt;/a&gt; という3DCGのライブラリを使って何か開発することしたので、JavaScript について勉強しました。&lt;/p&gt;

&lt;p&gt;また、CoffeeScript という、コンパイルするとJavaScriptのコードに変換される言語についても使ってみることにしたので、
これについても勉強しました。&lt;/p&gt;

&lt;p&gt;忘れてしまうと勿体無く思うので、備忘録です。&lt;/p&gt;

&lt;p&gt;この記事では、&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;JavaScriptを勉強する上で重要だと思われる概念&lt;/li&gt;
&lt;li&gt;CoffeScript の学び方&lt;/li&gt;
&lt;li&gt;Rails で CoffeeScript を使う時のメモ&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;を紹介します。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;javascript-について&#34;&gt;JavaScript について&lt;/h1&gt;

&lt;p&gt;一般的なオブジェクト指向を使いこなせる人が本格的に JavaScript で開発する前に、次のルールについては抑えておきたいと思いました。
クロージャーは別としても、どれも他の言語にはない、特異なルールとなっています。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;変数のスコープとクロージャ&lt;/li&gt;
&lt;li&gt;プロトタイプチェーン(プロトタイプ・ベースのオブジェクト指向)&lt;/li&gt;
&lt;li&gt;thisキーワードの指す4種類のパターン&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;変数のスコープとクロージャについて&#34;&gt;変数のスコープとクロージャについて&lt;/h2&gt;

&lt;p&gt;JavaScriptのローカル変数のスコープは関数ごとにしかありません。
一般的な言語ではブロックごとにスコープを持つので混乱しやすいと思いました。&lt;/p&gt;

&lt;p&gt;また、スコープチェーンという仕組みによって、関数をネストすると、中の関数から、外の関数のローカル変数を参照できます。&lt;/p&gt;

&lt;p&gt;そして、関数を返す関数(クロージャ)を作ると、内側の関数(クロージャー)から参照された外の関数のローカル変数は、
「クロージャの呼び出し元のスコープからは参照できない」かつ「クロージャを抜けても値を保持し続ける」という性質があります。&lt;/p&gt;

&lt;p&gt;この説明だけだと理解不能だと思うので、コード例などを踏まえながら、
以下の記事を読んでおくと理解できると思います。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/takeharu/items/4975031faf6f7baf077a&#34;&gt;JavaScriptでクロージャ入門&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.atmarkit.co.jp/ait/articles/0708/21/news116.html&#34;&gt;第3回　変数の宣言とスコープ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://tacamy.hatenablog.com/entry/2012/12/31/005951&#34;&gt;JavaScript のスコープチェーンとクロージャを理解する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;プロトタイプチェーン-プロトタイプ-ベースのオブジェクト指向-について&#34;&gt;プロトタイプチェーン(プロトタイプ・ベースのオブジェクト指向)について&lt;/h2&gt;

&lt;p&gt;JavaScriptでは関数オブジェクトにクラスとしての役割を与えているのですが、
prototypeプロパティを用いて、複数のインスタンスで同じメソッドを参照したり、
別のクラスを継承することを実現することができます。&lt;/p&gt;

&lt;p&gt;また、別の視点から見ると、全てのインスタンスはハッシュオブジェクトです。&lt;/p&gt;

&lt;p&gt;インスタンスのメンバーはハッシュのキーのことであり、
メソッドは、prototype プロパティによって複数のハッシュ(インスタンス)から参照できる関数オブジェクトでしかありません。&lt;/p&gt;

&lt;p&gt;プロトタイプチェーンについては、次の記事が分かりやすかったので、読んでおくと良いと思います。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.atmarkit.co.jp/ait/articles/0709/25/news148.html&#34;&gt;第4回　JavaScriptでオブジェクト指向プログラミング&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;thisキーワードの指す4種類のパターンについて&#34;&gt;thisキーワードの指す4種類のパターンについて&lt;/h2&gt;

&lt;p&gt;一般的な言語では、this は自身のインスタンスを参照するキーワードで変化することありませんが、
JavaScriptのthisはメソッドの呼び出しのパターンによって変化します。&lt;/p&gt;

&lt;p&gt;このthisキーワードの指す4種類のパターンについては、次の記事が分かりやすかったので、読んでおくといいと思います。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://qiita.com/takeharu/items/9935ce476a17d6258e27&#34;&gt;JavaScriptの「this」は「4種類」？？&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;coffescript-の学び方&#34;&gt;CoffeScript の学び方&lt;/h1&gt;

&lt;p&gt;基本的には&lt;a href=&#34;http://coffeescript.org/&#34;&gt;公式ページ&lt;/a&gt;に例がたくさんあるので、それを読んだほうが良い場合が多いです。&lt;/p&gt;

&lt;p&gt;また、サンプルコードは[load]ボタンで実際に実行したり編集することができるので、いっそう理解が深まると思います。&lt;/p&gt;

&lt;p&gt;翻訳された、&lt;a href=&#34;http://memo.sappari.org/coffeescript/coffeescript-langref&#34;&gt;CoffeeScript 言語リファレンス&lt;/a&gt;も内容が充実していて参考になったのですが、
1.0.1のものらしくて、最新版の1.7.1からけっこう遅れており、私の気がついた範囲で、1つだけ間違っている箇所があったので、
次の章で間違いを指摘しておきます。&lt;/p&gt;

&lt;p&gt;慣れるまでは、出力される JavaScript のコードを確認しながら開発した方が良さそうな認識です。
(CoffeeScriptで開発しても、デバッグは JavaScript のコードを読むことになります。)&lt;/p&gt;

&lt;p&gt;また、既存の JavaScriptのコードを手っ取り早く CoffeeScript に移植したいと思った時には、
&lt;a href=&#34;http://js2coffee.org/&#34;&gt;Js2coffee&lt;/a&gt;という JavaScript から CoffeeScript に逆変換してくれるサイトが役立ちます。&lt;/p&gt;

&lt;h2 id=&#34;coffeescript-のクラスについて&#34;&gt;CoffeeScript のクラスについて&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://memo.sappari.org/coffeescript/coffeescript-langref&#34;&gt;CoffeeScript 言語リファレンス&lt;/a&gt;の「クラス, 継承, super」の章に、次のコードが紹介されています。&lt;/p&gt;

&lt;p&gt;```ruby 間違ったインスタンス変数の定義
class Hoge
  someInstanceProp: &amp;ldquo;hoge&amp;rdquo;       # インスタンス変数
  someInstanceMethod: -&amp;gt;         # インスタンスメソッド
    @callAnotherInstanceMethod() # インスタンスメソッドを呼ぶ
    alert @someInstanceProp      # ==&amp;gt; &amp;ldquo;hoge&amp;rdquo;&lt;/p&gt;

&lt;p&gt;@someClassProp: &amp;ldquo;hogehoge&amp;rdquo;     # クラス変数
  @someClassMethod: -&amp;gt;           # クラスメソッド
    @callAnotherClassMethod()    # 同一クラスのクラスメソッドを呼ぶ
    alert @someClassProp         # ==&amp;gt; &amp;ldquo;hogehoge&amp;rdquo;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
しかし、この someInstanceProp はprototypeに保存されるので、インスタンス変数としての使い方は間違いだと思います。

例えば、次のように `someInstanceProp` に破壊的な操作をすると、他のインスタンスの `someInstanceProp` まで影響を与えてしまいます。

```ruby 他のクラスのsomeInstancePropまで影響がでる
class Hoge
  someInstanceProp: [1,2,3]      # インスタンス変数
  someInstanceMethod: -&amp;gt;         # インスタンスメソッド
    @callAnotherInstanceMethod() # インスタンスメソッドを呼ぶ
    alert @someInstanceProp      # ==&amp;gt; &amp;quot;hoge&amp;quot;

  @someClassProp: &amp;quot;hogehoge&amp;quot;     # クラス変数
  @someClassMethod: -&amp;gt;           # クラスメソッド
    @callAnotherClassMethod()    # 同一クラスのクラスメソッドを呼ぶ
    alert @someClassProp         # ==&amp;gt; &amp;quot;hogehoge&amp;quot;

h1 = new Hoge()
alert h1.someInstanceProp # =&amp;gt; [1,2,3]
h1.someInstanceProp.reverse()
alert h1.someInstanceProp # =&amp;gt; [3,2,1]

h2 = new Hoge()
alert h2.someInstanceProp # =&amp;gt; [3,2,1] !他のクラスでの変更の影響を受けている
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://coffeescript.org/#try:class%20Hoge%0A%20%20someInstanceProp%3A%20%5B1%2C2%2C3%5D%20%20%20%20%20%20%23%20%E3%82%A4%E3%83%B3%E3%82%B9%E3%82%BF%E3%83%B3%E3%82%B9%E5%A4%89%E6%95%B0%0A%20%20someInstanceMethod%3A%20-%3E%20%20%20%20%20%20%20%20%20%23%20%E3%82%A4%E3%83%B3%E3%82%B9%E3%82%BF%E3%83%B3%E3%82%B9%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%0A%20%20%20%20%40callAnotherInstanceMethod()%20%23%20%E3%82%A4%E3%83%B3%E3%82%B9%E3%82%BF%E3%83%B3%E3%82%B9%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%82%92%E5%91%BC%E3%81%B6%0A%20%20%20%20alert%20%40someInstanceProp%20%20%20%20%20%20%23%20%3D%3D%3E%20%22hoge%22%0A%0A%20%20%40someClassProp%3A%20%22hogehoge%22%20%20%20%20%20%23%20%E3%82%AF%E3%83%A9%E3%82%B9%E5%A4%89%E6%95%B0%0A%20%20%40someClassMethod%3A%20-%3E%20%20%20%20%20%20%20%20%20%20%20%23%20%E3%82%AF%E3%83%A9%E3%82%B9%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%0A%20%20%20%20%40callAnotherClassMethod()%20%20%20%20%23%20%E5%90%8C%E4%B8%80%E3%82%AF%E3%83%A9%E3%82%B9%E3%81%AE%E3%82%AF%E3%83%A9%E3%82%B9%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%82%92%E5%91%BC%E3%81%B6%0A%20%20%20%20alert%20%40someClassProp%20%20%20%20%20%20%20%20%20%23%20%3D%3D%3E%20%22hogehoge%22%0A%0Ah1%20%3D%20new%20Hoge()%0Aalert%20h1.someInstanceProp%20%23%20%3D%3E%20%5B1%2C2%2C3%5D%0Ah1.someInstanceProp.reverse()%0Aalert%20h1.someInstanceProp%20%23%20%3D%3E%20%5B3%2C2%2C1%5D%0A%0Ah2%20%3D%20new%20Hoge()%0Aalert%20h2.someInstanceProp%20%23%20%3D%3E%20%5B1%2C2%2C3%5D&#34;&gt;coffeescript.org で動作確認する&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;正しいsomeinstancepropの定義&#34;&gt;正しいsomeInstancePropの定義&lt;/h3&gt;

&lt;p&gt;正しい &lt;code&gt;someInstanceProp&lt;/code&gt; の定義はこうです。&lt;/p&gt;

&lt;p&gt;```ruby 正しいインスタンス変数の定義
class Hoge
  constructor: () -&amp;gt;
    @someInstanceProp = [1,2,3]  # インスタンス変数&lt;/p&gt;

&lt;p&gt;someInstanceMethod: -&amp;gt;         # インスタンスメソッド
    @callAnotherInstanceMethod() # インスタンスメソッドを呼ぶ
    alert @someInstanceProp      # ==&amp;gt; &amp;ldquo;hoge&amp;rdquo;&lt;/p&gt;

&lt;p&gt;@someClassProp: &amp;ldquo;hogehoge&amp;rdquo;     # クラス変数
  @someClassMethod: -&amp;gt;           # クラスメソッド
    @callAnotherClassMethod()    # 同一クラスのクラスメソッドを呼ぶ
    alert @someClassProp         # ==&amp;gt; &amp;ldquo;hogehoge&amp;rdquo;&lt;/p&gt;

&lt;p&gt;h1 = new Hoge()
alert h1.someInstanceProp # =&amp;gt; [1,2,3]
h1.someInstanceProp.reverse()
alert h1.someInstanceProp # =&amp;gt; [3,2,1]&lt;/p&gt;

&lt;p&gt;h2 = new Hoge()
alert h2.someInstanceProp # =&amp;gt; [1,2,3]
```&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://coffeescript.org/#try:class%20Hoge%0A%20%20constructor%3A%20()%20-%3E%0A%20%20%20%20%40someInstanceProp%20%3D%20%5B1%2C2%2C3%5D%20%20%23%20%E3%82%A4%E3%83%B3%E3%82%B9%E3%82%BF%E3%83%B3%E3%82%B9%E5%A4%89%E6%95%B0%0A%0A%20%20someInstanceMethod%3A%20-%3E%20%20%20%20%20%20%20%20%20%23%20%E3%82%A4%E3%83%B3%E3%82%B9%E3%82%BF%E3%83%B3%E3%82%B9%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%0A%20%20%20%20%40callAnotherInstanceMethod()%20%23%20%E3%82%A4%E3%83%B3%E3%82%B9%E3%82%BF%E3%83%B3%E3%82%B9%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%82%92%E5%91%BC%E3%81%B6%0A%20%20%20%20alert%20%40someInstanceProp%20%20%20%20%20%20%23%20%3D%3D%3E%20%22hoge%22%0A%0A%20%20%40someClassProp%3A%20%22hogehoge%22%20%20%20%20%20%23%20%E3%82%AF%E3%83%A9%E3%82%B9%E5%A4%89%E6%95%B0%0A%20%20%40someClassMethod%3A%20-%3E%20%20%20%20%20%20%20%20%20%20%20%23%20%E3%82%AF%E3%83%A9%E3%82%B9%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%0A%20%20%20%20%40callAnotherClassMethod()%20%20%20%20%23%20%E5%90%8C%E4%B8%80%E3%82%AF%E3%83%A9%E3%82%B9%E3%81%AE%E3%82%AF%E3%83%A9%E3%82%B9%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%82%92%E5%91%BC%E3%81%B6%0A%20%20%20%20alert%20%40someClassProp%20%20%20%20%20%20%20%20%20%23%20%3D%3D%3E%20%22hogehoge%22%0A%0Ah1%20%3D%20new%20Hoge()%0Aalert%20h1.someInstanceProp%20%23%20%3D%3E%20%5B1%2C2%2C3%5D%0Ah1.someInstanceProp.reverse()%0Aalert%20h1.someInstanceProp%20%23%20%3D%3E%20%5B3%2C2%2C1%5D%0A%0Ah2%20%3D%20new%20Hoge()%0Aalert%20h2.someInstanceProp%20%23%20%3D%3E%20%5B3%2C2%2C1%5D&#34;&gt;coffeescript.org で動作確認する&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;補足すると、classのトップレベルでの&lt;code&gt;@var&lt;/code&gt;と、関数内での&lt;code&gt;@var&lt;/code&gt;は意味が違います。&lt;/p&gt;

&lt;p&gt;前者は&lt;code&gt;ClassName.var&lt;/code&gt;となりますが、後者は&lt;code&gt;this.var&lt;/code&gt;となります。&lt;/p&gt;

&lt;p&gt;インスタンス変数は、後者の関数内での&lt;code&gt;@var&lt;/code&gt;で定義すると良さそうです。&lt;/p&gt;

&lt;h1 id=&#34;rails-で-coffeescript-を使う時のメモ&#34;&gt;Rails で CoffeeScript を使う時のメモ&lt;/h1&gt;

&lt;p&gt;Rails を 使うと、Asset Pipeline で CoffeeScript の自動コンパイル環境ができて楽なのですが、
Railsのデフォルトの設定だと、出力される JavaScript が無名関数&lt;code&gt;(function(){ }).call(this)&lt;/code&gt;の中に隠されてしまうので、
class を作っても外部から参照できなくなってしまいます。&lt;/p&gt;

&lt;p&gt;そういう場合は、&lt;code&gt;bare&lt;/code&gt;オプションを使うと良いです。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;config/environment.rb&lt;/code&gt; の中に &lt;code&gt;Tilt::CoffeeScriptTemplate.default_bare = true&lt;/code&gt;という行を加えると、
無名関数に囲まれなくなります。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rails4をPassengerで動かす</title>
      <link>https://gam0022.net/blog/2013/10/18/run-rails-on-passenger/</link>
      <pubDate>Fri, 18 Oct 2013 00:13:00 +0900</pubDate>
      
      <guid>https://gam0022.net/blog/2013/10/18/run-rails-on-passenger/</guid>
      <description>&lt;p&gt;RailsをPassengerを使ってVPSで動かすまでにハマったことなどをメモします。&lt;/p&gt;

&lt;p&gt;自分用のメモ程度の記事なので、あくまで参考程度にお願いします。&lt;/p&gt;

&lt;p&gt;Railsのサーバ環境を作るのは難しいというイメージがありましたが、結果的には Passenger の指示通りにやればなんとかなりました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Passenger をインストールする。

&lt;ul&gt;
&lt;li&gt;古い情報らしいですが、Passenger のインストールについては、&lt;a href=&#34;http://redmine.jp/tech_note/apache-passenger/&#34;&gt;このページ&lt;/a&gt;が参考になる。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ gem install passenger&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ passenger-install-apache2-module&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;上を実行すると、必要なパッケージが足りてないというエラーがでるので、パッケージ管理システムなどを使ってインストールする。&lt;/li&gt;
&lt;li&gt;インストールが成功すると、LoadModule などの設定やvirtualhostの設定のサンプルが表示されるので、メモしておく。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;LoadModule passenger_module /usr/local/rvm/gems/ruby-2.0.0-p247/gems/passenger-4.0.14/buildout/apache2/mod_passenger.so
PassengerRoot /usr/local/rvm/gems/ruby-2.0.0-p247/gems/passenger-4.0.14
PassengerDefaultRuby /usr/local/rvm/wrappers/ruby-2.0.0-p247/ruby
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;VirtualHost *:80&amp;gt;
  ServerName www.yourhost.com
  # !!! Be sure to point DocumentRoot to &#39;public&#39;!
  DocumentRoot /somewhere/public
  &amp;lt;Directory /somewhere/public&amp;gt;
    # This relaxes Apache security settings.
    AllowOverride all
    # MultiViews must be turned off.
    Options -MultiViews
  &amp;lt;/Directory&amp;gt;
&amp;lt;/VirtualHost&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;VPSのAレコードの設定をして、サブドメインを使えるようにする。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://dream.jp/&#34;&gt;DTI&lt;/a&gt; のServerman@VPSのUbicNameでドメインを取っている場合、負荷分散設定というのでDNSレコードを設定できる。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Railsのプロジェクトをサーバの適当な場所に配置する。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Apache の設定。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;念のため、Ubuntuのapache2の場合です。&lt;/li&gt;
&lt;li&gt;極論から言うと、ちゃんと Include された設定ファイルに Passenger のインストールの時にメモされたものを貼り付けておけば問題ない。&lt;/li&gt;
&lt;li&gt;私はこのようにしました。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/etc/apache2/sites-available/default&lt;/code&gt; に &lt;code&gt;VirtualHost&lt;/code&gt; の設定を書く。当然だが、ServerNameやDirectoryは書き換える。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/etc/apache2/mods-available/passenger.load&lt;/code&gt; に &lt;code&gt;LoadModule passenger_module&lt;/code&gt; の行を追加。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/etc/apache2/mods-available/passenger.conf&lt;/code&gt; に &lt;code&gt;PassengerRoot&lt;/code&gt; と &lt;code&gt;PassengerDefaultRuby&lt;/code&gt; の行を追加。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/etc/apache2/mods-enabled/&lt;/code&gt; に上へのシンボリックリンクを貼る。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd /etc/apache2/mods-enabled/
ln -s /etc/apache2/mods-available/passenger.load ./passenger.load
ln -s /etc/apache2/mods-available/passenger.conf ./passenger.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Appacheの再起動をする。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$ sudo /etc/init.d/apache2 restart&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;これで動くはずだったが、ブラウザで動作を確認すると、Passenger がエラーを出していた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Could not find a JavaScript runtime.&lt;/code&gt; とか言われたら、こうする。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gem &#39;therubyracer&#39;&lt;/code&gt; を Gemfileに追加。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ bundle install&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;ちなみに &lt;code&gt;therubyracer&lt;/code&gt;はすごい容量がでかいので、bundle install にものすごく時間がかかった。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;やっとできたとおもったら、今度は Rails のエラー。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;production用のDBをmigrateしてないだけだった。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ rake db:migrate RAILS_ENV=production&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;とりあえず、これで Rails を Passenger で動かすことが出来ました。めでたしめでたし。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

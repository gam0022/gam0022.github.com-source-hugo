<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>gam0022.net</title>
    <link>https://gam0022.net/tags/coins/index.xml</link>
    <description>Recent content on gam0022.net</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>jp</language>
    <copyright>&amp;copy; 2016 gam0022</copyright>
    <atom:link href="/tags/coins/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>coinsの環境を使ってDynamic Forward</title>
      <link>https://gam0022.net/blog/2013/03/21/dynamic-forward/</link>
      <pubDate>Thu, 21 Mar 2013 11:17:00 +0900</pubDate>
      
      <guid>https://gam0022.net/blog/2013/03/21/dynamic-forward/</guid>
      <description>

&lt;p&gt;Twinsなど学内向けのサイトにアクセスするためにLocalForwardを使っている人が多いようですが、
DynamicForwardの方が汎用性が高くて便利なのに、使っている人が少ないような印象を受けるので紹介します。&lt;/p&gt;

&lt;p&gt;この記事の説明はあまり分かりやすくないので、単純に学外からTwinsを使いたいだけであれば、
次の記事を参考にすれば良いと思います。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://shkh.hatenablog.com/entry/2011/11/22/231233&#34;&gt;MacでTWINSを学外から使う&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;接続の方法&#34;&gt;接続の方法&lt;/h1&gt;

&lt;h2 id=&#34;1-sshの設定をする&#34;&gt;1.sshの設定をする&lt;/h2&gt;

&lt;p&gt;まず、&lt;code&gt;~/.ssh/config&lt;/code&gt;を次のようにします。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# .ssh/config
Host coins coins-p
HostName www.coins.tsukuba.ac.jp
User sxxxxxxx

Host *-p
DynamicForward 1080
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上のように設定すると、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;普通にsshしたいだけならば、&lt;code&gt;ssh coins&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;DynamicForwardしたいなら、&lt;code&gt;ssh coins-p&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;となって捗ります。&lt;/p&gt;

&lt;p&gt;このように、*(アスタリスク)を使って設定を書くと、
重複してサーバ名などの設定を書かないで済むというちょっとしたテクニックを使っています。&lt;/p&gt;

&lt;h2 id=&#34;2-sokcsプロキシを使う&#34;&gt;2.SOKCSプロキシを使う&lt;/h2&gt;

&lt;p&gt;この設定だと、&lt;code&gt;ssh coins-p&lt;/code&gt;をしたときに、ローカルホストの1080番ポートにSOKCSプロキシサーバを割り当てると、
学内向けのサイトも普通に見れるようになります。&lt;/p&gt;

&lt;p&gt;SOKCSプロキシの設定は Mac OS X (山ライオン)ならば、&lt;code&gt;ネットワーク環境設定&lt;/code&gt;から下のスクリーンショットを参考にして行なってください。&lt;/p&gt;

&lt;p&gt;他の環境の人はググって調べてください。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2013-03-21-dynamic-forward.png&#34; alt=&#34;SOKCSプロキシの設定&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;切断するとき&#34;&gt;切断するとき&lt;/h1&gt;

&lt;p&gt;切断するときは、次の2つの両方の作業をしてください。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;sshの接続を切る。&lt;/li&gt;
&lt;li&gt;プロキシの設定を無効にする。&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>タイミングチャートと回路図を比較的楽につくる方法</title>
      <link>https://gam0022.net/blog/2012/12/05/circuit-diagram/</link>
      <pubDate>Wed, 05 Dec 2012 09:08:00 +0900</pubDate>
      
      <guid>https://gam0022.net/blog/2012/12/05/circuit-diagram/</guid>
      <description>

&lt;h1 id=&#34;近状報告&#34;&gt;近状報告&lt;/h1&gt;

&lt;p&gt;久しぶりの更新ですね()&lt;/p&gt;

&lt;p&gt;今年まで大学が3学期制なので、11/22で2学期が無事に終わり、
昨日から3学期になりました。&lt;/p&gt;

&lt;p&gt;10日間の秋休みは日中はバイト、夜はFPSという謎の生活を送っていました()&lt;/p&gt;

&lt;h1 id=&#34;なぜタイミングチャートと回路図&#34;&gt;なぜタイミングチャートと回路図&lt;/h1&gt;

&lt;p&gt;学類の2年次の2学期の必修の授業として論理回路実験というのがあったのですが、
そのレポートが本当に重かったです。&lt;/p&gt;

&lt;p&gt;レポートを作成するにあたって、タイミングチャートや回路図を書く必要
があるのですが、普通にWordのオートシェイプで描くのは困難を極めたので、
後輩たちに知恵を授けようと思い、この記事を書くに至りました。&lt;/p&gt;

&lt;h1 id=&#34;タイミングチャート&#34;&gt;タイミングチャート&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://www.mech.tohoku-gakuin.ac.jp/rde/contents/library/tchart/indexframe.html&#34;&gt;タイミングチャート清書ツール&lt;/a&gt;を使いましょう。&lt;/p&gt;

&lt;p&gt;MacでもUNIXでもWindowsでも動作するようです。&lt;/p&gt;

&lt;p&gt;次のような手順で使います。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;テキストエディタでタイミングチャートを書く。&lt;/li&gt;
&lt;li&gt;このツールでepsなどに変換する。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;素晴らしい点を挙げると次のようになります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;テキスト形式の文法がシンプル&lt;/li&gt;
&lt;li&gt;LaTex使いにとっては、epsで生成してくれると助かる&lt;/li&gt;
&lt;li&gt;実体はPerlスクリプトなので、環境を汚さない&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;例&#34;&gt;例&lt;/h2&gt;

&lt;p&gt;これは実際に課題で使用したタイミングチャートです。&lt;/p&gt;

&lt;p&gt;まず、次のようにタイミングチャートのソースを書きます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;s     ____~~__~~__~~__~~__~~__~~__~~__~~__
x     _______~~~~____~~~~____~~~~____~~~~_
Q1    __________________~~~~~~~~~~~~~~~~~~
Q2    __________~~~~~~~~~~~~~~~~__________
u     ________________________________~~__
v     ____~~______~~______~~______~~______
reset ~_~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;tchart.pl&lt;/code&gt;を適当にパスの通った場所に置いて、&lt;/p&gt;

&lt;p&gt;&lt;code&gt;tchart.pl tc1.tc &amp;gt; tc1.eps&lt;/code&gt;とすれば、次のようなタイミングチャートを簡単に生成できます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2012.12.5_tc1.png&#34; alt=&#34;タイミングチャート&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;回路図&#34;&gt;回路図&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://storklab.cyber-ninja.jp/lab/products/qtbsch3vm/index.html&#34;&gt;Qt-BSch3V Modified&lt;/a&gt;を使いましょう。&lt;/p&gt;

&lt;p&gt;MacとUNIXで動作するようです。元々WindowsのソフトをMac用に移植したらしいので、本家のソフトはWindowsでも動作します。&lt;/p&gt;

&lt;p&gt;少々使い方がわかりにくかったので、簡単に使うまでの手順を説明します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;qtbsch3v.app&lt;/code&gt;を起動。&lt;/li&gt;
&lt;li&gt;上のメニューから、&lt;code&gt;Set&amp;gt;Library&lt;/code&gt;でライブラリを追加する。このとき、&lt;code&gt;展開したディレクトリ/LIBV/LOGIC74.lb3&lt;/code&gt;を追加すればよいと思う。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Component&lt;/code&gt;ボタンでゲート(ANDゲートが7408という名前だったりするので探すのが厄介)を配置、
&lt;code&gt;Wire&lt;/code&gt;と&lt;code&gt;Junction&lt;/code&gt;ボタンで配線ができる。これだけ覚えておけばok。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;次のような回路図を描くことができます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2012.12.5_img4_3.png&#34; alt=&#34;７分周器回路の回路図&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>cocotで文字コードが異なるマシンにsshする</title>
      <link>https://gam0022.net/blog/2012/08/06/how-to-use-cocot/</link>
      <pubDate>Mon, 06 Aug 2012 11:18:00 +0900</pubDate>
      
      <guid>https://gam0022.net/blog/2012/08/06/how-to-use-cocot/</guid>
      <description>&lt;p&gt;私が所属している情報科学類(略称coins)では、24時間いつでもsshできるiMacがあるのですが、文字エンコーディングはEUC-JPです。&lt;/p&gt;

&lt;p&gt;一方で私のノートPCの文字エンコーディングはUTF-8なので、
普通にsshすると文字化けしてひどいことになってしまいます。&lt;/p&gt;

&lt;p&gt;cocotという端末(tty)とプロセスの間に割り込んで、文字コード変換を行うツールがあるので、これを使うことで文字化けが解消します。&lt;/p&gt;

&lt;p&gt;OS Xを使っていれば、cocotは普通にhomebrewからインストールできます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install cocot # cocotをインストールする
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;UTF-8環境からEUC-JP環境にsshする場合、次のようにすればいいです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# cocot -t コンソール側の文字コード -p プロセス側の文字コード -- 使いたいコマンド
cocot -t UTF-8 -p EUC-JP -- ssh coins
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;頻繁にsshする場合、次のようにエイリアスを作ればいいかと思います。
うーむ。エイリアス名は検討の余地がありそうです。(汗)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;alias sshe=&#39;cocot -t UTF-8 -p EUC-JP -- ssh&#39; #EUC-JP環境にsshする
sshe coins
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>

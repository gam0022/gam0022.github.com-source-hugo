<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>gam0022.net</title>
    <link>https://gam0022.net/tags/rust/index.xml</link>
    <description>Recent content on gam0022.net</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>jp</language>
    <copyright>&amp;copy; 2016 gam0022</copyright>
    <atom:link href="/tags/rust/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>レイトレ合宿6 参加報告 後編（当日編）</title>
      <link>https://gam0022.net/blog/2018/09/25/rtcamp6-part2/</link>
      <pubDate>Tue, 25 Sep 2018 09:08:08 +0900</pubDate>
      
      <guid>https://gam0022.net/blog/2018/09/25/rtcamp6-part2/</guid>
      <description>&lt;p&gt;記事が長くなってしまったので、準備編と当日編の2つの記事に分けました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://sites.google.com/site/raytracingcamp6/&#34;&gt;レイトレ合宿6&lt;/a&gt;の概要や自作レンダラーの紹介や取り組んだことについては前編に詳しく紹介させていただきました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gam0022.net/blog/2018/09/18/rtcamp6-part1/&#34;&gt;レイトレ合宿6 参加報告 前編（準備編） | gam0022.net&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この記事では後編（当日編）として合宿当日の様子について振り返ります。
主に参加者との交流や神津島観光やレクリエーションの様子について書いていきます。
現地の雰囲気が少しでも伝われば幸いです。&lt;/p&gt;

&lt;p&gt;また、他の参加者のレポートも合わせてお読みいただくと、内容を補完できると思います。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://xyz600.hatenablog.com/entry/2018/09/08/001206&#34;&gt;レイトレ合宿6 参加記 - xyz600’s diary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://shutosg.hatenadiary.com/entry/2018/09/07/013329&#34;&gt;レイトレ合宿6 参加レポート - shuto_log.aep&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://project-asura.com/blog/archives/4406&#34;&gt;レイトレ合宿6に参加しました。 &amp;#8211; ☆PROJECT　ASURA☆&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ushiostarfish.hatenablog.com/entry/2018/09/09/201129&#34;&gt;レイトレ合宿６に行ってきました - ushiostarfish’s diary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://c5h12.hatenablog.com/entry/2018/09/09/225500&#34;&gt;レイトレ合宿6に行ってきました - Pentanium Blog?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;合宿当日の様子&#34;&gt;合宿当日の様子&lt;/h1&gt;

&lt;p&gt;バタバタしながらもなんとかレンダラーを提出して合宿当日を迎えることができました。&lt;/p&gt;

&lt;p&gt;寝坊すると代替の交通手段が確保できない可能性が高かったので、合宿前日はなるべく早く退社して、帰宅後はすぐに寝ました。
早寝が功を奏してなんとか起床に成功しました。&lt;/p&gt;

&lt;h2 id=&#34;東京-神津島の移動&#34;&gt;東京〜神津島の移動&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.central-air.co.jp/aircraft.html&#34;&gt;乗員19名の小さなプロペラ機&lt;/a&gt;で移動しました✈&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;最前席にきた！ &lt;a href=&#34;https://twitter.com/hashtag/%E3%83%AC%E3%82%A4%E3%83%88%E3%83%AC%E5%90%88%E5%AE%BF?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#レイトレ合宿&lt;/a&gt; &lt;a href=&#34;https://t.co/DOJqQwBFhJ&#34;&gt;pic.twitter.com/DOJqQwBFhJ&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1035704588685402113?ref_src=twsrc%5Etfw&#34;&gt;2018年9月1日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;und&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/hashtag/%E3%83%AC%E3%82%A4%E3%83%88%E3%83%AC%E5%90%88%E5%AE%BF?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#レイトレ合宿&lt;/a&gt; &lt;a href=&#34;https://t.co/g5Rm6LrejH&#34;&gt;pic.twitter.com/g5Rm6LrejH&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1035724383199748104?ref_src=twsrc%5Etfw&#34;&gt;2018年9月1日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;ボリュームレンダリングのサンプル &lt;a href=&#34;https://twitter.com/hashtag/%E3%83%AC%E3%82%A4%E3%83%88%E3%83%AC%E5%90%88%E5%AE%BF?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#レイトレ合宿&lt;/a&gt; &lt;a href=&#34;https://t.co/vuEUwgqgmv&#34;&gt;pic.twitter.com/vuEUwgqgmv&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1035758402478063616?ref_src=twsrc%5Etfw&#34;&gt;2018年9月1日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;台風の影響で欠便にならないかヒヤヒヤしていたのですが、結果的には天候に恵まれました。
さらに大型飛行機よりも低空飛行だったので、景色を楽しむことができました！&lt;/p&gt;

&lt;p&gt;最前列の席だったので、座席のすぐ隣がプロペラで迫力満点でした！&lt;/p&gt;

&lt;p&gt;ちなみに自分以外の参加者はみんな船で移動したらしく、周りに知らない人しかおらずひとり寂しかったです😢&lt;/p&gt;

&lt;p&gt;おおよそ一時間くらいで神津島に到着しました！&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;I&amp;#39;m at 神津島 in 神津島村, 東京都 &lt;a href=&#34;https://t.co/hh3q4cPWSz&#34;&gt;https://t.co/hh3q4cPWSz&lt;/a&gt; &lt;a href=&#34;https://t.co/9juUdNb3MA&#34;&gt;pic.twitter.com/9juUdNb3MA&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1035719096753692672?ref_src=twsrc%5Etfw&#34;&gt;2018年9月1日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;飛行機からの神津島の様子です（機内モードでの撮影）。&lt;/p&gt;

&lt;p&gt;海の青さが深くて綺麗でした🌊&lt;/p&gt;

&lt;p&gt;東京と違って空気も綺麗で、体に降り注ぐレイ（太陽光）も力強く感じました⚡&lt;/p&gt;

&lt;h2 id=&#34;ホテルへ移動&#34;&gt;ホテルへ移動&lt;/h2&gt;

&lt;p&gt;空港から出ると、ホテルの送迎バスが到着していて、ここでやっと他の合宿参加者と合流できました👪&lt;/p&gt;

&lt;p&gt;バスを手配してくださった主催者のqさんに感謝です。&lt;/p&gt;

&lt;h2 id=&#34;温泉&#34;&gt;温泉&lt;/h2&gt;

&lt;p&gt;ホテルに荷物を預けて、神津島温泉保養センターという温泉に行きました♨&lt;/p&gt;

&lt;p&gt;移動はレンタル自転車を利用しました🚴🚴🚴&lt;/p&gt;

&lt;p&gt;移動の途中で&lt;a href=&#34;https://twitter.com/xyz600600&#34;&gt;xyz600600&lt;/a&gt;さんにお会いできたので、Rust談義をしました。
xyz600600さんもRustでレンダラーを開発されていて、私の去年のレンダラーのソースコードを参考にしていただけたそうです。
主にRustの苦労話で盛り上がりました。&lt;/p&gt;

&lt;p&gt;水着を着用すると入れる露天風呂があって、すぐ隣が海になっていて開放感あふれる感じでした。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;I&amp;#39;m at 神津島温泉保養センター in Kōzushima Mura, 東京都 &lt;a href=&#34;https://t.co/oWQXbqQJRQ&#34;&gt;https://t.co/oWQXbqQJRQ&lt;/a&gt; &lt;a href=&#34;https://t.co/5lRUI0AmAV&#34;&gt;pic.twitter.com/5lRUI0AmAV&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1035755871148625921?ref_src=twsrc%5Etfw&#34;&gt;2018年9月1日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&#34;神津島アクアスロン大会&#34;&gt;神津島アクアスロン大会&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://vill.kouzushima.tokyo.jp/today/2018/09/post-501.html&#34;&gt;第７回　神津島アクアスロン大会&lt;/a&gt;がやってました🏊🏃🏄🏅&lt;/p&gt;

&lt;p&gt;ちなみにアクアスロンで道が一時的に封鎖されるため、タイミングによっては温泉から帰ってこれなくなるところでした😨&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;アクアスロンしてる！ &lt;a href=&#34;https://twitter.com/hashtag/%E3%83%AC%E3%82%A4%E3%83%88%E3%83%AC%E5%90%88%E5%AE%BF?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#レイトレ合宿&lt;/a&gt; (@ 浜の家 in 神津島村, 東京都) &lt;a href=&#34;https://t.co/2byOXZAfmR&#34;&gt;https://t.co/2byOXZAfmR&lt;/a&gt; &lt;a href=&#34;https://t.co/E8egjFLy7L&#34;&gt;pic.twitter.com/E8egjFLy7L&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1035756231590375424?ref_src=twsrc%5Etfw&#34;&gt;2018年9月1日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&#34;レイトレ合宿&#34;&gt;レイトレ合宿&lt;/h2&gt;

&lt;p&gt;温泉から会議室に徒歩で移動して、いよいよレイトレ合宿のメインイベントが始まりました。&lt;/p&gt;

&lt;h3 id=&#34;シークレットイベント1-レイトレ検定&#34;&gt;シークレットイベント1: レイトレ検定&lt;/h3&gt;

&lt;p&gt;会議室に入るといきなり「レイトレ検定」と書かれた問題用紙が参加者に配られ、抜き打ちのレイトレ検定試験が始まりました。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;レイトレ検定 &lt;a href=&#34;https://twitter.com/hashtag/%E3%83%AC%E3%82%A4%E3%83%88%E3%83%AC%E5%90%88%E5%AE%BF?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#レイトレ合宿&lt;/a&gt; &lt;a href=&#34;https://t.co/Jjgv2SYcsK&#34;&gt;pic.twitter.com/Jjgv2SYcsK&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1035771130114539521?ref_src=twsrc%5Etfw&#34;&gt;2018年9月1日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;レイトレ検定ムズイんですけど！ &lt;a href=&#34;https://t.co/UwFNkLOgYf&#34;&gt;pic.twitter.com/UwFNkLOgYf&lt;/a&gt;&lt;/p&gt;&amp;mdash; ハガ (@hagat) &lt;a href=&#34;https://twitter.com/hagat/status/1035771876662890496?ref_src=twsrc%5Etfw&#34;&gt;2018年9月1日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;レイトレに関する偉人の顔写真を選ぶ問題、サンプリング結果から対応する手法を答える問題、
レンダリング結果から対応するレンダリング手法を選ぶ問題、
コーネルボックスを手描きする問題など癖のある問題が多く、非常に楽しませていただきました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://drive.google.com/file/d/1KRrojV5XF8htxInNeLTKmZBltyy4GKKR/view?usp=sharing&#34;&gt;問題&lt;/a&gt;と&lt;a href=&#34;https://drive.google.com/file/d/1RTHSCY3sL6238W7-CiPvQYZaGbIClXFx/view&#34;&gt;解答&lt;/a&gt;は&lt;a href=&#34;https://sites.google.com/site/raytracingcamp6/&#34;&gt;レイトレ合宿6の公式サイト&lt;/a&gt;から閲覧可能なので、ぜひ見てください！&lt;/p&gt;

&lt;p&gt;なお、自分は100点中73点、19人中11位、偏差値は49.5と参加者の中では平均的な結果でした😐
第二回目のレイトレ検定があればもっと良い成績を取れるように頑張りたいです💪&lt;/p&gt;

&lt;h3 id=&#34;シークレットイベント2-三葉レイちゃんの応援動画&#34;&gt;シークレットイベント2: 三葉レイちゃんの応援動画&lt;/h3&gt;

&lt;p&gt;CG技術系Vtuberの&lt;a href=&#34;https://twitter.com/mitsuba_rei&#34;&gt;三葉レイちゃん&lt;/a&gt;から応援の動画をいただきました☘😍
レイトレのやる気が湧いてきました。ありがとうございます！
なお、動画は参加者のみの限定公開だそうです！つまり参加者限定特典です🤤&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/hashtag/%E3%83%AC%E3%82%A4%E3%83%88%E3%83%AC%E5%90%88%E5%AE%BF?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#レイトレ合宿&lt;/a&gt; に三つ葉レイちゃん（&lt;a href=&#34;https://twitter.com/mitsuba_rei?ref_src=twsrc%5Etfw&#34;&gt;@mitsuba_rei&lt;/a&gt; ）が特別参加！ &lt;br&gt;※コラ画像ではないです &lt;a href=&#34;https://t.co/6AddQoErWP&#34;&gt;pic.twitter.com/6AddQoErWP&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1036171064915554304?ref_src=twsrc%5Etfw&#34;&gt;2018年9月2日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h3 id=&#34;セミナー&#34;&gt;セミナー&lt;/h3&gt;

&lt;p&gt;今年は2名がセミナーで発表してくださいました。&lt;/p&gt;

&lt;h4 id=&#34;実装してきたこと-これからやってみたいこと-by-zin&#34;&gt;実装してきたこと、これからやってみたいこと by Zin&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/ZinTwitt&#34;&gt;Zin&lt;/a&gt;さんはAMDで&lt;a href=&#34;https://www.amd.com/ja/technologies/radeon-prorender&#34;&gt;Radeon ProRender&lt;/a&gt;を開発されている方で、プロダクションレンダラーにおけるテストの手法等の貴重なお話を聞くことができました。&lt;/p&gt;

&lt;p&gt;DCCツールのインテグレーションやレンダラーのテストなどのやりたいとは思っているものの踏み出せていない領域の話だったので、興味深く聞かせていただきました。&lt;/p&gt;

&lt;p&gt;発表の途中でちょくちょくRadeon ProRenderの宣伝が入っているのが面白かったです。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;ad4601a67e0e4d65b9fd48a6e7cb95c6&#34; data-ratio=&#34;1.77777777777778&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;h4 id=&#34;volume-rendering-方程式から大気散乱モデルを導く-by-ishiyama&#34;&gt;Volume Rendering 方程式から大気散乱モデルを導く by ishiyama&lt;/h4&gt;

&lt;p&gt;ishiyamaさんは今回が合宿へ初参加ということながらセミナーをしてくださいました！&lt;/p&gt;

&lt;p&gt;Volume Rendering 方程式をちゃんと調べたことがなかったので勉強になりました。&lt;/p&gt;

&lt;p&gt;現地では発光輝度に吸収係数がかかるのは何故かという話題で盛り上がっていました。
そもそも発光するボリュームってなんだろう？と思いましたが、炎などが該当するんでしょうかね。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/k-ishiyama/rt6_advent_calendar5/blob/master/doc/rt6_slide.pdf&#34;&gt;Volume Rendering 方程式から大気散乱モデルを導く&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;レンダラープレゼン大会&#34;&gt;レンダラープレゼン大会&lt;/h3&gt;

&lt;p&gt;いよいよレイトレ合宿のメインイベントである自作のレンダラーのプレゼン大会が始まりました。&lt;/p&gt;

&lt;p&gt;ちなみに最終提出のレンダリング結果はここで初めて見ることになります。かなり心臓に悪いシステムですね。
私は想定通りのレンダリング結果が出力されていて、ほっとしました😌&lt;/p&gt;

&lt;p&gt;発表順も当日まで分からないのですが、今年はまさかのトップバッターだったので少々焦りました。
3倍速の高速化（Rustのバージョンを上げただけ）はウケたようなので良かったです。
Bunnyのワイヤーフレーム化もHoudiniの標準ノードで簡単に実現できるのですが、興味をもってくださった人がいて良かったです。&lt;/p&gt;

&lt;p&gt;レイトレ合宿では参加者同士の投票によって順位を決定し、最終日に結果発表と表彰式が行われます。&lt;/p&gt;

&lt;p&gt;今年は過去最大の19人がレンダラーを提出されていました。&lt;/p&gt;

&lt;h4 id=&#34;上位陣の発表&#34;&gt;上位陣の発表&lt;/h4&gt;

&lt;p&gt;上位陣は今年もレベルが非常に高かったですね。&lt;/p&gt;

&lt;p&gt;1位のShockerさんはOptixを利用したGPU実装のレンダラーで参加されていました（&lt;a href=&#34;https://speakerdeck.com/shocker_0x15/renderer-introduction-ray-tracing-camp-6&#34;&gt;発表資料&lt;/a&gt;）。
去年までGPU搭載のインスタンスは利用できなかったのですが、今年からGPUインスタンスが解禁されたのが背景にあります。
GPU実装だからといって機能は妥協したくないということで、シーングラフ、任意形状の光源、多様かつ複雑なマテリアル（UE4 BRDF等）、
MISなどFull-Featured Path Tracerに相応しい機能を詰め込まれていました！&lt;/p&gt;

&lt;p&gt;2位のshinjiさんは個人で&lt;a href=&#34;https://github.com/shinjiogaki/redqueen&#34;&gt;Redqueen&lt;/a&gt;レンダラーを開発しており、
仕事では&lt;a href=&#34;https://www.solidangle.com/&#34;&gt;Solid AngleでArnold Renderer&lt;/a&gt;を開発している凄い方です。
プロシージャルに生成した熱帯雨林のシーンが見事でした。
雨の表現は実際に雨粒がGeometryとして存在していて、遠くが白く霞むフォグの表現も大量の水滴によって自然に生じているそうです。
圧倒的なポリゴンの物量なのにどうやってこの速度を実現できているのか不思議でした。
他の参加者が発表の中でArnoldの速度に勝てないよという声が漏れる中、
shinjiさんは発表の中でArnoldに勝てるケースを示しながら圧倒的な &lt;em&gt;強さ&lt;/em&gt; を見せつけられました。&lt;/p&gt;

&lt;p&gt;3位のUshioさんも私と同じくHoudiniでアセットを作成されていました。
私はHoudiniで作ったジオメトリをobjでメッシュを書き出しただけなので、シーン上の配置はハードコーディングしていたのですが、
UshioさんはAlembicでHoudiniとレンダラーのデータの橋渡しを行い、Houdini上でシーン作成の完結を実現されていました👏
さらに衝突判定にIntelの&lt;a href=&#34;https://embree.github.io/&#34;&gt;Embree&lt;/a&gt;を利用されていました。
Embreeのパフォーマンスは相当高いという意見が参加者内でも一致していたので、使ってみたい気持ちが強くなってきました。
Velvetのマテリアルをつかった美しい布の見た目も印象的でした。&lt;/p&gt;

&lt;p&gt;4位のholeさんはボリュームレダリングとプロシージャルなシーン生成をされていました。
プロシージャルに生成された床の模様がカッコよかったです。
高速化についてはボリュームレンダリングに頻出の &lt;code&gt;pow, exp, log&lt;/code&gt; を &lt;a href=&#34;https://github.com/herumi/fmath&#34;&gt;fmath&lt;/a&gt;で置き換えることが効果的だったそうです。&lt;/p&gt;

&lt;p&gt;5位のPerimさんPerimさんはCGの分野で大活躍されている研究者で&lt;a href=&#34;http://lightmetrica.org/h-otsu/project/inverse/&#34;&gt;ファーストオーサーの論文&lt;/a&gt;がSIGGRAPH 2017にアクセプトもされています。
あいにくPerimさんは海外出張中だったため、本人に替わってqさんがプレゼンを行いました。
&lt;a href=&#34;https://github.com/hi2p-perim/minpt&#34;&gt;minpt&lt;/a&gt;というわずか300行のC++で実用的なレンダラーを開発されており、
そのminptに機能を追加して今回の作品をつくったそうです。&lt;/p&gt;

&lt;h4 id=&#34;dccツールとの連携&#34;&gt;DCCツールとの連携&lt;/h4&gt;

&lt;p&gt;今年はDCCの連携を行った方が多い印象でした。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Houdini は Ushio さん&lt;/li&gt;
&lt;li&gt;Maya は yopio さん

&lt;ul&gt;
&lt;li&gt;Mayaのプラグインを開発して、Mayaからの直接レンダリングを実現したそうです&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/yopio/reitorehe-su-6o&#34;&gt;発表資料&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Blender は Zin さん&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;心をこめて手作業でシーン情報をハードコーディングするのは単純に大変ですし、
シーンの完成度を向上することも難しいので、DCCツール連携の重要性は高まっていると感じます。&lt;/p&gt;

&lt;p&gt;もちろんshinjiさんやholeさんのように一貫してプロシージャルなシーン生成に倒すアプローチも良いと思いますが、
意図的にシーンをレイアウトしたいのであれば、DCCツール連携が賢い解決策だと個人的には感じました。&lt;/p&gt;

&lt;h4 id=&#34;初回参加者の方々が強い&#34;&gt;初回参加者の方々が強い&lt;/h4&gt;

&lt;p&gt;また、初回参加者の方々が強いのも印象的でした。&lt;/p&gt;

&lt;p&gt;mizutoriさんはCG分野を研究されている学生で、BSSRDF（表面下化散乱）やNEEやMIS（ただしバグのため未使用）など、比較的難しいことに挑戦されていました。&lt;/p&gt;

&lt;p&gt;yamaguchiさんも同じ研究室の学生で、諸事情により最終的にはパストレーシングで提出したものの、
フォトンマッピング系の手法（具体的な手法の名前はメモし忘れました）も試していたようで、凄いと思いました。&lt;/p&gt;

&lt;p&gt;shutoさんは元々C++の経験が無かったそうなのですが、
一ヶ月という短い期間でC++の習得からBVHなど高速化を含んだパストレまでされていて、習得速度が早くて凄いと思いました。&lt;/p&gt;

&lt;p&gt;xyz600600さんはRustを習得しつつ、かなり色々やられていて本当にすごいと思いました。
NEEやMISはもちろんのこと、 同じジオメトリを位置やマテリアルを変えて大量に出すオブジェクトのClone（所謂インスタンシング）までされていました。&lt;/p&gt;

&lt;p&gt;ishiyamaさんはボリュームレンダリングのGPU実装に挑戦し、さらにセミナーで発表までされていました。&lt;/p&gt;

&lt;h4 id=&#34;独自テーマで挑戦していて凄い&#34;&gt;独自テーマで挑戦していて凄い&lt;/h4&gt;

&lt;p&gt;常連メンバーも相変わらず強くて、それぞれ独自のテーマで挑戦されていて面白かったです。&lt;/p&gt;

&lt;p&gt;qさんはレイトレ合宿の主催者のひとりで、光源が大量にあるシーンに挑戦されていました。&lt;/p&gt;

&lt;p&gt;pheemaさんは環境マップの重点サンプリングに挑戦されていました。
個人的にも実装したいテーマだったので参考文献の&lt;a href=&#34;http://web.cs.wpi.edu/~emmanuel/courses/cs563/S07/projects/envsample.pdf&#34;&gt;Monte Carlo Rendering with Natural Illumination&lt;/a&gt;の紹介が助かりました。&lt;/p&gt;

&lt;p&gt;tabochanさんは磨りガラスの中に光源があるというレンダラー殺しの難易度の高いシーンに挑戦されていました。&lt;/p&gt;

&lt;p&gt;tatsyさんは普通のパストレーシングでは面白くないということで、
今年もパストレーシング以外の最新のレンダリング手法（具体的な名前をメモし忘れました）に挑戦されていました。&lt;/p&gt;

&lt;p&gt;pocolさんは動画部門に挑戦されていました。
動画部門は去年から新しくできた部門なのですが、1フレームあたりにかけられる時間が15秒弱になってしまいます。
そんなハードモードの動画部門に果敢に挑戦されていました。&lt;/p&gt;

&lt;p&gt;pentanさんはglTF（Khronosが提唱する新しい3Dデータフォーマット）に対応されていました。
また、Swiftというあまりレイトレ業界では一般的ではない言語を選択されていたので、自力で解決しないといけない問題でおそらく苦労されたのではないかと予想します。
私も去年からRustで参加しましたが、レイトレ向けのパフォーマンスの高いライブラリを自力で見つける必要があったり、
並列化やレイトレに使うようなデータ構造の定義であまり参考にできる情報が無くて、地味に時間が取られて苦しみました。&lt;/p&gt;

&lt;h2 id=&#34;夕食&#34;&gt;夕食&lt;/h2&gt;

&lt;p&gt;レンダラープレゼン大会の後はホテルに戻って夕食を食べました。&lt;/p&gt;

&lt;p&gt;ホテルの料理は最高に美味しくてボリュームも満点で大変満足でした。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;ご飯 &lt;a href=&#34;https://twitter.com/hashtag/%E3%83%AC%E3%82%A4%E3%83%88%E3%83%AC%E5%90%88%E5%AE%BF?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#レイトレ合宿&lt;/a&gt; &lt;a href=&#34;https://t.co/CCVReBZvAw&#34;&gt;pic.twitter.com/CCVReBZvAw&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1035822780489449472?ref_src=twsrc%5Etfw&#34;&gt;2018年9月1日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&#34;花火大会&#34;&gt;花火大会&lt;/h2&gt;

&lt;p&gt;夕食を食べたあとはホテル近くの海岸で花火をしました。&lt;/p&gt;

&lt;p&gt;Ushioさんが買ってきてくれた花火と運営の方々が買ってきてくれた花火を合わせて、遊びきれないくらい大量の花火で遊びました🎆🎇&lt;/p&gt;

&lt;p&gt;手持ちの花火から打ち上げ式の花火まで様々な種類の花火で遊びました🔥💣💥📛&lt;/p&gt;

&lt;p&gt;海岸の風が強くロウソクの炎が消えてしまうというトラブルにも見舞われましたが、
流体や物理に強い参加者のおかげでなんとかなりました！&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;平成最後の夏 &lt;a href=&#34;https://twitter.com/hashtag/%E3%83%AC%E3%82%A4%E3%83%88%E3%83%AC%E5%90%88%E5%AE%BF?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#レイトレ合宿&lt;/a&gt; &lt;a href=&#34;https://t.co/jSeeuqNlgt&#34;&gt;pic.twitter.com/jSeeuqNlgt&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1036014799384064002?ref_src=twsrc%5Etfw&#34;&gt;2018年9月1日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;残念ながらまともな写真が残っていませんが、平成最後の夏の花火を大いに楽しみました。&lt;/p&gt;

&lt;p&gt;離島ということもあり、人口的な明かりがほぼ無いので、夜は真っ暗でした。
もし晴れていれば星が綺麗に見えたのでしょうが、あいにく空が曇っていたのが残念です。&lt;/p&gt;

&lt;h2 id=&#34;朝食&#34;&gt;朝食&lt;/h2&gt;

&lt;p&gt;早起きして朝の温泉に浸かった後に朝食を食べました。&lt;/p&gt;

&lt;p&gt;自分の普段の食生活は崩壊しているので、久々の健康的な朝食に感動しました。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;朝食 &lt;a href=&#34;https://twitter.com/hashtag/%E3%83%AC%E3%82%A4%E3%83%88%E3%83%AC%E5%90%88%E5%AE%BF?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#レイトレ合宿&lt;/a&gt; &lt;a href=&#34;https://t.co/dMFiJzGywr&#34;&gt;pic.twitter.com/dMFiJzGywr&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1036019373524185089?ref_src=twsrc%5Etfw&#34;&gt;2018年9月1日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&#34;授賞式&#34;&gt;授賞式&lt;/h2&gt;

&lt;p&gt;合宿の最終日の朝にはレイトレ合宿の授賞式が行われました。&lt;/p&gt;

&lt;p&gt;まずは光線追跡技術大賞2018 (日本レイトレーシング協会)の発表が行われました。
今年から新しく設けられた賞でMicrosoft DirectX Raytracingが見事入賞に輝きました！
レイトレ合宿にMicrosoftの関係者がいなかったので、なぜかAMDのZinさんが賞を受け取ることになりました。&lt;/p&gt;

&lt;p&gt;次にレイトレ検定の結果発表が行われました。
成績が優秀な順に答案用紙が返却されるので、成績が下位な人たちには残酷なシステムでした…&lt;/p&gt;

&lt;p&gt;そして最後はレイトレ合宿の成績発表が行われました。
単なる順位発表ではなく、なんと順位に応じて賞品も授与されます。
私の今年の賞品はレンズ豆でした。後で美味しくいただきます。
ちなみにWikipediaによると、光学用途で使われる「レンズ」の語源は、このレンズマメであり、
当初作成された凸レンズがレンズマメの形状に似ていたことからこの名前が付いたそうです。&lt;/p&gt;

&lt;p&gt;なお見事上位に入賞すればレンズキット等の豪華賞品をゲットできます！&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;レイトレ合宿6で提出した作品と拡大したものです。&lt;br&gt;レンズキットをいただきました。&lt;br&gt;運営の皆さまありがとうございました。&lt;a href=&#34;https://twitter.com/hashtag/%E3%83%AC%E3%82%A4%E3%83%88%E3%83%AC%E5%90%88%E5%AE%BF?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#レイトレ合宿&lt;/a&gt; &lt;a href=&#34;https://t.co/MNzT2lzl7r&#34;&gt;pic.twitter.com/MNzT2lzl7r&lt;/a&gt;&lt;/p&gt;&amp;mdash; shinji ogaki (@redqueenrender) &lt;a href=&#34;https://twitter.com/redqueenrender/status/1036182395181879296?ref_src=twsrc%5Etfw&#34;&gt;2018年9月2日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;また最下位になると幼児👶向けのプログラミングの絵本が貰えます！
まったくネタに事欠かない合宿ですね。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;コーデングは赤ちゃんレベルだけど謎の認定を授かった &lt;a href=&#34;https://t.co/8mKLLk3Oyx&#34;&gt;pic.twitter.com/8mKLLk3Oyx&lt;/a&gt;&lt;/p&gt;&amp;mdash; Pentan (@c5h12) &lt;a href=&#34;https://twitter.com/c5h12/status/1036034085074788353?ref_src=twsrc%5Etfw&#34;&gt;2018年9月1日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h3 id=&#34;レイ-トレーサー&#34;&gt;レイ・トレーサー&lt;/h3&gt;

&lt;p&gt;6位の賞品はPlayStation1本体とPlayStation1ソフトの&lt;a href=&#34;https://amzn.to/2Q0tb4y&#34;&gt;レイ・トレーサー&lt;/a&gt;のセットでした。&lt;/p&gt;

&lt;p&gt;主催のqさんに授与されたのですが、自分は要らないということで、xyz600さんに譲渡されることになりました。&lt;/p&gt;

&lt;p&gt;xyz600さんとホテルの部屋が一緒だったので、少しだけ遊ばせてもらいました🎮&lt;/p&gt;

&lt;p&gt;レーシングゲームかと思いきや、まさかの敵の車に体当たりして破壊するゲームでした☠💥🚗&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;亜空間にワープしてしまった😱 &lt;a href=&#34;https://twitter.com/hashtag/%E3%83%AC%E3%82%A4%E3%83%88%E3%83%AC%E5%90%88%E5%AE%BF?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#レイトレ合宿&lt;/a&gt; &lt;a href=&#34;https://t.co/MIkMjR2eV9&#34;&gt;pic.twitter.com/MIkMjR2eV9&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1036035766755852288?ref_src=twsrc%5Etfw&#34;&gt;2018年9月1日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;遊んでいる途中に描画がバグってホラーのようになってしまいました。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;レイトレーシング完全に理解した &lt;a href=&#34;https://twitter.com/hashtag/%E3%83%AC%E3%82%A4%E3%83%88%E3%83%AC%E5%90%88%E5%AE%BF6?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#レイトレ合宿6&lt;/a&gt; &lt;a href=&#34;https://t.co/1vUnG1UxEn&#34;&gt;pic.twitter.com/1vUnG1UxEn&lt;/a&gt;&lt;/p&gt;&amp;mdash; Yuichi Sayama (@xyz600600) &lt;a href=&#34;https://twitter.com/xyz600600/status/1036916836858642432?ref_src=twsrc%5Etfw&#34;&gt;2018年9月4日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;xyz600さんは最終的には全クリされたようで凄いです！ちなみに私は1面のボスすら倒せませんでした…&lt;/p&gt;

&lt;h2 id=&#34;東京までの移動&#34;&gt;東京までの移動&lt;/h2&gt;

&lt;p&gt;飛行機の予約競争に敗北したので、帰りは大型船で移動しました⛴&lt;/p&gt;

&lt;p&gt;飛行機なら1時間ほどで移動できますが、大型船は9時間くらいかかります。
暇すぎたのでプログラミングなどの作業に挑戦しましたが、船の揺れがつよくて吐き気に耐えながらの作業になりました。
インターネットも使えないので事前に&lt;a href=&#34;http://graphics.stanford.edu/papers/veach_thesis/&#34;&gt;Veachの論文&lt;/a&gt;やShockerさんの記事やスライドをローカルにダウンロードしておきました。&lt;/p&gt;

&lt;p&gt;途中で運良くyopioさんと合流できたので、一緒に船の中を散策したり、食堂でご飯を食べたりして過ごしました。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;大型船で帰ります &lt;a href=&#34;https://twitter.com/hashtag/%E3%83%AC%E3%82%A4%E3%83%88%E3%83%AC%E5%90%88%E5%AE%BF?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#レイトレ合宿&lt;/a&gt; &lt;a href=&#34;https://t.co/OB5uvZLfEs&#34;&gt;pic.twitter.com/OB5uvZLfEs&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1036048102950494208?ref_src=twsrc%5Etfw&#34;&gt;2018年9月2日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h1 id=&#34;まとめ&#34;&gt;まとめ&lt;/h1&gt;

&lt;p&gt;私は今年で3回目の参加になりますが、改めてレイトレ合宿は素晴らしいイベントだと思いました。&lt;/p&gt;

&lt;p&gt;毎年すこしずつルールが進化しているので、毎年新しい技術や知見を得ることができます。
今年の例を挙げると、GPUレンダラーや論理64コアを以上のWindows環境を扱う際の知見を得ることができました。
その他にも自作でレンダラーを開発する過程や試行錯誤のうちに得られた知見が数多くありました。&lt;/p&gt;

&lt;p&gt;また、レイトレについて日本語で調べると、ほぼ確実にレイトレ合宿の関係者の文献に辿り着きます。
理解できなかった点や疑問点を直接著者に聞けるというのは凄い特権だと感じました。
さらにグラフィック分野の凄い方々の成果やお話をたくさん聞けてモチベーションも上がりました。
しかも今年はレイトレ検定や三葉レイちゃんの応援動画など楽しい企画が盛りだくさんでした。
来年もぜひ参加したいです！&lt;/p&gt;

&lt;p&gt;レイトレ合宿を運営・企画してくださったqさんとholeさん、レイトレ合宿の参加者のみなさん、本当にありがとうございました！&lt;/p&gt;

&lt;h1 id=&#34;おまけ-制作の過程-当日の様子&#34;&gt;おまけ：制作の過程＋当日の様子&lt;/h1&gt;

&lt;p&gt;レイトレ合宿6に関連する自分のツイートをモーメントにまとめました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/i/moments/1039136971442941953&#34;&gt;レイトレ合宿6 | twitter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--
&lt;a class=&#34;twitter-moment&#34; href=&#34;https://twitter.com/i/moments/1039136971442941953?ref_src=twsrc%5Etfw&#34;&gt;レイトレ合宿6&lt;/a&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
--&gt;</description>
    </item>
    
    <item>
      <title>レイトレ合宿6 参加報告 前編（準備編）</title>
      <link>https://gam0022.net/blog/2018/09/18/rtcamp6-part1/</link>
      <pubDate>Tue, 18 Sep 2018 10:08:08 +0900</pubDate>
      
      <guid>https://gam0022.net/blog/2018/09/18/rtcamp6-part1/</guid>
      <description>&lt;p&gt;これはレイトレ合宿6の参加報告の記事の前編です。
記事が長くなったので、前編と後編の2つに分けました。&lt;/p&gt;

&lt;p&gt;この記事では前編（準備編）ということで、自作レンダラーに実装した機能や手法の紹介を行います。&lt;/p&gt;

&lt;p&gt;後編（当日編）はこちらです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gam0022.net/blog/2018/09/25/rtcamp6-part2/&#34;&gt;レイトレ合宿6 参加報告 Part2（当日編） | gam0022.net&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;9月1日(土)～9月2日(日)に神津島で開催された&lt;a href=&#34;https://sites.google.com/site/raytracingcamp6/&#34;&gt;レイトレ合宿6&lt;/a&gt;に参加しました。&lt;/p&gt;

&lt;p&gt;レイトレ合宿は完全自作のレイトレーサーを走らせて画像の美しさを競うイベントです。&lt;/p&gt;

&lt;p&gt;参加者の中には、Arnold RendererやRadeon ProRenderといった商用のレンダラーの開発者、
SIGGRAPH 2017で発表された研究者など、グラフィック分野の最先端で活躍されている方々もいらっしゃり、大変刺激を受けました。&lt;/p&gt;

&lt;p&gt;私は今年で3回目の参加になります。過去の参加報告はこちらです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gam0022.net/blog/2017/10/02/rtcamp5/&#34;&gt;レイトレ合宿5‽に参加して、Rustでパストレーシングを実装しました！ | gam0022.net&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://gam0022.hatenablog.com/entry/raytracingcamp4&#34;&gt;レイトレ合宿4!? に参加しました！ - gam0022のブログ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Rustで開発したパストレーシングによる自作の物理ベースレンダラー（Hanamaru Renderer）をバージョンアップして、
こんな感じの画像を123秒でレンダリングしました。&lt;/p&gt;

&lt;p&gt;今回は19人中10位だったので、ギリギリ入賞圏内に潜り込めました！&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2018-09-07-rtcamp6/result.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2018-09-07-rtcamp6/result.jpg&#34; alt=&#34;result&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;↑リンクをクリックするとオリジナルの可逆圧縮の画像になります。&lt;/p&gt;

&lt;p&gt;ソースコードはGitHubに公開しています（スターください）。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/gam0022/hanamaru-renderer/&#34;&gt;https://github.com/gam0022/hanamaru-renderer/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;こちらは合宿当日のプレゼン資料です。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;3ea604f4f30248709e316a1cb487f1cd&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;h1 id=&#34;去年やったこと&#34;&gt;去年やったこと&lt;/h1&gt;

&lt;p&gt;レンダラーとしての基本機能は&lt;a href=&#34;https://gam0022.net/blog/2017/10/02/rtcamp5/&#34;&gt;去年のレイトレ合宿5&lt;/a&gt;の時点で完成していました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;パストレーシング（BSDFによる重点的サンプリングあり）&lt;/li&gt;
&lt;li&gt;オブジェクトとして Sphere, Polygon Mesh, AABB に対応

&lt;ul&gt;
&lt;li&gt;BVHによる衝突判定の高速化&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;マテリアル

&lt;ul&gt;
&lt;li&gt;完全拡散反射&lt;/li&gt;
&lt;li&gt;完全鏡面反射&lt;/li&gt;
&lt;li&gt;金属面（GGXの法線分布モデル）&lt;/li&gt;
&lt;li&gt;ガラス面（GGXの法線分布モデル）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Image Based Lighting（IBL）&lt;/li&gt;
&lt;li&gt;テクスチャによる albedo / roughness / emission の指定&lt;/li&gt;
&lt;li&gt;薄レンズモデルによる被写界深度（レンズのピンぼけ）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今年は足りない機能・個人的に実装したかった機能を付け足す形で実装を行いました。&lt;/p&gt;

&lt;h1 id=&#34;今年やったこと&#34;&gt;今年やったこと&lt;/h1&gt;

&lt;p&gt;最終的に以下のような機能の実装や作業を行いました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Rust環境の最新化&lt;/li&gt;
&lt;li&gt;Next Event Estimation（NEE）の実装&lt;/li&gt;
&lt;li&gt;処理のリファクタリング&lt;/li&gt;
&lt;li&gt;トーンマッピングの実装&lt;/li&gt;
&lt;li&gt;デノイズの実装&lt;/li&gt;
&lt;li&gt;Houdiniによるシーン作成&lt;/li&gt;
&lt;li&gt;各種トラブルシューティング&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;それぞれについて、簡単に手法の紹介を交えつつ説明していきます。&lt;/p&gt;

&lt;h2 id=&#34;rust環境の最新化&#34;&gt;Rust環境の最新化&lt;/h2&gt;

&lt;p&gt;Rustは新しい言語だけあって、取り巻く環境の進化も非常に速い印象です。&lt;/p&gt;

&lt;p&gt;一年前は最新の環境でしたが、すっかり古くなってしまったので、Rust環境の最新化を行いました。&lt;/p&gt;

&lt;h3 id=&#34;rustコンパイラのバージョンアップ&#34;&gt;Rustコンパイラのバージョンアップ&lt;/h3&gt;

&lt;p&gt;初手としてRustのコンパイラを最新化したのは大正解でした。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;Rustのバージョンを上げただけで、自作レンダラーの速度が3.3倍速になってすごい 😆&lt;br&gt;&lt;br&gt;cargo 0.20.0 (a60d185c8 2017-07-13): sampled: 9x4 spp.&lt;br&gt;cargo 1.28.0 (96a2c7d16 2018-07-13): sampled: 30x4 spp.&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1030974212192710656?ref_src=twsrc%5Etfw&#34;&gt;2018年8月19日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Rustのコンパイラを最新化したところ、コードをまったく書き換えずに3倍速になりました！
メジャーバージョンを上げると劇的にパフォーマンスが変わることがあるのですね！
SIMDの最適化などが賢くなったのかなぁという気はしていますが、どういった理由で高速化できたのか詳しい調査はできていません。&lt;/p&gt;

&lt;p&gt;Rustを最新の安定バージョンに上げる手順は非常に簡単でしたので、備忘録をかねて紹介します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 最新の安定バージョンに上げる
$ rustup update

# バージョンの確認
$ rustc -V
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;依存ライブラリのバージョンアップ&#34;&gt;依存ライブラリのバージョンアップ&lt;/h3&gt;

&lt;p&gt;Rustの高速化に味を占めて依存ライブラリも最新化したのですが、特に速度は変化ありませんでした。&lt;/p&gt;

&lt;p&gt;ライブラリをバージョンアップする手順も簡単にメモしておきます。
ここでは Rayon という並列化のライブラリのバージョンを上げる例を紹介します。&lt;/p&gt;

&lt;p&gt;まず &lt;code&gt;Cargo.toml&lt;/code&gt; を編集します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;-rayon = &amp;quot;0.8.2&amp;quot;
+rayon = &amp;quot;1.0&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;そして次のコマンドを叩くと、 &lt;code&gt;Cargo.toml&lt;/code&gt; で指定された中で最新のバージョンに依存ライブラリがアップデートされます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cargo update
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;cargo-outdated&#34;&gt;cargo-outdated&lt;/h4&gt;

&lt;p&gt;依存ライブラリの最新バージョンを調べるときに &lt;code&gt;cargo-outdated&lt;/code&gt; というツールが役に立ちました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kbknapp/cargo-outdated&#34;&gt;https://github.com/kbknapp/cargo-outdated&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;次のコマンドからインストールできます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cargo install cargo-outdated
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;cargo outdated&lt;/code&gt; を実行すると、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Project: 現在のバージョン&lt;/li&gt;
&lt;li&gt;Compat: 現在の &lt;code&gt;Cargo.toml&lt;/code&gt; のままで &lt;code&gt;cargo update&lt;/code&gt; からインストール可能なバージョン&lt;/li&gt;
&lt;li&gt;Latest: 最新バージョン&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;が一発で分かります。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cargo outdated
Name                                  Project  Compat  Latest   Kind    Platform
----                                  -------  ------  ------   ----    --------
fuchsia-zircon-&amp;gt;bitflags              1.0.4    ---     Removed  Normal  ---
fuchsia-zircon-&amp;gt;fuchsia-zircon-sys    0.3.3    ---     Removed  Normal  ---
rand                                  0.3.22   ---     0.5.5    Normal  ---
rand-&amp;gt;fuchsia-zircon                  0.3.3    ---     Removed  Normal  cfg(target_os = &amp;quot;fuchsia&amp;quot;)
rand-&amp;gt;libc                            0.2.43   ---     Removed  Normal  cfg(unix)
rand-&amp;gt;rand                            0.4.3    ---     Removed  Normal  ---
rand-&amp;gt;winapi                          0.3.5    ---     Removed  Normal  cfg(windows)
winapi-&amp;gt;winapi-i686-pc-windows-gnu    0.4.0    ---     Removed  Normal  i686-pc-windows-gnu
winapi-&amp;gt;winapi-x86_64-pc-windows-gnu  0.4.0    ---     Removed  Normal  x86_64-pc-windows-gnu
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;intellij-idea&#34;&gt;IntelliJ IDEA&lt;/h3&gt;

&lt;p&gt;去年の参加報告にも書きましたが、IntelliJ IDEAに次のプラグインを入れるとRustの神IDEが完成します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://intellij-rust.github.io/&#34;&gt;IntelliJ Rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;IntelliJ IDEAのバージョンも &lt;code&gt;2017.2.3 -&amp;gt; 2018.2.1&lt;/code&gt; に上げました。&lt;/p&gt;

&lt;h2 id=&#34;next-event-estimation-nee-の実装&#34;&gt;Next Event Estimation（NEE）の実装&lt;/h2&gt;

&lt;p&gt;Next Event Estimation（NEE）と呼ばれるパストレーシングのサンプリングを効率化する手法を実装しました。&lt;/p&gt;

&lt;p&gt;光源が小さいシーンの場合、BSDFによる重点的サンプリングだけではなかなか光源にヒットしません。
レイトレ合宿のように制限時間が短い場合はノイズだらけの結果になってしまいます。&lt;/p&gt;

&lt;p&gt;そこで、光源の表面上の点を明示的にサンプリングして光転送経路を生成します。これがNEEです。&lt;/p&gt;

&lt;!--

&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;Next Event Estimation(NEE)を実装しました。&lt;br&gt;&lt;br&gt;1枚目: NEEなし（100x4 spp）&lt;br&gt;2枚目: NEEあり（100x4 spp）&lt;br&gt;3枚目: リファレンス（NEEなしで時間かけてレンダリング） &lt;a href=&#34;https://t.co/JB9O2agOYO&#34;&gt;pic.twitter.com/JB9O2agOYO&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1032466825731133440?ref_src=twsrc%5Etfw&#34;&gt;2018年8月23日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;NEEをGGXマテリアルに対応させた。&lt;br&gt;複数の光源がある場合はすべての光源に対してNEEするようにした。&lt;br&gt;bsdfは同じインターフェースで計算できるようにしたので、すっきり実装できた。&lt;br&gt;&lt;br&gt;1枚目: NEEなし（20x4 spp）&lt;br&gt;2枚目: NEEあり（20x4 spp）&lt;br&gt;3枚目: リファレンス（NEEな 20000x4spp） &lt;a href=&#34;https://t.co/TJK0OvmArh&#34;&gt;pic.twitter.com/TJK0OvmArh&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1033492848765587456?ref_src=twsrc%5Etfw&#34;&gt;2018年8月25日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

--&gt;

&lt;p&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2018-09-07-rtcamp6/nee.jpg&#34; alt=&#34;NEE&#34; /&gt;&lt;/p&gt;

&lt;p&gt;同じサンプリング数でNEE実装前とNEE実装後の結果を比較しました。ノイズを劇的に軽減できました！&lt;/p&gt;

&lt;p&gt;NEEの理論と実装についての詳細については、&lt;a href=&#34;https://twitter.com/Shocker_0x15&#34;&gt;Shockerさん&lt;/a&gt;、&lt;a href=&#34;https://twitter.com/ProjectAsura&#34;&gt;Pocolさん&lt;/a&gt;の資料を参考にさせていただきました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://rayspace.xyz/CG/contents/path_tracing/&#34;&gt;パストレーシング - Computer Graphics - memoRANDOM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/shocker_0x15/path-tracing&#34;&gt;パストレーシング / Path Tracing - Speaker Deck&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://project-asura.com/blog/archives/4046&#34;&gt;レイトレ再入門 &amp;#8211; ☆PROJECT　ASURA☆&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sphereの光源をNEEに対応させるために必要な「球面上に一様分布した点を選ぶ処理」は次の資料の「2.4 単位球面に一様分布する点」を参考にさせていただきました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://apollon.issp.u-tokyo.ac.jp/~watanabe/pdf/prob.pdf&#34;&gt;一様乱数を使う&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;極座標ではなく $(z, \phi)$ で球面を表現するとシンプルに計算できます。&lt;/p&gt;

&lt;p&gt;$$
0 \le z \le 1, \quad 0 \le \phi \le 2 \pi
$$&lt;/p&gt;

&lt;p&gt;$$
x = \sqrt{1 - z^2}cos \phi
$$&lt;/p&gt;

&lt;p&gt;$$
y = \sqrt{1 - z^2}sin \phi &lt;br /&gt;
$$&lt;/p&gt;

&lt;p&gt;$$
z = z
$$&lt;/p&gt;

&lt;h2 id=&#34;処理のリファクタリング&#34;&gt;処理のリファクタリング&lt;/h2&gt;

&lt;p&gt;マテリアル側の次のような関数を持たせるようにリファクタリングしました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sample()&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;サンプリング方向 + &lt;code&gt;bsdf * cos / pdf&lt;/code&gt; を返す関数&lt;/li&gt;
&lt;li&gt;重点的サンプリングを行うと &lt;code&gt;bsdf * cos&lt;/code&gt; を &lt;code&gt;pdf&lt;/code&gt; が打ち消すケースが多いので、このように定義&lt;/li&gt;
&lt;li&gt;具体例を挙げると、完全拡散面で &lt;code&gt;cos&lt;/code&gt; に応じた重点的サンプリングを行うと &lt;code&gt;bsdf * cos / pdf = 1.0&lt;/code&gt; となる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bsdf()&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;名前の通り &lt;code&gt;bsdf&lt;/code&gt; を返す関数&lt;/li&gt;
&lt;li&gt;NEEの計算の中で &lt;code&gt;bsdf&lt;/code&gt; が必要になるので定義&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nee_available()&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;NEEに対応しているかどうか返す関数&lt;/li&gt;
&lt;li&gt;実質的にはスペキュラー面でないなら &lt;code&gt;true&lt;/code&gt; を返す関数&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;インターフェースを統一できてコードが綺麗になった気がします。&lt;/p&gt;

&lt;h2 id=&#34;トーンマッピングの実装&#34;&gt;トーンマッピングの実装&lt;/h2&gt;

&lt;p&gt;去年の実装では HDR で計算した結果を LDR に変換するときに単純に &lt;code&gt;clamp(x, 0, 1)&lt;/code&gt; していました。&lt;/p&gt;

&lt;p&gt;このままでは 1.0 を超える明るい箇所の画素がすべて白色に潰れてしまいます。&lt;/p&gt;

&lt;p&gt;この問題を解決するためにトーンマッピングを実装しました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2018-09-07-rtcamp6/tonemap.jpg&#34; alt=&#34;Tonemap&#34; /&gt;&lt;/p&gt;

&lt;p&gt;今回はトーンマッピングの中でも最も単純そうな「Reinhard Tonemapping」を実装しました。&lt;/p&gt;

&lt;p&gt;Reinhard Tonemappingでは&lt;/p&gt;

&lt;p&gt;$$f(x) = \frac{x}{x + 1}$$&lt;/p&gt;

&lt;p&gt;という式で画素値を変換することで、画素値が無限大になっても 1.0 に漸近させることができます。&lt;/p&gt;

&lt;p&gt;この式をそのまま各RGBの要素に適用すると、各要素は1.0を超えないようになりますが、RGBすべてが 1.0 を大きく超える画素では結局白に潰れてしまいます。
そこで、分母の $x$ は RGB からの計算した輝度（スカラー）として、分子の $x$ はRGB（ベクター）として実装しました。&lt;/p&gt;

&lt;p&gt;さらに、単純なReinhard Tonemappingだと無限大の輝度値をもつ画素値しか白に漸近してくれずに不便なので、
任意の輝度値 $L_w$ を白に漸近させるポイントとして指定できる改良版のアルゴリズムを利用しました。&lt;/p&gt;

&lt;p&gt;$$f(x) = \frac{x}{x + 1} \left(1 + \frac{x}{L_w^2} \right) $$&lt;/p&gt;

&lt;p&gt;詳しくは以下のPDFが参考になるでしょう。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cmap.polytechnique.fr/~peyre/cours/x2005signal/hdr_photographic.pdf&#34;&gt;Reinhard, Erik (2002). &amp;ldquo;Photographic tone reproduction for digital images&amp;rdquo;. ACM Transactions on Graphics.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;デノイズの実装&#34;&gt;デノイズの実装&lt;/h2&gt;

&lt;p&gt;レイトレ合宿の制限時間は年々短くなっています。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2018-09-07-rtcamp6/time_limit.png&#34; alt=&#34;制限時間&#34; /&gt;&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;イベント名&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;制限時間&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://sites.google.com/site/rendering1h/&#34;&gt;レイトレ合宿！&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1時間&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://sites.google.com/site/raytracingcamp2/&#34;&gt;レイトレ合宿2!!&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;30分&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://sites.google.com/site/raytracingcamp3/&#34;&gt;レイトレ合宿3!!!&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15分&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://sites.google.com/site/raytracingcamp4/&#34;&gt;レイトレ合宿4!?&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5分&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://sites.google.com/site/raytracingcamp5/&#34;&gt;レイトレ合宿5‽&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;273秒&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://sites.google.com/site/raytracingcamp6/&#34;&gt;レイトレ合宿6&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;123秒&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;さらに出力解像度のハードルも年々上がっていて、今年はほとんどの参加者がフルHDで出力しており、4Kで出力する猛者もいました。&lt;/p&gt;

&lt;p&gt;制限時間の短縮と高解像度化によって、1ピクセルあたりにかけられるサンプリング数がどんどん少なくなっているため、デノイズの重要性は高まっていると言えるでしょう。&lt;/p&gt;

&lt;p&gt;今回はデノイズの中でも最も単純そうな「Bilateral Filter」を実装しました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2018-09-07-rtcamp6/denoise.jpg&#34; alt=&#34;Denoise&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Bilateral Filterを簡単に解説します。&lt;/p&gt;

&lt;p&gt;平滑化フィルター（ぼかしフィルター）として有名なアルゴリズム「Gaussian Blur」があります。
Gaussian Blurは「空間的な重み」に基づいて周囲のピクセルを混ぜ合わせて平滑化を行います。&lt;/p&gt;

&lt;p&gt;Gaussian Blurでは全体的にぼやけてしまうので、
重みを変化させてエッジ部分を保持するようにしたものがBilateral Filterです。&lt;/p&gt;

&lt;p&gt;Bilateral Filterでは「空間的な重み」と「ピクセル値の差による重み」を掛け合わせたものを用います。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2018-09-07-rtcamp6/03_definition_bf.jpg&#34; alt=&#34;Bilateral Filter on a Height Field&#34; /&gt;&lt;/p&gt;

&lt;p&gt;$G_{\sigma_s}(||p - q||)$ は距離をパラメータとしたガウス関数なので「空間的な重み」となります。&lt;/p&gt;

&lt;p&gt;$G_{\sigma_r}(|I_p - I_q|)$ は画素値の差をパラメータとしたガウス関数なので「ピクセル値の差による重み」です。&lt;/p&gt;

&lt;p&gt;この2つの重みを組み合わせることでエッジ部分を保持しながら平滑化ができます。&lt;/p&gt;

&lt;p&gt;1つ補足すると、上の式の $\sigma_r$ を無限大にするとガウス関数の性質上、「ピクセル値の差による重み」が一様な分布になります。
つまり$\sigma_r$ を無限大にするとGaussian Blurになります。
このような知識を念頭に置いておくと、パラメータ調整に役に立つでしょう。&lt;/p&gt;

&lt;p&gt;上の画像は &lt;a href=&#34;http://people.csail.mit.edu/sparis/bf_course/&#34;&gt;&amp;ldquo;A Gentle Introduction to Bilateral Filtering and its Applications&amp;rdquo; SIGGRAPH 2007&lt;/a&gt; の &lt;a href=&#34;http://people.csail.mit.edu/sparis/bf_course/slides/03_definition_bf.pdf&#34;&gt;&amp;ldquo;Fixing the Gaussian Blur&amp;rdquo;: the Bilateral Filter&lt;/a&gt; という資料の7ページ目から引用しました。&lt;/p&gt;

&lt;p&gt;以下のブログの説明も分かりやすかったです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/hanecci/20131013&#34;&gt;2013-10-13 Gaussian Blur と Bilateral Filter のメモ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今回は簡単なデノイズを実装しましたが、余裕があればもっと凄いデノイズをやりたいですね。
レイトレ合宿の主催のqさんよると、次の手法がオススメだそうです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/superboubek/bcd&#34;&gt;BCD - Bayesian Collaborative Denoiser for Monte-Carlo Rendering&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;houdiniによるシーン作成&#34;&gt;Houdiniによるシーン作成&lt;/h2&gt;

&lt;p&gt;Assetの一部はHoudiniを利用して作成しました。&lt;/p&gt;

&lt;h3 id=&#34;wired-bunny&#34;&gt;Wired Bunny&lt;/h3&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Wired Bunny &lt;a href=&#34;https://twitter.com/hashtag/Houdini?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#Houdini&lt;/a&gt; &lt;a href=&#34;https://t.co/aZO2CHSS31&#34;&gt;pic.twitter.com/aZO2CHSS31&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1033993211566481408?ref_src=twsrc%5Etfw&#34;&gt;2018年8月27日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;HoudiniでStanford Bunnyのモデルをワイヤーフレーム化したメッシュに加工しました。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;PolyWire&lt;/code&gt; というノードを使うことで簡単に実現できます。&lt;/p&gt;

&lt;h3 id=&#34;額縁&#34;&gt;額縁&lt;/h3&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/hashtag/Houdini?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#Houdini&lt;/a&gt; の Boolean と PolyBevel でつくった額縁 &lt;a href=&#34;https://t.co/ycwK9SJw5K&#34;&gt;pic.twitter.com/ycwK9SJw5K&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1035344499180855297?ref_src=twsrc%5Etfw&#34;&gt;2018年8月31日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;額縁はBox同士をブーリアン演算で切り抜いた形状を &lt;code&gt;PolyBevel&lt;/code&gt; というノードで角を丸めて作りました。&lt;/p&gt;

&lt;h3 id=&#34;フラクタルの試作&#34;&gt;フラクタルの試作&lt;/h3&gt;

&lt;p&gt;本番では使いませんでしたが、フラクタルも試作しました。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-cards=&#34;hidden&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/hashtag/Houdini?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#Houdini&lt;/a&gt; でフラクタル図形（Menger Sponge）を作ってみた。&lt;br&gt;少しずつSOPとVEXを理解してきた気がする。 &lt;a href=&#34;https://t.co/Wip7DbkGN8&#34;&gt;pic.twitter.com/Wip7DbkGN8&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/992626756900208640?ref_src=twsrc%5Etfw&#34;&gt;2018年5月5日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;立方体の向きを揃える処理を省くと複雑な形状になって面白い&lt;br&gt;MengerSpongeの亜種になる &lt;a href=&#34;https://twitter.com/hashtag/Houdini?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#Houdini&lt;/a&gt; &lt;a href=&#34;https://t.co/OKfd29TtNn&#34;&gt;pic.twitter.com/OKfd29TtNn&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/992639541818286080?ref_src=twsrc%5Etfw&#34;&gt;2018年5月5日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;スケールの計算がバグっていたので修正。&lt;br&gt;良い感じになった。 &lt;a href=&#34;https://twitter.com/hashtag/Houdini?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#Houdini&lt;/a&gt; &lt;a href=&#34;https://t.co/4hyjzhwNlc&#34;&gt;pic.twitter.com/4hyjzhwNlc&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1033912181782245376?ref_src=twsrc%5Etfw&#34;&gt;2018年8月27日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;Dodecahedron（正十二面体）の Fractal 😉 &lt;a href=&#34;https://twitter.com/hashtag/Houdini?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#Houdini&lt;/a&gt; &lt;a href=&#34;https://t.co/26iIRVefLL&#34;&gt;pic.twitter.com/26iIRVefLL&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1033918879175598080?ref_src=twsrc%5Etfw&#34;&gt;2018年8月27日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&#34;windows環境で36コアしか使えない問題&#34;&gt;Windows環境で36コアしか使えない問題&lt;/h2&gt;

&lt;p&gt;今年のレイトレ合宿の本番マシンは72コアを持つEC2インスタンスでした。&lt;/p&gt;

&lt;p&gt;Windowsの仕様によってシステムに 64コアを超える論理プロセッサーが搭載されていると、
プロセッサーはプロセッサー・グループに分割されてしまうらしく、私のレンダラーも36コアしか利用できませんでした。
しかも締切前日に発覚しました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.isus.jp/hpc/mtp-windows-64core/&#34;&gt;64 コアを超える Windows 環境でマルチスレッド・プログラミングをしてみる&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;C++であれば、 &lt;code&gt;SetThreadGroupAffinity()&lt;/code&gt; でスレッドグループを指定することで対処可能のようでしたが、Rustだと対処困難でした。&lt;/p&gt;

&lt;p&gt;去年のレイトレ合宿からWindowsとAmazon Linuxの2つから好きなOSを選択できるようにルール改定がありました。
そこで、急遽Linux用のバイナリを作成してAmazon Linuxで走らせたところ、72コアをフルに利用できるようになりました！&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;Linux用のバイナリをクロスコンパイルして72コア使えました ☺️&lt;br&gt;クロスコンパイルが比較的簡単にできるのでRustは神。&lt;a href=&#34;https://t.co/UpqCC66wmV&#34;&gt;https://t.co/UpqCC66wmV&lt;/a&gt; &lt;a href=&#34;https://t.co/hIX2GO4Yn1&#34;&gt;pic.twitter.com/hIX2GO4Yn1&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1034616613234855936?ref_src=twsrc%5Etfw&#34;&gt;2018年8月29日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;レイトレ合宿のルールには次の文言があります。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;何もインストールしていないまっさらなマシン上で動作するようにしてください。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;これは動的ライブラリに依存せずに動作する必要があることを意味します。&lt;/p&gt;

&lt;p&gt;Rustで動的ライブラリに依存しないバイナリを作成する場合は &lt;code&gt;x86_64-unknown-linux-musl&lt;/code&gt; を target にしてビルドすればOKです。&lt;/p&gt;

&lt;p&gt;以下の記事を参考にしてmacOSでLinux用のバイナリをクロスコンパイルして最終提出しました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chr4.org/blog/2017/03/15/cross-compile-and-link-a-static-binary-on-macos-for-linux-with-cargo-and-rust/&#34;&gt;Cross-compile and link a static binary on macOS for Linux with cargo and rust - chr4&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;同じくRustで参加された&lt;a href=&#34;http://xyz600.hatenablog.com/entry/2018/09/08/001206&#34;&gt;xyz600の参加報告&lt;/a&gt;によると全く同じ手段で解決されていました。&lt;/p&gt;

&lt;h2 id=&#34;制限時間や出力解像度のコマンドライン引数対応&#34;&gt;制限時間や出力解像度のコマンドライン引数対応&lt;/h2&gt;

&lt;p&gt;制限時間や出力解像度をコマンドラインで引数で指定する機能を締切前日くらいに実装しました。&lt;/p&gt;

&lt;p&gt;こんな基本的な機能をなぜ実装しなかった疑問に思うかもしれませんが、単純に時間的余裕が無かっただけです。&lt;/p&gt;

&lt;p&gt;本番環境と開発環境ではスペックでは性能差があるため、
開発環境では性能差を考慮して長めの制限時間に変更するコード修正が必要でしたが、
これによってコマンドライン引数からコード修正なしに設定を変更できるようになりました。&lt;/p&gt;

&lt;p&gt;コマンドライン引数のパースには getopts というクレートを利用しました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rust-lang-nursery/getopts&#34;&gt;https://github.com/rust-lang-nursery/getopts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# レイトレ合宿6のレギュレーションで実行
cargo run --release

# 制限時間を1047秒に設定し、60秒ごとに途中結果を出力しながら実行
cargo run --release -- -t 1047 -i 60

# 低解像度・サンプリング数を1で実行
cargo run --release -- -w 480 -h 270 -s 1

# デバッグモードで実行（被写界深度の焦点面を可視化）
cargo run --release -- -d

# ヘルプを表示
cargo run --release -- --help

Usage: hanamaru-renderer [options]

Options:
        --help          print this help menu
    -d, --debug         use debug mode
    -w, --width WIDTH   output resolution width
    -h, --height HEIGHT output resolution height
    -s, --sampling SAMPLING
                        sampling limit
    -t, --time TIME     time limit sec
    -i, --interval INTERVAL
                        report interval se
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;リソースフォークを除外しながら圧縮&#34;&gt;リソースフォークを除外しながら圧縮&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;tar&lt;/code&gt; コマンドを使ってリソースフォークを除外しながら圧縮する方法を学びました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ COPYFILE_DISABLE=1 tar zcvf 圧縮先.tar.gz --exclude &amp;quot;.DS_Store&amp;quot; 圧縮元のディレクトリ
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;運営側でレンダラーをスクリプトから自動実行しているそうなのですが、実行ファイルが複数あると自動実行できなくなるそうです。&lt;/p&gt;

&lt;p&gt;Macのリソースフォークには実行権限がついているので、リソースフォークを除外して圧縮しました。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;Macでtarコマンドを使うときには次のオプションをつけるとリソースフォークが除外されるという知見を得た。&lt;br&gt;COPYFILE_DISABLE=1 tar zcvf 圧縮先.tar.gz &amp;ndash;exclude &amp;quot;.DS_Store&amp;quot; 圧縮元のディレクトリ&lt;a href=&#34;https://t.co/mKWLxCZ8Hn&#34;&gt;https://t.co/mKWLxCZ8Hn&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1034968545489113088?ref_src=twsrc%5Etfw&#34;&gt;2018年8月30日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h1 id=&#34;まとめ&#34;&gt;まとめ&lt;/h1&gt;

&lt;p&gt;最終的にはなんとか締切に間に合いましたが、来年はもう少し余裕を持って開発したいですね。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;サブミット完了。&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1035169812698152961?ref_src=twsrc%5Etfw&#34;&gt;2018年8月30日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;業務が忙しかったりSIGGRAPHのために海外出張したりして、今年は準備の着手が遅くなってしまいました（言い訳）。&lt;/p&gt;

&lt;p&gt;本格的に準備に着手したのはSIGGRAPH帰国後になってしまい、合宿まで残り2週間を切っていました😇
しかもSIGGRAPH帰国後だったので、時差ボケに苦しみながらの実装でした😵
ともあれ、なんとか無事に提出に間に合ってよかったです！&lt;/p&gt;

&lt;p&gt;TODO管理としてGitHubの&lt;a href=&#34;https://github.com/gam0022/hanamaru-renderer/issues/24&#34;&gt;issues&lt;/a&gt;を利用しました。
私がどういう機能を実装しようとして、何を諦めたのか興味がある人は読むと良いでしょう。&lt;/p&gt;

&lt;h1 id=&#34;合宿当日&#34;&gt;合宿当日&lt;/h1&gt;

&lt;p&gt;合宿当日の様子については、後編（当日編）の記事に続きます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gam0022.net/blog/2018/09/25/rtcamp6-part2/&#34;&gt;レイトレ合宿6 参加報告 Part2（当日編） | gam0022.net&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>レイトレ合宿5‽に参加して、Rustでパストレーシングを実装しました！</title>
      <link>https://gam0022.net/blog/2017/10/02/rtcamp5/</link>
      <pubDate>Mon, 02 Oct 2017 09:00:00 +0900</pubDate>
      
      <guid>https://gam0022.net/blog/2017/10/02/rtcamp5/</guid>
      <description>&lt;p&gt;9月9日(土)～9月10日(日)に諏訪湖で開催された&lt;a href=&#34;https://sites.google.com/site/raytracingcamp5/&#34;&gt;レイトレ合宿5‽&lt;/a&gt;に参加しました！&lt;/p&gt;

&lt;p&gt;レイトレ合宿は完全自作のレイトレーサーを走らせて画像の美しさを競うイベントです。&lt;/p&gt;

&lt;p&gt;去年に初参加させていただき、今年で2回目の参加になります。去年の参加報告は&lt;a href=&#34;http://gam0022.hatenablog.com/entry/raytracingcamp4&#34;&gt;こちら&lt;/a&gt;です。&lt;/p&gt;

&lt;p&gt;私はRustでパストレーサ（Hanamaruレンダラー）を実装して、こんな感じの画像をレンダリングしました。&lt;/p&gt;

&lt;p&gt;今年は16人中9位なので、去年の13人中10位よりは進歩しました！&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2017-09-18-rtcamp5/result.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2017-09-18-rtcamp5/result.jpg&#34; alt=&#34;result&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;↑リンクをクリックするとオリジナルの可逆圧縮の画像になります。&lt;/p&gt;

&lt;p&gt;ソースコードはGitHubに公開しています（スターください）。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/gam0022/hanamaru-renderer/&#34;&gt;https://github.com/gam0022/hanamaru-renderer/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;こちらは合宿当日のプレゼン資料です。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-slide=&#34;1&#34; data-id=&#34;6159e679b62d4d87a718fdf97efe5ed8&#34; data-ratio=&#34;1.77777777777778&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;今年もレンダリング分野の最先端で活躍されている方々がたくさん参加されていました。&lt;/p&gt;

&lt;p&gt;趣味でRedqueenレンダラーを開発し、仕事でAutodeskのArnoldレンダラーを開発されている&lt;a href=&#34;https://twitter.com/redqueenrender&#34;&gt;大垣真二&lt;/a&gt;さん、
&lt;a href=&#34;http://lightmetrica.org/h-otsu/project/inverse/&#34;&gt;ファーストオーサーの論文がSIGGRAPH 2017にアクセプトされた&lt;/a&gt;研究者の&lt;a href=&#34;https://twitter.com/hi2p_perim&#34;&gt;Hisanari Otsu&lt;/a&gt;さんなどが参加されていました。
他にも&lt;a href=&#34;http://t-pot.com/&#34;&gt;t-pot.com&lt;/a&gt;の&lt;a href=&#34;https://twitter.com/Imagire&#34;&gt;今給黎隆&lt;/a&gt;さん、
&lt;a href=&#34;http://project-asura.com/&#34;&gt;project-asura.com&lt;/a&gt;の&lt;a href=&#34;https://twitter.com/projectasura&#34;&gt;Pocol&lt;/a&gt;さんなど、
CGの勉強をしたことがあれば必ずお世話になるような有名なサイトの管理人たちも参加されていました。&lt;/p&gt;

&lt;p&gt;この記事では、自作のパストレーサの解説やRust初心者によるRustの感想を書きます。&lt;/p&gt;

&lt;p&gt;当日の様子は&lt;a href=&#34;https://twitter.com/c5h12&#34;&gt;Pentan&lt;/a&gt;さんの&lt;a href=&#34;http://c5h12.hatenablog.com/entry/2017/09/17/184007&#34;&gt;記事&lt;/a&gt;にまとめられています。
興味がある方はそちらもご覧ください。&lt;/p&gt;

&lt;h1 id=&#34;hanamaruレンダラーの主な仕様&#34;&gt;Hanamaruレンダラーの主な仕様&lt;/h1&gt;

&lt;p&gt;ポリゴンとの衝突判定をBVHで高速化したり、薄レンズモデルによる被写界深度を入れたり、IBLしたりしました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ポリゴンメッシュに対応

&lt;ul&gt;
&lt;li&gt;objファイルの読み込みに対応&lt;/li&gt;
&lt;li&gt;BVHで衝突判定を高速化&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;albedo / roughness / emissionをテクスチャで指定可能

&lt;ul&gt;
&lt;li&gt;PBR用のテクスチャ素材などを使える&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;薄レンズモデルによる被写界深度（レンズのピンぼけ）&lt;/li&gt;
&lt;li&gt;Image Based Lighting（IBL）

&lt;ul&gt;
&lt;li&gt;CubeMapに対応&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;対応マテリアル

&lt;ul&gt;
&lt;li&gt;完全拡散反射&lt;/li&gt;
&lt;li&gt;完全鏡面反射&lt;/li&gt;
&lt;li&gt;金属面（GGXの法線分布モデル）&lt;/li&gt;
&lt;li&gt;ガラス面（GGXの法線分布モデル）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;シーンの解説&#34;&gt;シーンの解説&lt;/h1&gt;

&lt;p&gt;宝石をランタイム時にプロシージャルに配置してシーンを作りました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;うさぎのモデル

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://graphics.stanford.edu/data/3Dscanrep/&#34;&gt;Stanford Bunny&lt;/a&gt;を&lt;a href=&#34;http://www.meshlab.net/&#34;&gt;MeshLab&lt;/a&gt;で1000ポリゴンにリダクション&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;宝石のモデル

&lt;ul&gt;
&lt;li&gt;知り合いにモデリングしてもらいました。感謝&lt;/li&gt;
&lt;li&gt;拡大・平行移動・回転の変換行列を実装&lt;/li&gt;
&lt;li&gt;重ねて置けない制約をつけつつ、乱数でいい感じに配置（43個）&lt;/li&gt;
&lt;li&gt;seed値を変えればシーンも変化する（ランタイム時にプロシージャルに配置）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;床はPBR用のテクスチャを拝借

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.textures.com/download/substance0010/125790&#34;&gt;Marble Floor Tiles Substance 2 (Customizable)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;CubeMap用のテクスチャも拝借

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.humus.name/index.php?page=Textures&#34;&gt;Humus - Textures&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;高速化の取り組み&#34;&gt;高速化の取り組み&lt;/h1&gt;

&lt;p&gt;今年の合宿では4分33秒以内にレンダリングするルールでしたので、いくつかの高速化に取り組みました。&lt;/p&gt;

&lt;p&gt;ちなみに出力画像の解像度についてはルールはありませんが、目標を高くするために1980x1080を採用しました。&lt;/p&gt;

&lt;p&gt;パストレーシング・レイトレーシングの高速化のアプローチはいくつかあります。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;衝突判定の高速化&lt;/li&gt;
&lt;li&gt;モンテカルロ積分のサンプリングの効率化&lt;/li&gt;
&lt;li&gt;並列処理&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;それぞれ何を行ったのか簡単に紹介します。&lt;/p&gt;

&lt;h2 id=&#34;衝突判定の高速化&#34;&gt;衝突判定の高速化&lt;/h2&gt;

&lt;p&gt;レイトレの実行時間のほとんどは衝突判定が占めるので、これを高速化するのは効果的です。&lt;/p&gt;

&lt;p&gt;衝突判定の高速化としてはBVH（Bounding Volume Hierarchy）を実装しました。&lt;/p&gt;

&lt;p&gt;シーン内のすべてのオブジェクトを総当りで衝突判定せずに、空間分割によって衝突判定の回数を減らします。&lt;/p&gt;

&lt;p&gt;具体的な実装などについては、&lt;a href=&#34;https://twitter.com/omochi64&#34;&gt;お餅&lt;/a&gt;さんの記事を参考にしました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/omochi64/items/9336f57118ba918f82ec&#34;&gt;Bounding Volume Hierarchy (BVH) の実装 - 構築編&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/omochi64/items/c2bbe92d707b280896fd&#34;&gt;Bounding Volume Hierarchy (BVH) の実装 - 交差判定編&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;お餅さんの記事では、Surface Area Heuristicsという手法で評価関数をつかった領域分割をしていましたが、
今回は実装の時間が無かったので、領域の最長辺を軸に選んで要素数で2分割する実装にしました。
単純な分割方法ではありますが、総当りと比較すれば十分に高速化できました。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;全探索だと251.251 sec&lt;br&gt;軸をランダムに選んでポリゴンを2等分するBVHだと 36.28 sec&lt;br&gt;AABBの最長辺を軸に選んでポリゴンを2等分するBVHだと 28.424 sec&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/896963950947975168&#34;&gt;2017年8月14日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;シーンを構成するオブジェクトとして、ポリゴンメッシュ、球体、立方体の3種類に対応しました。
シーンを構成するオブジェクトに対してのBVHだけでなく、ポリゴンメッシュを構成するメッシュに対してもBVHを構築しました。&lt;/p&gt;

&lt;h2 id=&#34;モンテカルロ積分のサンプリングの効率化&#34;&gt;モンテカルロ積分のサンプリングの効率化&lt;/h2&gt;

&lt;p&gt;パストレーシングはレンダリング方程式を&lt;a href=&#34;http://rayspace.xyz/CG/contents/montecarlo/&#34;&gt;モンテカルロ法&lt;/a&gt;をつかって解を求める手法です。&lt;/p&gt;

&lt;p&gt;モンテカルロ積分のサンプリングを効率化すれば、より少ないサンプリング数でノイズの少ない収束した結果を得ることができます。&lt;/p&gt;

&lt;p&gt;サンプリングの効率化のための手法としては、重点的サンプリング、多重重点的サンプリング、Next Event Estimationなどがあります。&lt;/p&gt;

&lt;p&gt;詳しくは&lt;a href=&#34;https://twitter.com/Shocker_0x15&#34;&gt;Shocker&lt;/a&gt;さんの資料を参照してください。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/aoZ5RhsL8f6NPC&#34; width=&#34;595&#34; height=&#34;485&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&#34;margin-bottom:5px&#34;&gt; &lt;strong&gt; &lt;a href=&#34;//www.slideshare.net/shocker_0x15/ss-52688052&#34; title=&#34;パストレーシング&#34; target=&#34;\_blank&#34;&gt;パストレーシング&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&#34;https://www.slideshare.net/shocker_0x15&#34; target=&#34;\_blank&#34;&gt;Shin Watanabe&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;今回はレンダリング方程式のcos項に比例した重点的サンプリングのみ行いました。&lt;/p&gt;

&lt;p&gt;レンダリング方程式のcos項に比例した重点的サンプリングを行うと、
確率密度関数で除算する処理でレンダリング方程式のcos項を打ち消すことができ、パストレーシング実装をシンプルにできます。&lt;/p&gt;

&lt;p&gt;今回のシーンではIBL光源が支配的なため、cos項に比例した重点的サンプリングのみで少ないサンプリング数でレンダリング結果が収束しましたが、
光源が小さいシーンだと分散が大きいために収束が遅くなってしまいます。&lt;/p&gt;

&lt;p&gt;来年までにはNext Event Estimationに挑戦してみたいです。&lt;/p&gt;

&lt;h2 id=&#34;並列処理&#34;&gt;並列処理&lt;/h2&gt;

&lt;p&gt;並列処理もレイトレにおいては超重要です。&lt;/p&gt;

&lt;p&gt;今回の実行環境は64コアのCPUなので、並列処理しないと計算リソースを全体の1/64しか使うことができません。&lt;/p&gt;

&lt;p&gt;Rustの標準ライブラリの&lt;code&gt;std::thread&lt;/code&gt;でも並列化はできるのですが、
CPUのコア数に応じてスレッドプールを作ったり、適切にスケジューリングする部分はプログラマーが頑張る必要がありました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/nikomatsakis/rayon&#34;&gt;Rayon&lt;/a&gt;という並列処理のライブラリを利用すれば、面倒なスケジューリングを自動でやってくれそうだったので、これを採用しました。&lt;/p&gt;

&lt;h3 id=&#34;並列化の戦略&#34;&gt;並列化の戦略&lt;/h3&gt;

&lt;p&gt;並列化の戦略を2通り試しました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2017-09-18-rtcamp5/pararell.jpg&#34; alt=&#34;並列化の戦略&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;サンプリング数を固定化した並列化&#34;&gt;サンプリング数を固定化した並列化&lt;/h4&gt;

&lt;p&gt;まずは開発初期の並列化の戦略を説明します。&lt;/p&gt;

&lt;p&gt;図の左のように時系列で行(y方向)ごとに処理し、列(x方向)の各ピクセルの計算を並列で行うようにしました。
各スレッド内で全サンプリングの計算して、最終的な画素値まで決定しました。&lt;/p&gt;

&lt;p&gt;この戦略はサンプリング数を事前に決定する必要があるのですが、
サンプリング数を大きくしすぎると4:33の制限時間をオーバーしすぎる心配があり、
逆に小さくしすぎると計算リソースを使い切れなくなってしまいます。&lt;/p&gt;

&lt;p&gt;今回のようにレンダリング時間がルールで決まっている場合は、あまり良い戦略ではありませんでした。&lt;/p&gt;

&lt;h4 id=&#34;サンプリング数を動的に変更できる並列化&#34;&gt;サンプリング数を動的に変更できる並列化&lt;/h4&gt;

&lt;p&gt;そこで、開発後半では並列化の戦略を変更しました。&lt;/p&gt;

&lt;p&gt;図の右のように時系列でサンプリングごとに処理し、全ピクセルの計算を並列で行うようにしました。
直前の1サンプリングの所要時間から次のサンプリングで時間切れになることを予想したら、その時点でのサンプリング数の結果を出力して終了します。&lt;/p&gt;

&lt;p&gt;これでサンプリング数を実行環境のスペックに応じて動的に調整できるようになりました。&lt;/p&gt;

&lt;p&gt;しかし、この変更によって少しパフォーマンスが低下しました。
同じサンプリング数で比較すると、計算時間が5%程度増加してしまいました。
テクスチャをたくさん使ったシーンなので、キャッシュのヒット率が低下したのが原因かもしれません。&lt;/p&gt;

&lt;h3 id=&#34;rayonによる並列化をしたレンダリングの関数&#34;&gt;Rayonによる並列化をしたレンダリングの関数&lt;/h3&gt;

&lt;p&gt;これが実際のサンプリング数を動的に変更できる並列化をしたレンダリングの関数です。&lt;/p&gt;

&lt;p&gt;Rayonでは、&lt;code&gt;iter_mut()&lt;/code&gt;の代わりに&lt;code&gt;par_iter_mut()&lt;/code&gt;でイテレーターを作ると並列処理ができます。&lt;/p&gt;

&lt;p&gt;元のコードをほとんど変更せずに並列化できるのは素晴らしいですね。&lt;/p&gt;

&lt;p&gt;同じことを&lt;code&gt;std::thread&lt;/code&gt;で書こうとすると、かなりコードが複雑になると思います。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fn render(&amp;amp;mut self, scene: &amp;amp;SceneTrait, camera: &amp;amp;Camera, imgbuf: &amp;amp;mut ImageBuffer&amp;lt;Rgb&amp;lt;u8&amp;gt;, Vec&amp;lt;u8&amp;gt;&amp;gt;) -&amp;gt; u32 {
    let resolution = Vector2::new(imgbuf.width() as f64, imgbuf.height() as f64);
    let num_of_pixel = imgbuf.width() * imgbuf.height();
    let mut accumulation_buf = vec![Vector3::zero(); num_of_pixel as usize];

    // NOTICE: sampling is 1 origin
    for sampling in 1..(self.max_sampling() + 1) {
        accumulation_buf.par_iter_mut().enumerate().for_each(|(i, pixel)| {
            let y = i as u32 / imgbuf.width();
            let x = i as u32 - y * imgbuf.width();
            let frag_coord = Vector2::new(x as f64, (imgbuf.height() - y) as f64);
            *pixel += self.supersampling(scene, camera, &amp;amp;frag_coord, &amp;amp;resolution, sampling);
        });

        if self.report_progress(&amp;amp;accumulation_buf, sampling, imgbuf) {
            return sampling;
        }
    }

    self.max_sampling()
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/gam0022/hanamaru-renderer/blob/57041bcdd84d44ce9a0ea4aa0a9c94756ed835ee/src/renderer.rs#L27-L47&#34;&gt;https://github.com/gam0022/hanamaru-renderer/blob/57041bcdd84d44ce9a0ea4aa0a9c94756ed835ee/src/renderer.rs#L27-L47&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;開発の振り返り&#34;&gt;開発の振り返り&lt;/h1&gt;

&lt;p&gt;開発期間は1ヶ月弱でした。7/30くらいに着手して9/8の締め切りギリギリまで開発していました。&lt;/p&gt;

&lt;p&gt;最低限のパストレが動くまでは1週間くらい、並列化やポリゴンの衝突判定のBVHによる高速化までは2週間くらいかかりました。&lt;/p&gt;

&lt;p&gt;シーン調整していくうちに、バグや不具合が見つかったので、後半はシーン構築のための機能を追加しつつ、バグ修正をしていました。&lt;/p&gt;

&lt;h2 id=&#34;rustについて&#34;&gt;Rustについて&lt;/h2&gt;

&lt;p&gt;去年はC++で開発したのですが、今年はRustでフルスクラッチで書き直しました。&lt;/p&gt;

&lt;p&gt;Rustの所有権に慣れるまでは大変でしたが、トータルで見ればC++ではなくRustで開発して良かったと思います。&lt;/p&gt;

&lt;h3 id=&#34;rustの採用理由&#34;&gt;Rustの採用理由&lt;/h3&gt;

&lt;p&gt;こんな感じの理由でRustを採用しました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;実行時のパフォーマンスを重視している

&lt;ul&gt;
&lt;li&gt;並列処理が簡単にできて、実行時のオーバヘッドが低いことはレイトレには必須条件&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;高いポータビリティ

&lt;ul&gt;
&lt;li&gt;MacでもWindowsでも、コードの変更なしに動かせる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Webブラウザ上でも動かせる

&lt;ul&gt;
&lt;li&gt;WebAssemblyの出力をサポートしている数少ない言語

&lt;ul&gt;
&lt;li&gt;他にサポートしているのはC++だけ？&lt;/li&gt;
&lt;li&gt;FirefoxのMollizaが中心に開発しているからなのだろうか&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;弊社(KLab)の社員が2人もRustでレイトレしており、困ったら教えてもらおうと思った

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/kiritex/items/786dbed4b7a2a22cbb89&#34;&gt;Rust でレイトレーシング入門しました&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/trigott&#34;&gt;@trigott&lt;/a&gt;さん&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hhatto/ray-tracing-in-one-weekend-in-rust&#34;&gt;hhatto/ray-tracing-in-one-weekend-in-rust&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/hhatto&#34;&gt;@hhatto&lt;/a&gt;さん&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;rustの学習方法&#34;&gt;Rustの学習方法&lt;/h3&gt;

&lt;p&gt;Rustについて何も知らなかったので、まずは通勤中に&lt;a href=&#34;https://rust-lang-ja.github.io/the-rust-programming-language-ja/1.6/book/README.html&#34;&gt;プログラミング言語Rust&lt;/a&gt;を読んでRustの思想を学びました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://play.rust-lang.org/&#34;&gt;Rust Playground&lt;/a&gt;でブラウザ上でRustのコードを書いて実行できるので、
よく分からないところは実際に短いコードを書いて理解を深めました。&lt;/p&gt;

&lt;p&gt;正直に言うと、Rustの学習コストはかなり高いと感じました。
Rustの予習に1週間かけましたが、いざコードを書いてみると所有権や型のサイズが不定などのコンパイルエラーに阻まれて、心が折れそうになりました。
特に所有権やライフタイムは自分には全く馴染みの無い概念で理解するのに苦労させられました。
また所有権を理解できたとしても、所有権のルールを守りながらコードを書くのは別問題だなと痛感しました。&lt;/p&gt;

&lt;p&gt;はじめは大変でしたが、慣れてくればコンパイルエラーに阻まれることはなくりました。
所有権を守るために設計から見直すこともありましたが、結果的に所有権を意識することでコードがスッキリしました。&lt;/p&gt;

&lt;p&gt;Rustは所有権という仕組みによってデータ競合を排除したり、ガーベジコレクタのない低オーバヘッドを実現しているので、
この辺は「学習コスト」対「安全性＋実行時パフォーマンス」のトレードオフだろうと感じました。&lt;/p&gt;

&lt;p&gt;C++の経験がある人は&lt;a href=&#34;https://imoz.jp/note/rust-functions.html&#34;&gt;Rustは何が新しいのか（基本的な言語機能の紹介） - いもす研 (imos laboratory)&lt;/a&gt;という記事を読むとRustの所有権の雰囲気を掴めると思いました。&lt;/p&gt;

&lt;p&gt;Rustにはcargoというビルドツール兼パッケージ管理システムが標準搭載されていて、これはとても便利でした。
&lt;code&gt;cargo run&lt;/code&gt;を叩くだけで、自動的にパッケージをフェッチし、依存関係を解決してビルドと実行ができます。&lt;/p&gt;

&lt;p&gt;開発前半は通勤中にMacで開発して、開発後半は高スペックなWindowsデスクトップに開発環境を移行しました。
cargoのおかげでMacもWindowsも同じようにビルドができるので、開発環境を行き来するコストが全くありませんでした。&lt;/p&gt;

&lt;h3 id=&#34;rustのenum&#34;&gt;Rustのenum&lt;/h3&gt;

&lt;p&gt;Rustの特徴はたくさんあるのですが、&lt;a href=&#34;https://rust-lang-ja.github.io/the-rust-programming-language-ja/1.6/book/enums.html&#34;&gt;列挙型&lt;/a&gt;は良いと思いました。
Cのenumとは違って、構造体やタプルのような各ヴァリアントに関連するデータを持たせることができるので、マテリアルのタイプの定義に便利でした。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;#[derive(Clone, Debug)]
pub enum SurfaceType {
    Diffuse,
    Specular,
    Refraction { refractive_index: f64 },
    GGX { roughness: f64 },
    GGXReflection { roughness: f64, refractive_index: f64 },
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/gam0022/hanamaru-renderer/blob/d4eb5320fbe9ed18de152496c6e3aa070e947dfb/src/material.rs&#34;&gt;https://github.com/gam0022/hanamaru-renderer/blob/d4eb5320fbe9ed18de152496c6e3aa070e947dfb/src/material.rs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;言語組み込みのnull許容型（&lt;a href=&#34;https://doc.rust-lang.org/std/option/enum.Option.html&#34;&gt;Option&lt;/a&gt;）もenumで実装されていました。
&lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt;を&lt;code&gt;Some(T)&lt;/code&gt;または&lt;code&gt;None&lt;/code&gt;をとるenumにすることでnullチェック漏れをコンパイル時の型のチェックでエラーとして検出できます。
この仕組はとても賢いですね。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;pub enum Option&amp;lt;T&amp;gt; {
    None,
    Some(T),
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;HaskellのMaybeモナドと全く同じ仕組みなので、関数型言語の良いところも取り入れているのかなと思いました。&lt;/p&gt;

&lt;p&gt;他にも&lt;a href=&#34;https://rust-lang-ja.github.io/the-rust-programming-language-ja/1.6/book/iterators.html&#34;&gt;リスト処理&lt;/a&gt;も充実していて好感が持てました。&lt;/p&gt;

&lt;h3 id=&#34;rustのオススメide&#34;&gt;RustのオススメIDE&lt;/h3&gt;

&lt;p&gt;個人的にRustの開発環境は&lt;a href=&#34;https://intellij-rust.github.io/&#34;&gt;IntelliJにRustのプラグイン&lt;/a&gt;をインストールするのが最強だと思いました。
関数定義にジャンプできるのはもちろん、メソッド名の補完やリファクタリングなども普通に使えます。Vimは卒業しました。&lt;/p&gt;

&lt;h2 id=&#34;デバッグ機能&#34;&gt;デバッグ機能&lt;/h2&gt;

&lt;p&gt;レンダラーがある程度完成したら、シーンの編集作業がメインになっていきます。
しかし、シーンの確認のためにレンダリング結果を何分も待つのは時間の無駄です。&lt;/p&gt;

&lt;p&gt;そこで直接照明のみ考慮し、屈折や反射をしない高速なレンダリングのモードを実装しました。&lt;/p&gt;

&lt;p&gt;その他にも、法線・深度値・焦点面からの距離を表示するデバッグ機能を実装して、シーン編集の効率を向上させました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2017-09-18-rtcamp5/debug.jpg&#34; alt=&#34;debug&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;まとめ&#34;&gt;まとめ&lt;/h1&gt;

&lt;p&gt;締め切り駆動開発でしたが、前から試したかったBVHなどを実装できたので良かったです。
Rustも手ごわかったですが、気合でなんとか習得することができました。&lt;/p&gt;

&lt;p&gt;合宿のセミナーや雑談などでは、レンダリング分野の最先端で活躍されている方々にレイトレの知見をいただき、モチベーションが高まりました。
セミナーでは、大垣さんによる「20年間レンダラーを開発しているうちに考えたこと」、うしおさんによる「ファーのレンダリング」、Otsuさんによる「最新のPM/MCMC系手法」についてお話ししていただきました。
また、他の参加者にもNext Event Estimationの疑問点、双方向パストレーシングについて教えていただきました。&lt;/p&gt;

&lt;p&gt;また、宿の料理が美味しかったことや、温泉から見える夕暮れの諏訪湖がとても綺麗だったことが思い出深いです。観光もとても楽しかったです。&lt;/p&gt;

&lt;p&gt;運営・企画してくださった&lt;a href=&#34;https://twitter.com/q_cinnamon&#34;&gt;q&lt;/a&gt;さん、&lt;a href=&#34;https://twitter.com/h013&#34;&gt;hole&lt;/a&gt;さん、本当にありがとうございました。&lt;/p&gt;

&lt;h1 id=&#34;おまけ-制作の過程&#34;&gt;おまけ：制作の過程&lt;/h1&gt;

&lt;p&gt;モチベーション維持のために進捗をTwitterにアップロードするようにしました。&lt;/p&gt;

&lt;p&gt;徐々にステップアップしていく様子を振り返ることができたので、やってよかったと思います。&lt;/p&gt;

&lt;!--これまでTwitterのモーメント機能を活用していませんでしたが、ツイートをブログにまとめるときには便利ですね。--&gt;

&lt;p&gt;&lt;a class=&#34;twitter-moment&#34; href=&#34;https://twitter.com/i/moments/913798905455718401?ref_src=twsrc%5Etfw&#34;&gt;レイトレ合宿5‽&lt;/a&gt; &lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;資料公開したときのツイートです。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/hashtag/%E3%83%AC%E3%82%A4%E3%83%88%E3%83%AC%E5%90%88%E5%AE%BF?src=hash&#34;&gt;#レイトレ合宿&lt;/a&gt; のためにRustで開発したパストレーサの紹介スライドです。 BVHによるポリゴンとの衝突判定を高速化、薄レンズモデルによる被写界深度などしました😆&lt;a href=&#34;https://t.co/itDLyWNpFx&#34;&gt;https://t.co/itDLyWNpFx&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/906817610246848512&#34;&gt;2017年9月10日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;!--
&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;土日はRustを頑張っていた。&lt;br&gt;鬼門と噂の所有権や借用については、予習してきたので、思ったより苦労せずに済んだ。&lt;br&gt;Rustはスタック領域にメモリ確保するので、structのサイズが事前に分かってないとコンパイルできない仕様に悩まされた(Box&amp;lt;T&amp;gt;で解決)。&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/891665053644054529&#34;&gt;2017年7月30日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;Rustで生成した最初の画像&lt;br&gt;image crateが超便利だった。 &lt;a href=&#34;https://t.co/ZCZrg05ms6&#34;&gt;pic.twitter.com/ZCZrg05ms6&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/891665290659889153&#34;&gt;2017年7月30日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;なんとかレイを飛ばすことに成功した図&lt;br&gt;Rust、慣れるまでがやっぱり大変だった...&lt;br&gt;実装1割、コンパイル通すの9割みたいな時間配分ｗ &lt;a href=&#34;https://t.co/bmD8pwaWRR&#34;&gt;pic.twitter.com/bmD8pwaWRR&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/891665866089091072&#34;&gt;2017年7月30日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;Planeを実装。&lt;br&gt;スクリーン上のY軸を反転させるのを忘れていて、座標系が何もかもバグってたのを修正。&lt;br&gt;ずっと床が無い状態だったので気がつけなかった…ｗ&lt;br&gt;影もつけた。 &lt;a href=&#34;https://t.co/MKtlNsBHyB&#34;&gt;pic.twitter.com/MKtlNsBHyB&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/891723700139024384&#34;&gt;2017年7月30日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;パストレができるようになった。&lt;br&gt;Rayonで並列処理も実現できた。&lt;br&gt;Macでコード書いていたけど、rustupでWindowsにRustインストールしたら、手直し0でcargo buildでWindows用バイナリ生成できた。Rust良いね。 &lt;a href=&#34;https://t.co/VhIqlu1bqe&#34;&gt;pic.twitter.com/VhIqlu1bqe&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/893725960180187137&#34;&gt;2017年8月5日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;SuperSampling + IBL実装&lt;br&gt;フルスクラッチでCubeTexture実装したことなかったので、画像の向きが滅茶苦茶になるのを治すのに苦労した。&lt;br&gt;Bilinearフィルター実装しないとジャギがやばいね… &lt;a href=&#34;https://t.co/zZIl36eXEV&#34;&gt;pic.twitter.com/zZIl36eXEV&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/893889557027987456&#34;&gt;2017年8月5日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;Bilinearフィルターできた。&lt;br&gt;一度もバグらせることなく実装できたので良かった。 &lt;a href=&#34;https://t.co/462rdPWGjP&#34;&gt;pic.twitter.com/462rdPWGjP&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/894090372707606528&#34;&gt;2017年8月6日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;GGXと屈折できた〜&lt;br&gt;右の紫はGGX+屈折の磨りガラスにしているけど、床が単色だから普通の屈折面と区別がつかないw &lt;a href=&#34;https://t.co/jlNaPeWRI6&#34;&gt;pic.twitter.com/jlNaPeWRI6&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/894204969674391552&#34;&gt;2017年8月6日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;テクスチャ対応とガンマ補正した。&lt;br&gt;エイリアシングが酷すぎるが、Mipmapの実装は今回は見送ろうかな &lt;a href=&#34;https://t.co/XMGUbfJ3Ab&#34;&gt;pic.twitter.com/XMGUbfJ3Ab&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/895954424656388097&#34;&gt;2017年8月11日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;ポリゴンの衝突判定とobjファイルのローダを実装した。&lt;br&gt;モデルは1000ポリゴンに削ったスタンフォードバニー。&lt;br&gt;ついでに簡単なBVHも実装してポリゴンの衝突判定を高速化してみた。 &lt;a href=&#34;https://t.co/7yWJQnnpyR&#34;&gt;pic.twitter.com/7yWJQnnpyR&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/896963739412340736&#34;&gt;2017年8月14日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;被写界深度（レンズのピンぼけ）をシミュレーションした。&lt;br&gt;薄レンズモデルで、絞り羽根は円形。&lt;br&gt;時間があれば、星型とか六角形とか、面白い絞り羽根も試してみたい。 &lt;a href=&#34;https://t.co/YAkiJwF0WA&#34;&gt;pic.twitter.com/YAkiJwF0WA&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/897685643672920064&#34;&gt;2017年8月16日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

賞品もいただいたときのツイートです。

&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;入賞商品の「つかめる水」をいただいました😂&lt;br&gt;来年のシーンは決まりましたね &lt;a href=&#34;https://twitter.com/hashtag/%E3%83%AC%E3%82%A4%E3%83%88%E3%83%AC%E5%90%88%E5%AE%BF?src=hash&#34;&gt;#レイトレ合宿&lt;/a&gt; &lt;a href=&#34;https://t.co/VihgAITecy&#34;&gt;pic.twitter.com/VihgAITecy&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/906670183867080704&#34;&gt;2017年9月10日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
--&gt;</description>
    </item>
    
  </channel>
</rss>

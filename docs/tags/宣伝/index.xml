<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>gam0022.net</title>
    <link>https://gam0022.net/tags/%E5%AE%A3%E4%BC%9D/index.xml</link>
    <description>Recent content on gam0022.net</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>jp</language>
    <copyright>&amp;copy; 2016 gam0022</copyright>
    <atom:link href="/tags/%E5%AE%A3%E4%BC%9D/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>WebGLパストレーシングを技術書典2のためにブラッシュアップ</title>
      <link>https://gam0022.net/blog/2017/04/06/webgl-pathtracing-tbf2/</link>
      <pubDate>Thu, 06 Apr 2017 12:00:00 +0900</pubDate>
      
      <guid>https://gam0022.net/blog/2017/04/06/webgl-pathtracing-tbf2/</guid>
      <description>&lt;p&gt;4/9（日）にアキバ・スクエアで開催される&lt;a href=&#34;https://techbookfest.org/event/tbf02&#34;&gt;技術書典2&lt;/a&gt;に参加します。
技術書典は技術書のみを扱うコミケようなイベントです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://gam0022.hatenablog.com/entry/2016/06/22/tbf1&#34;&gt;去年&lt;/a&gt;に引き続き、技術サークルTechBoosterのWeb本の著者のひとりとして参加します。&lt;/p&gt;

&lt;p&gt;今回は『Think Web』の『第6章 まるで実写！？GPUパストレーシングのWebGL実装』を担当しました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://techbooster.github.io/tbf02/#think&#34;&gt;Think Web | TechBooster in TBF02 技術書典２（2017/4/9） あ-01,02&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://techbooster.github.io/tbf02/#think&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2017-04-06-webgl-pathtracing/info_think.png&#34; alt=&#34;Think Webの表紙&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;パストレーシングとは&#34;&gt;パストレーシングとは？&lt;/h1&gt;

&lt;p&gt;パストレーシングは3Dの描画手法のひとつで、現実世界に近い光の振る舞いをシミュレートすることで、大域照明を考慮した写実的なレンダリングを可能にします。
実際にハリウッド映画などの写実的なCGの多くには、パストレーシングやパストレーシングを発展した手法が採用されています。
写実的なレンダリングができる反面、処理時間が膨大にかかるという弱点があります。&lt;/p&gt;

&lt;h1 id=&#34;本の内容&#34;&gt;本の内容&lt;/h1&gt;

&lt;p&gt;私の章ではパストレーシングのGPU実装による高速化について紹介します。
しかも単純な高速化ではなく、ブラウザ上で3DCGを扱うWebAPIであるWebGLによりGPU実装することで、
ブラウザ上で動作するインタラクティブなパストレーシングを実現します。&lt;/p&gt;

&lt;p&gt;去年12月のWebGLのアドベントカレンダーのQiita記事と同じテーマですが、内容を大幅に加筆・変更しています。
Qiitaには書ききれなかったパストレーシングの基礎や原理の部分から説明し、実際のコードを踏まえながら実装についても丁寧に解説しました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/gam0022/items/18bb3612d7bdb6f4360a&#34;&gt;WebGL+GLSLによる超高速なパストレーシング | Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;なるべく敷居を下げるために専門用語を解説しつつ、説明が長く過ぎず短すぎず丁度いい分量になるように意識して執筆しました。
読者ターゲットは、単純なレイトレーシングは分かっているけれども、パストレーシングは難しい…という人を想定しています。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;webglパストレーシングのデモ&#34;&gt;WebGLパストレーシングのデモ&lt;/h1&gt;

&lt;p&gt;開発したWebGLパストレーサ（パストレーシングのプログラム）はブラウザ上で動かせるので、良ければ触っていただけると嬉しいです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://gam0022.net/webgl/#pathtracing_sandbox&#34;&gt;gam0022.net/webgl/#pathtracing_sandbox&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;シーンエディット機能を搭載しており、オブジェクトの位置やスケール、マテリアルをリアルタイムに編集・プレビューできます。
マテリアルのBRDFとしては完全鏡面反射・完全拡散反射・GGX・屈折面に対応しています。
マテリアルのColor / Roughness / Emissionにはテクスチャを指定することもできます。&lt;/p&gt;

&lt;h1 id=&#34;技術書典2のためのブラッシュアップ&#34;&gt;技術書典2のためのブラッシュアップ&lt;/h1&gt;

&lt;p&gt;執筆にあたってコードを見返したところ、様々なバグを見つけたので、原稿と平行してバグ修正に取り組んでいました。
睡眠時間と引き換えにして、なんとかバグを取り除き、レンダリングの品質を大きく改善できました！&lt;/p&gt;

&lt;p&gt;この記事では、本の宣伝もかねて「どのようなミスがあり、どのように修正をしたのか」を簡単に紹介します。&lt;/p&gt;

&lt;p&gt;原稿を書くのは大変ですが、思考とコードを整理できたので、個人的に得るものが大きかったと感じます。&lt;/p&gt;

&lt;h2 id=&#34;修正箇所一覧&#34;&gt;修正箇所一覧&lt;/h2&gt;

&lt;p&gt;以下が修正箇所です。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;バグ修正

&lt;ul&gt;
&lt;li&gt;完全拡散反射で半球外をサンプリングさせない（法線を基準とした直交座標の基底ベクトルを決定する処理に不具合があった）&lt;/li&gt;
&lt;li&gt;GGXによる反射方向のサンプリング時に半球外が選ばれた時の例外処理（強制的にBRDF=0する）&lt;/li&gt;
&lt;li&gt;レンダリング方程式に基き、再帰の処理をループに書き換える方針にミスがあったので修正（GLSLは再帰ができないので、末尾再帰をループに置き換える必要があるが、置き換え方が間違っていた）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;機能追加

&lt;ul&gt;
&lt;li&gt;屈折面ではフレネルの式から反射率を計算する（去年の段階では 100%反射 OR 100%屈折 のみだった）&lt;/li&gt;
&lt;li&gt;ガンマ補正をちゃんとする

&lt;ul&gt;
&lt;li&gt;テクスチャを参照するときは逆ガンマ変換&lt;/li&gt;
&lt;li&gt;スクリーンに出力するためのRenderTargetに書き込むときはガンマ変換&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;簡単なアンチエイリアシング

&lt;ul&gt;
&lt;li&gt;レイを飛ばす前のスクリーン座標に-0.5〜0.5の範囲の乱数を加える&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;その他

&lt;ul&gt;
&lt;li&gt;環境マップの追加（夜のお城）&lt;/li&gt;
&lt;li&gt;プリセットのシーンの追加（コーネルボックス）&lt;/li&gt;
&lt;li&gt;最適化・リファクタリング&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;詳細は&lt;a href=&#34;https://github.com/gam0022/webgl-sandbox/pull/12&#34;&gt;PR&lt;/a&gt;をご覧ください。&lt;/p&gt;

&lt;h2 id=&#34;結果&#34;&gt;結果&lt;/h2&gt;

&lt;p&gt;ブラッシュアップしたパストレーサのレンダリング結果を紹介します。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2017-04-06-webgl-pathtracing/app-night.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2017-04-06-webgl-pathtracing/app-night.png&#34; alt=&#34;世界地図の光源&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;暗いシーンの背後に照明を置いたシーンです。
屈折面の付近にコーティクス（集光模様）を観察できるなど、間接光も反映した大域照明を実現できました。&lt;/p&gt;

&lt;p&gt;IBLよりも背後の光源の影響が強いシーンですが、ノイズが消えてコーティクスなども鮮明にレンダリングできています。
ノイズが消えたのは、BRDF周りのバグ修正により半球外のサンプリングをするケースを取り除くことができた影響です。&lt;/p&gt;

&lt;p&gt;屈折面では反射と屈折の両方をトレースするようになったので、ガラス面も薄っすらと鏡面反射するようになりました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2017-04-06-webgl-pathtracing/examples.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2017-04-06-webgl-pathtracing/examples.png&#34; alt=&#34;マテリアルのテスト&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;同じ色（白）・同じ大きさで材質だけが異なる4つの球体を配置したシーンです。
左から順に（１）完全拡散反射面、（２）完全鏡面反射面、（３）屈折面（ガラス面）、（４）微小な凹凸のある鏡面（GGX）です。
シーンの上部の白い球体が光源です。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2017-04-06-webgl-pathtracing/cornellbox.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2017-04-06-webgl-pathtracing/cornellbox.png&#34; alt=&#34;コーネルボックス&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;コーネルボックス風のプリセットシーンを追加しました。
残念なことに、現在の実装ではコーネルボックスのような光源が小さくIBLができないシーンのレンダリングは苦手で、ノイズが消えるまで数分間かかります。
レンダリング方程式の cos 項に比例した重点サンプリングはしているものの、高速化の工夫をしていない純粋なパストレーシングのためです。
小さな光源しかないシーンを高速にレンダリングするためには，まだまだ課題が残っています…
（とはいえ、もちろん時間をかければスクリーンショットのように綺麗な結果になります！）&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2017-04-06-webgl-pathtracing/table.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2017-04-06-webgl-pathtracing/table.png&#34; alt=&#34;テーブル&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;箱を積み重ねたテーブルのシーンです。前回と同じシーンですがノイズが完全に無くなりました。&lt;/p&gt;

&lt;h2 id=&#34;今後やりたいこと&#34;&gt;今後やりたいこと&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;コーネルボックスのような光源が小さいシーンの収束が遅すぎるので、&lt;a href=&#34;http://rayspace.xyz/CG/contents/path_tracing.html&#34;&gt;Next Event Estimation&lt;/a&gt;をする&lt;/li&gt;
&lt;li&gt;準モンテカルロ法&lt;/li&gt;
&lt;li&gt;屈折面において、屈折時の立体角の変化による放射輝度の変化を考慮できていない点の修正&lt;/li&gt;
&lt;li&gt;箱と球体以外のプリミティブに対応させる&lt;/li&gt;
&lt;li&gt;どんなに良いGPUを使っていても、1秒間に60サンプリングに制限されてしまう仕様なので、GPU性能に合わせて単位時間あたりのサンプリング数を増減できる仕組み&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;最後に&#34;&gt;最後に&lt;/h1&gt;

&lt;p&gt;技術書典2と『Think Web』を宜しくお願いします！&lt;/p&gt;

&lt;p&gt;以下のようなテーマについて、各技術のスペシャリストが全力で執筆しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Rust+WebAssembly、Flutter などマルチプラットフォーム技術&lt;/li&gt;
&lt;li&gt;Vue.js、GopherJS、WebGL など最新フロントエンド技術の解説&lt;/li&gt;
&lt;li&gt;Google Cloud Datastore などデータベース関連技術&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;自分の章はニッチすぎると思いますが、明らかに1000円以上の量と質のあるお得な本になっていると思います！&lt;/p&gt;

&lt;p&gt;お時間がありましたら、ぜひいらしてください！&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>

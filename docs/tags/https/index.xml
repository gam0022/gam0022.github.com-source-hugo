<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>gam0022.net</title>
    <link>https://gam0022.net/tags/https/index.xml</link>
    <description>Recent content on gam0022.net</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>jp</language>
    <copyright>&amp;copy; 2016 gam0022</copyright>
    <atom:link href="/tags/https/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Let&#39;s EncryptでHTTPS対応しました</title>
      <link>https://gam0022.net/blog/2017/11/17/https-support/</link>
      <pubDate>Fri, 17 Nov 2017 10:13:23 +0900</pubDate>
      
      <guid>https://gam0022.net/blog/2017/11/17/https-support/</guid>
      <description>&lt;p&gt;当サイト（&lt;a href=&#34;https://gam0022.net/&#34;&gt;gam0022.net&lt;/a&gt;）を&lt;a href=&#34;https://letsencrypt.org/&#34;&gt;Let&amp;rsquo;s Encrypt&lt;/a&gt;でHTTPS対応しました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2017-11-15-https-support.png&#34; alt=&#34;HTTP対応&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s EncryptによるHTTPSの設定はcertbotというコマンドラインツールを利用しました。
nginxの設定変更でHTTP/2対応もできました。
どちらも驚くほど簡単で拍子抜けしました。&lt;/p&gt;

&lt;p&gt;はてなブックマークの数が0にリセットされてしまいましたが、仕方がないので諦めました。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;なぜhttps対応するのか&#34;&gt;なぜHTTPS対応するのか？&lt;/h1&gt;

&lt;p&gt;先月リリースのChrome 62からすべてのHTTPページに「Not secure」と表示されるようになりました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://japan.cnet.com/article/35100589/&#34;&gt;グーグル、HTTPページへの警告表示を強化へ&amp;ndash;10月リリース予定の「Chrome 62」から&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Qiitaも9月末にHTTPS対応をしていました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.qiita.com/post/165860481859/qiita-https&#34;&gt;QiitaをHTTPS化しました&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;当サイトはブログという形態なので、利用者が個人情報を入力することはほとんど考えられません。&lt;/p&gt;

&lt;p&gt;しかし、少なくともGoogleは常時SSLを重要視しており、主要サイトもHTTPS化を進めているみたいなので、個人的な勉強を兼ねてHTTPSの設定に挑戦しました。&lt;/p&gt;

&lt;h1 id=&#34;let-s-encryptでhttps対応&#34;&gt;Let&amp;rsquo;s EncryptでHTTPS対応&lt;/h1&gt;

&lt;p&gt;公式ページの説明通りの手順で簡単に設定できました。&lt;/p&gt;

&lt;h2 id=&#34;環境&#34;&gt;環境&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;OS: Ubuntu 16.04&lt;/li&gt;
&lt;li&gt;Webサーバ: nginx/1.10.3&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;certbotのインストール&#34;&gt;certbotのインストール&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://certbot.eff.org/#ubuntuxenial-nginx&#34;&gt;公式ページ&lt;/a&gt;の手順通りにapt-get経由でcertbotをインストールしました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get update
sudo apt-get install software-properties-common
sudo add-apt-repository ppa:certbot/certbot
sudo apt-get update
sudo apt-get install python-certbot-nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;certbotの実行&#34;&gt;certbotの実行&lt;/h2&gt;

&lt;p&gt;次のコマンドを実行すると、SSLの証明書の取得とnginxの設定の反映を自動で行ってくれます。
対話的なツールになっていて、HTTPSの設定について質問されるので、それに答えていけばOKです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo certbot --nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;事前準備&#34;&gt;事前準備&lt;/h3&gt;

&lt;p&gt;自分は事前にnginxの設定ファイルにドメイン名を明示しておきました。&lt;/p&gt;

&lt;p&gt;ドメイン名を明示すると、&lt;code&gt;sudo certbot --nginx&lt;/code&gt; でSSL化したいドメインを選択できるようになります。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/etc/nginx/sites-available/default&lt;/code&gt; の &lt;code&gt;server&lt;/code&gt; ブロック内&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;server {
    listen 80 default_server;
    listen [::]:80;
@@
-   server_name _;
+   server_name gam0022.net;
@@
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;事後確認&#34;&gt;事後確認&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;sudo certbot --nginx&lt;/code&gt; を実行すると、SSLための設定がnginxの設定ファイルに自動で追加されます。
基本的なSSLの設定に加えて、httpでアクセスした場合にhttpsにリダイレクトする設定が追加されます。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/etc/nginx/sites-available/default&lt;/code&gt; の &lt;code&gt;server&lt;/code&gt; ブロック内&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;server {
    listen 80 default_server;
    listen [::]:80;
@@
+   listen 443 ssl; # managed by Certbot
+   ssl_certificate /etc/letsencrypt/live/gam0022.net/fullchain.pem; # managed by Certbot
+   ssl_certificate_key /etc/letsencrypt/live/gam0022.net/privkey.pem; # managed by Certbot
+   include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
+   ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot
+
+
+   if ($scheme != &amp;quot;https&amp;quot;) {
+       return 301 https://$host$request_uri;
+   } # managed by Certbot
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最後にnginxを再起動すればOKです。&lt;/p&gt;

&lt;p&gt;systemdを使っているなら &lt;code&gt;systemctl restart nginx&lt;/code&gt;で再起動できます。&lt;/p&gt;

&lt;h2 id=&#34;コンテンツの修正&#34;&gt;コンテンツの修正&lt;/h2&gt;

&lt;p&gt;サーバのHTTPS対応は簡単だったのですが、&lt;a href=&#34;https://developers.google.com/web/fundamentals/security/prevent-mixed-content/what-is-mixed-content?hl=ja&#34;&gt;Mixed Content問題&lt;/a&gt;の対応はすこし面倒でした。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;最初の HTML が安全な HTTPS 接続で読み込まれ、その他のリソース（画像、動画、スタイルシート、スクリプトなど）が安全ではない HTTP 接続で読み込まれると、混合コンテンツが発生します。 これが混合コンテンツと呼ばれるのは、同じページを表示するために HTTP と HTTPS 両方のコンテンツが読み込まれているためで、最初のリクエストは HTTPS で保護されています。 最新のブラウザでは、この種のコンテンツに関する警告が表示され、このページに安全でないリソースが含まれていることがユーザーに示されます。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;基本的に&lt;code&gt;http://&lt;/code&gt;を&lt;code&gt;//&lt;/code&gt;に置換すれば対応できました（&lt;a href=&#34;https://github.com/gam0022/gam0022.net-hugo/pull/9&#34;&gt;詳細&lt;/a&gt;）。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;Let&amp;#39;s Encryptで &lt;a href=&#34;https://t.co/IrODakXG9W&#34;&gt;https://t.co/IrODakXG9W&lt;/a&gt; をhttps対応できたけど、はてなブックマークのブログパーツがhttps非対応ですべてが台無しになった &lt;a href=&#34;https://t.co/WQu7AuHvrV&#34;&gt;pic.twitter.com/WQu7AuHvrV&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ😇 (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/927552176628441088?ref_src=twsrc%5Etfw&#34;&gt;2017年11月6日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;はてなブックマークのブログパーツはHTTPSとして読み込めなかったので、プラグインを削除しました。&lt;/p&gt;

&lt;p&gt;2017/11/16現在もはてなブログはHTTPS非対応ですし、はてなのHTTPS対応は後手に回っている印象があります。
&lt;a href=&#34;http://staff.hatenablog.com/entry/2017/09/25/143000&#34;&gt;こういう記事&lt;/a&gt;もありますが、何か進展はあるのでしょうか？&lt;/p&gt;

&lt;h2 id=&#34;はてなブックマーク数の移行は断念&#34;&gt;はてなブックマーク数の移行は断念&lt;/h2&gt;

&lt;p&gt;すべての記事のURLが変わったので、はてなブックマーク数は0にリセットされました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.qiita.com/post/165860481859/qiita-https&#34;&gt;QiitaのHTTPS対応の記事&lt;/a&gt;によると、
&lt;strong&gt;有償で&lt;/strong&gt; 移行できるらしいのですが、そこまでコストをかける意味は無いと思ったので諦めました。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;また一時的にはてなブックマーク数も 0 にリセットされていますが、はてなブックマークに関しては、はてなさんに移行して頂く予定です。移行が完了するまでの間ブックマーク数が少なく表示されてしまいますが、ご理解のほどよろしくお願いいたします。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;証明書の自動更新&#34;&gt;証明書の自動更新&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s Encryptで取得したSSL証明書の有効期限はわずか90日です。&lt;/p&gt;

&lt;p&gt;crontabで毎月1日の5時にSSL証明書の自動更新するようにしました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;0 5 1 * * /usr/bin/certbot renew &amp;amp;&amp;amp; /bin/systemctl reload nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;http-2対応&#34;&gt;HTTP/2対応&lt;/h1&gt;

&lt;p&gt;HTTPSのついでにHTTP/2も対応しました。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;HTTP/2対応はあっさりできた / &lt;a href=&#34;https://t.co/IrODakXG9W&#34;&gt;https://t.co/IrODakXG9W&lt;/a&gt; supports HTTP/2. Tested by &lt;a href=&#34;https://t.co/RtMlmm7glD&#34;&gt;https://t.co/RtMlmm7glD&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/http2?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#http2&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/webperf?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#webperf&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ😇 (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/927588898850533376?ref_src=twsrc%5Etfw&#34;&gt;2017年11月6日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&#34;nginxのバージョン確認&#34;&gt;nginxのバージョン確認&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.nginx.com/blog/nginx-1-9-5/&#34;&gt;nginx/1.9.5以降からHTTP/2をサポート&lt;/a&gt;しています。&lt;/p&gt;

&lt;p&gt;何も考えずにapt-get経由でnginxをインストールしたのですが、
バージョンは1.10.3で&lt;code&gt;--with-http_v2_module&lt;/code&gt;でビルドされていたので、何もすることはありませんでした。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;nginx -V
nginx version: nginx/1.10.3 (Ubuntu)
built with OpenSSL 1.0.2g  1 Mar 2016
TLS SNI support enabled
configure arguments: --with-cc-opt=&#39;-g -O2 -fPIE -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2&#39; --with-ld-opt=&#39;-Wl,-Bsymbolic-functions -fPIE -pie -Wl,-z,relro -Wl,-z,now&#39; --prefix=/usr/share/nginx --conf-path=/etc/nginx/nginx.conf --http-log-path=/var/log/nginx/access.log --error-log-path=/var/log/nginx/error.log --lock-path=/var/lock/nginx.lock --pid-path=/run/nginx.pid --http-client-body-temp-path=/var/lib/nginx/body --http-fastcgi-temp-path=/var/lib/nginx/fastcgi --http-proxy-temp-path=/var/lib/nginx/proxy --http-scgi-temp-path=/var/lib/nginx/scgi --http-uwsgi-temp-path=/var/lib/nginx/uwsgi --with-debug --with-pcre-jit --with-ipv6 --with-http_ssl_module --with-http_stub_status_module --with-http_realip_module --with-http_auth_request_module --with-http_addition_module --with-http_dav_module --with-http_geoip_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_image_filter_module --with-http_v2_module --with-http_sub_module --with-http_xslt_module --with-stream --with-stream_ssl_module --with-mail --with-mail_ssl_module --with-threads
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;nginxの設定の変更&#34;&gt;nginxの設定の変更&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;server&lt;/code&gt; ブロック内の &lt;code&gt;listen&lt;/code&gt; ディレクティブにhttp2を足すだけでOKでした。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/etc/nginx/sites-available/default&lt;/code&gt; の &lt;code&gt;server&lt;/code&gt; ブロック内&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;server {
    listen 80 default_server;
    listen [::]:80;
@@
-   listen 443 ssl; # managed by Certbot
+   listen 443 ssl http2; # managed by Certbot
+   listen [::]:443 ssl http2;
@@
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;読み込み速度について&#34;&gt;読み込み速度について&lt;/h2&gt;

&lt;p&gt;Chromeの開発者ツールで確認しましたが、読み込み速度はHTTP/1.1から変化なしでした。&lt;/p&gt;

&lt;p&gt;ページ構成をHTTP/2用に最適化しないと効果は薄いのかもしれません。&lt;/p&gt;

&lt;h1 id=&#34;まとめ&#34;&gt;まとめ&lt;/h1&gt;

&lt;p&gt;Let&amp;rsquo;s Encrypt(certbot)でHTTPS対応は簡単にできるので、みんやなればいいと思いました。&lt;/p&gt;

&lt;p&gt;はてなのサービスのHTTPS対応が遅いので、なんとかして欲しいです。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>

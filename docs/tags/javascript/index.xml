<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>gam0022.net</title>
    <link>https://gam0022.net/tags/javascript/index.xml</link>
    <description>Recent content on gam0022.net</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>jp</language>
    <copyright>&amp;copy; 2016 gam0022</copyright>
    <atom:link href="/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>CGWORLD vol.266（2020年10月号）に「デモシーンを支えるプロシージャル技術」という記事を寄稿しました</title>
      <link>https://gam0022.net/blog/2020/09/13/cgworld-vol266/</link>
      <pubDate>Sun, 13 Sep 2020 20:00:00 +0900</pubDate>
      
      <guid>https://gam0022.net/blog/2020/09/13/cgworld-vol266/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2020-09-13-cgworld-vol266/Collage_Fotor.jpg&#34; alt=&#34;CGWORLD vol.266（2020年10月号）に「デモシーンを支えるプロシージャル技術」という記事を寄稿しました&#34; /&gt;&lt;/p&gt;

&lt;p&gt;9/10（木）発売のCGWORLD vol.266（2020年10月号）に「デモシーンを支えるプロシージャル技術」という記事を寄稿しました。&lt;/p&gt;

&lt;p&gt;デモシーンの魅力や、64KB制限で映像作品を創るための3Dモデルやテクスチャのプロシージャル生成について解説しています。&lt;/p&gt;

&lt;p&gt;この記事をきっかけにCGWORLD読者の方々にもデモシーンに興味をもっていただき、国内のデモシーンが盛り上がっていくことを願っています。&lt;/p&gt;

&lt;p&gt;もちろん自分の活動を知っている方々もお手に取っていただければとても嬉しいです！&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;9/10（木）発売のCGWORLD vol.266（2020年10月号）に「デモシーンを支えるプロシージャル技術」という記事を寄稿しました。&lt;br&gt;&lt;br&gt;デモシーンの魅力や、64KB制限で映像作品を創るための3Dモデルやテクスチャのプロシージャル生成について解説しています。&lt;a href=&#34;https://t.co/BPf1txlSxU&#34;&gt;https://t.co/BPf1txlSxU&lt;/a&gt;&lt;a href=&#34;https://twitter.com/hashtag/CGWjp?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#CGWjp&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/demoscene?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#demoscene&lt;/a&gt; &lt;a href=&#34;https://t.co/XXpCh1xiFw&#34;&gt;pic.twitter.com/XXpCh1xiFw&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ #CEDEC2020 9/4登壇, CGWORLD 10月号 (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1301514617588518915?ref_src=twsrc%5Etfw&#34;&gt;September 3, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;購入方法&#34;&gt;購入方法&lt;/h1&gt;

&lt;p&gt;Amazonのアフェリエイトリンクを貼っておきます。&lt;/p&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=gam00220c-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B08FP5NM5P&amp;linkId=8ed32da93c5253b64ba074583462b34a&#34;&gt;&lt;/iframe&gt;

&lt;h1 id=&#34;感想&#34;&gt;感想&lt;/h1&gt;

&lt;p&gt;Twitter上の反響を認知している範囲でメモしておきます。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;すごい、、表紙に「デモシーン」の文字があるぅ、、！&lt;a href=&#34;https://twitter.com/hashtag/CGWjp?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#CGWjp&lt;/a&gt;&lt;/p&gt;&amp;mdash; Setsuko (@setsuko_h) &lt;a href=&#34;https://twitter.com/setsuko_h/status/1303997649582874625?ref_src=twsrc%5Etfw&#34;&gt;September 10, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;CGWORLD vol.266「デモシーンを支えるプロシージャル技術」を買ってきて読んだ。ディファードレンダリングか。まさに俺が手を付けようとしてるとこだね。これとエフェクトを何とかしないと勝負にはならないな。&lt;/p&gt;&amp;mdash; gaziya (@gaziya5) &lt;a href=&#34;https://twitter.com/gaziya5/status/1303907439134220288?ref_src=twsrc%5Etfw&#34;&gt;September 10, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;がむさん…！ &lt;a href=&#34;https://t.co/0SV02Jq91M&#34;&gt;pic.twitter.com/0SV02Jq91M&lt;/a&gt;&lt;/p&gt;&amp;mdash; さだきち : sadakkey (@sadakkey) &lt;a href=&#34;https://twitter.com/sadakkey/status/1304006171674640386?ref_src=twsrc%5Etfw&#34;&gt;September 10, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h1 id=&#34;余談&#34;&gt;余談&lt;/h1&gt;

&lt;p&gt;ついに商業誌デビュー！と思ったら、よく考えたら2007年にWindows100%のフリーゲーム紹介コーナーに自作ゲームがちょっとだけ掲載されたのを思い出しました（当時は中学生）。&lt;/p&gt;

&lt;p&gt;今回は4ページしっかりと担当できましたし、CGWORLDという映像業界において圧倒的な知名度のある雑誌に寄稿する機会をいただけて、本当に嬉しいです。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Revision2020 PC 64K Intro 優勝作品『RE: SIMULATED』の技術解説</title>
      <link>https://gam0022.net/blog/2020/04/30/revision2020/</link>
      <pubDate>Thu, 30 Apr 2020 12:00:00 +0900</pubDate>
      
      <guid>https://gam0022.net/blog/2020/04/30/revision2020/</guid>
      <description>&lt;p&gt;4月10日～4月13日に世界最大のデモパーティ&lt;a href=&#34;https://2020.revision-party.net/start&#34;&gt;Revision 2020&lt;/a&gt;に参加しました。&lt;/p&gt;

&lt;p&gt;Revision 2020内で開催されたコンペのうち、&lt;a href=&#34;https://2020.revision-party.net/competitions/pc-competitions&#34;&gt;PC 64K Intro&lt;/a&gt;という64KBの容量制約のある部門で『RE: SIMULATED by gam0022 &amp;amp; sadakkey』という作品を発表しました。&lt;/p&gt;

&lt;p&gt;Tokyo Demo Fest 2018に続き、私（&lt;a href=&#34;https://twitter.com/gam0022&#34;&gt;@gam0022&lt;/a&gt;）が映像を、さだきちさん（&lt;a href=&#34;https://twitter.com/sadakkey&#34;&gt;@sadakkey&lt;/a&gt;）が音楽を制作しました。&lt;/p&gt;

&lt;p&gt;……なんと、本作品が参加者投票により1位に選ばれました！
日本人のチームがPC 64K Intro部門で優勝するのは Revision 史上初です。とても嬉しいです！&lt;/p&gt;

&lt;p&gt;本記事では、技術解説をメインに、『RE: SIMULATED by gam0022 &amp;amp; sadakkey』を紹介したいと思います。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2020-04-19-revision2020/resimulated-collage.jpg&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2020-04-19-revision2020/resimulated-collage.jpg&#34; alt=&#34;resimulated-collage&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;作品へのリンク&#34;&gt;作品へのリンク&lt;/h1&gt;

&lt;p&gt;WebGLとWebAudioによる64K Introなので、最新のChromeと高性能なGPUがあれば、ブラウザ上で動作します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gam0022.net/webgl/64k-intro_resimulated.html&#34;&gt;64KB HTML version&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://neort.io/art/bqa4pgs3p9f6qoqnmujg&#34;&gt;NEORT version&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;高スペックのPCを持っていない方は、YouTubeの動画をご覧ください。&lt;/p&gt;

&lt;p&gt;フラクタルをつかった映像のビットレートの高い作品ですが、4K解像度を選ぶことである程度は綺麗な状態で見れます。&lt;/p&gt;

&lt;div class=&#34;movie-wrap&#34;&gt;
&lt;iframe width=&#34;1920&#34; height=&#34;1080&#34; src=&#34;https://www.youtube.com/embed/tirAdWbceak&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;こちらはpouet（デモシーンのコミュニティサイト）のリンクです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.pouet.net/prod.php?which=85260&#34;&gt;RE: SIMULATED by Gam0022 &amp;amp; Sadakkey :: pouët.net&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;技術解説&#34;&gt;技術解説&lt;/h1&gt;

&lt;p&gt;ソースコードはすべてGitHubに公開しているので、興味がある方はぜひ見てください。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/gam0022/resimulated&#34;&gt;gam0022/resimulated: 1st place at Revision 2020 (PC 64K Intro)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;サウンド編についてはさだきちさんが解説されています。あわせてご覧ください！&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.klab.com/jp/blog/creative/2020/revision-2020-pc-64k-intro.html&#34;&gt;Revision 2020 のPC 64K INTRO 優勝作品のサウンドについて&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;キーワードとしては、以下の技術が使われています。&lt;/p&gt;

&lt;p&gt;TypeScript, WebGL, WebAudio, webpack, pnginator.rb, Raymarching, GLSL Sound&lt;/p&gt;

&lt;h2 id=&#34;シンプルなwebglエンジン-chromatiq&#34;&gt;シンプルなWebGLエンジン『Chromatiq』&lt;/h2&gt;

&lt;p&gt;64KBの容量制約があるため、Unityやthree.jsといった既存のゲームエンジンやフレームワークを利用せずに、描画用のWebGLエンジンと制作用のツール（エディタ機能）を自作する必要がありました。&lt;/p&gt;

&lt;p&gt;OpenGLやDirectXを使わずに、WebGLを選択した理由は以下です。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;WebGLでブラウザ上で動かせれば、手元のPCで動かしてもらえる可能性が高いと考えた

&lt;ul&gt;
&lt;li&gt;自分の作品は映像のビットレートが高く、動画だと綺麗にならない&lt;/li&gt;
&lt;li&gt;手元のPCで実行して綺麗な状態で見てもらいたい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Webフロントエンドの技術をキャッチアップしたかった&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;そこで、64K Intro向けに&lt;strong&gt;ファイルサイズの最小化を目指したシンプルなWebGLエンジン『Chromatiq』&lt;/strong&gt;を開発しました。&lt;/p&gt;

&lt;p&gt;WebGLエンジンとは言うものの、本当にシンプルで最小限な機能しか &amp;ldquo;現段階では&amp;rdquo; 実装していません。&lt;/p&gt;

&lt;p&gt;なるべく作品に依存した機能は用意したくなかったので、汎用的な設計になっています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;マルチパスのImageShaderによるレンダリング（viewport square）&lt;/li&gt;
&lt;li&gt;ビルドインのBloomのポストエフェクト

&lt;ul&gt;
&lt;li&gt;どんな作品でも利用できそうなので、これだけビルドインにした&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;TypeScriptからuniformをアニメーションするためのインターフェース&lt;/li&gt;
&lt;li&gt;Shadertoyと互換性のあるGLSL Sound&lt;/li&gt;
&lt;li&gt;オーディオファイルの再生（mp3 / ogg）

&lt;ul&gt;
&lt;li&gt;DAWによる音楽の再生用の機能&lt;/li&gt;
&lt;li&gt;今回は先にDAWで作曲し、後からGLSLに移植する作戦にした&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;フォントをレンダリングするためのcanvasからのテクスチャ生成&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;イメージとしてはGLSLエディタを排除したスタンドアローンなShadertoyが近いかもしれません。&lt;/p&gt;

&lt;p&gt;ソースコードは&lt;a href=&#34;https://github.com/gam0022/resimulated/blob/master/src/chromatiq.ts&#34;&gt;こちら&lt;/a&gt;です。単一ファイルのTypeScriptで実装しました。&lt;/p&gt;

&lt;p&gt;圧縮後のコードサイズを気にして、変な感じの実装になっているので、微妙に読みづらいかもしれません。&lt;/p&gt;

&lt;p&gt;例えば、フィールド参照の this を頭につけるとコードサイズが増えるため、コンストラクタの中で動的にインスタンスメソッドを定義することで、this の利用を最小限にしたり、
クラス外から値を参照・設定する必要があるデータのみ、フィールドとして定義する方針とています。enumもコードサイズが増えるので禁止にしました。&lt;/p&gt;

&lt;p&gt;製作の終盤から容量が余裕そうなことが判明したので、途中からファイルサイズを考慮するのを止め、mini化の中途半端感は否めないです。
このあたりは、次のデモに向けて改良していきたいと考えています。&lt;/p&gt;

&lt;p&gt;uniform名は基本的にはShadertoyと一致させているのですが、テクスチャのサンプラーはShadertoyを踏襲せずに、直前のパスを参照する &lt;code&gt;iPrevPass&lt;/code&gt; を定義しました。
これによってGLSLを書き換えずにエフェクトの順番を入れ替えたり、気軽にパスを増やしてエフェクトをチェインしやすくしました。
このあたりの仕様も、作品の需要に応じて変更していく可能性は高いです。&lt;/p&gt;

&lt;h2 id=&#34;ファイル圧縮のためのビルドプロセス&#34;&gt;ファイル圧縮のためのビルドプロセス&lt;/h2&gt;

&lt;p&gt;圧縮には&lt;a href=&#34;https://webpack.js.org/&#34;&gt;webpack&lt;/a&gt;と&lt;a href=&#34;https://gist.github.com/gasman/2560551&#34;&gt;pnginator.rb&lt;/a&gt;を利用しています。&lt;/p&gt;

&lt;p&gt;ビルドプロセスを図にしました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2020-04-19-revision2020/build-process.svg&#34; alt=&#34;build-process&#34; /&gt;&lt;/p&gt;

&lt;p&gt;webpackですべてのファイルをbundle.jsという単一のJavaScriptに固めてから、pnginator.rbで自己解凍形式のPNGにしています。&lt;/p&gt;

&lt;p&gt;TypeScriptのminifyは完全にwebpack任せです。&lt;/p&gt;

&lt;p&gt;PNGでは画像データをzlib圧縮するため、画像データではなくても、例えば今回のようなプログラムのソースコードでちゃんと圧縮できます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://qiita.com/gam0022/items/364c7f76f2787e385161&#34;&gt;GLSLのminifyも検証&lt;/a&gt;はしていて、webpackのLoaderを開発する予定もあったのですが、容量が余裕だったのでGLSLの圧縮はPNG（zlib）だけになりました。&lt;/p&gt;

&lt;p&gt;また、開発用にしか必要ないコードの削除もwebpackの&lt;a href=&#34;https://webpack.js.org/plugins/define-plugin/&#34;&gt;define-plugin&lt;/a&gt;で実現できました。&lt;/p&gt;

&lt;p&gt;webpackとpnginator.rbを組み合わせる手法は、&lt;a href=&#34;https://twitter.com/FMS_Cat&#34;&gt;FMS_Catさん&lt;/a&gt;の&lt;a href=&#34;https://github.com/FMS-Cat/until/&#34;&gt;Until&lt;/a&gt;を参考にしました。&lt;/p&gt;

&lt;p&gt;当初はnode.jsでGLSLのホットリロード機能付きのWebサーバを開発しようと技術検証していたのですが、
要件は&lt;a href=&#34;https://github.com/webpack/webpack-dev-server&#34;&gt;webpack-dev-server&lt;/a&gt;ですべて実現可能だったので、webpackを採用しました。&lt;/p&gt;

&lt;p&gt;PRごとに圧縮後のファイルサイズを確認するようにしたら、圧縮後のファイルサイズについて知見が貯まりました（例）&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;コードの自動フォーマットをかけると、圧縮効率が上がってファイルサイズが減る&lt;/li&gt;
&lt;li&gt;コードをコピペすると圧縮効率が高くなるので、実は無理にコードを共通化する意味は実は薄い&lt;/li&gt;
&lt;li&gt;似たよな構造になるようにコードを意識すると圧縮効率が良くなる&lt;/li&gt;
&lt;li&gt;関数の順番を入れ替えただけで微妙にサイズが減ったりと謎が多い&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;制作用のエディタ機能の紹介&#34;&gt;制作用のエディタ機能の紹介&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2020-04-19-revision2020/chromatiq-editor.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2020-04-19-revision2020/chromatiq-editor.png&#34; alt=&#34;chromatiq-editor&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;製作のイテレーションを高速化するため、必要なエディタ機能は一通り実装しました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;再生位置のシーク機能

&lt;ul&gt;
&lt;li&gt;再生・一時停止・停止・フレームのコマ送り・時間の表示単位の秒とビートの切り替え&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;GLSLやTypeScriptのホットリロード機能&lt;/li&gt;
&lt;li&gt;uniformのパラメータのインスペクタ&lt;/li&gt;
&lt;li&gt;カメラの自由移動&lt;/li&gt;
&lt;li&gt;デバッグ用に特定のパスの表示&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;エディタ機能は容量制約に影響しないので、既存のライブラリを積極的に利用しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ボタン用のアイコンのために、&lt;a href=&#34;https://fontawesome.com/&#34;&gt;fontawesome&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;uniformのパラメータのインスペクタのために、&lt;a href=&#34;https://github.com/dataarts/dat.gui&#34;&gt;dat.gui&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;カメラの自由移動のために、&lt;a href=&#34;https://threejs.org/&#34;&gt;three.js&lt;/a&gt;の&lt;a href=&#34;https://threejs.org/docs/#examples/en/controls/OrbitControls&#34;&gt;OrbitControls&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/gam0022/resimulated#1-get-started&#34;&gt;リポジトリ&lt;/a&gt;をcloneして、 &lt;code&gt;npm run start&lt;/code&gt; すれば、エディタ機能が使えますので、興味がある人はお試しください。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone git@github.com:gam0022/resimulated.git
cd resimulated
npm install

# 制作用のエディタを起動
npm run start

# 提出用のビルド（dist\resimulated.html）を生成
npm run build
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;uniformのパラメータのインスペクタ&#34;&gt;uniformのパラメータのインスペクタ&lt;/h3&gt;

&lt;p&gt;GLSL上で以下のようなuniformを宣言するだけで、そのままインスペクタに表示されるような仕組みを実装しました。&lt;/p&gt;

&lt;p&gt;コメントでは左から順に &lt;code&gt;初期値 min max カテゴリー名&lt;/code&gt; を指定しています。初期値は必須ですが、それ以外は省略可能としました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;uniform float gEmissiveIntensity;     // 6.0 0 20 emissive
uniform float gEmissiveSpeed;         // 1 0 2
uniform float gEmissiveHue;           // 0.33947042613522904 0 1
uniform float gEmissiveHueShiftBeat;  // 0 0 1
uniform float gEmissiveHueShiftZ;     // 0 0 1
uniform float gEmissiveHueShiftXY;    // 0 0 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;uniform宣言をすると、自動的にインスペクタにパラメータが追加されます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2020-04-19-revision2020/chromatiq-editor-emissive.png&#34; alt=&#34;chromatiq-editor-emissive&#34; /&gt;&lt;/p&gt;

&lt;p&gt;私の作品では、フラクタルやIFSといったパラメータの細かな調整が重要になる表現を多用しているため、気軽にパラメータを増やして、気軽に値を調整できるようにしました。&lt;/p&gt;

&lt;p&gt;値の当たりをつけた後に、パラメータのアニメーションを&lt;a href=&#34;https://github.com/gam0022/resimulated/blob/master/src/index.common.ts#L142-L569&#34;&gt;TypeScriptのコード&lt;/a&gt;に落とし込むワークフローにしました。&lt;/p&gt;

&lt;p&gt;これは、インスペクタを動かしている様子の動画です。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;三谷先生に便乗して、MengerSponge をカットしてみました。&lt;br&gt;断面が星みたいになって面白いですね⭐️ &lt;a href=&#34;https://t.co/mCqFnfbjBF&#34;&gt;https://t.co/mCqFnfbjBF&lt;/a&gt; &lt;a href=&#34;https://t.co/QF73xfFL1y&#34;&gt;pic.twitter.com/QF73xfFL1y&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ / encoder killer (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1253296266424930304?ref_src=twsrc%5Etfw&#34;&gt;April 23, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h3 id=&#34;動画の保存機能&#34;&gt;動画の保存機能&lt;/h3&gt;

&lt;p&gt;処理落ちなしに4K解像度で動画を出力したかったので、以下の機能を実装しました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;映像の連番PNG保存機能&lt;/li&gt;
&lt;li&gt;サウンドの wav 保存機能&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;.png と .wav を ffmpeg で .mp4 に変換してYouTubeにアップロードしました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ffmpeg.exe -r 60 -i chromatiq%04d.png -i chromatiq.wav -c:v libx264 -preset slow -profile:v high -coder 1 -pix_fmt yuv420p -movflags +faststart -g 30 -bf 2 -c:a aac -b:a 384k -profile:a aac_low -b:v 68M chromatiq_68M.mp4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;YouTube用のffmpegのエンコード設定については、以下を参考にしました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://support.google.com/youtube/answer/1722171?hl=ja&#34;&gt;アップロードする動画におすすめのエンコード設定&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;映像ビットレート 2160p（4k）53～68 Mbps&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gist.github.com/mikoim/27e4e0dc64e384adbcb91ff10a2d3678&#34;&gt;YouTube recommended encoding settings on ffmpeg (+ libx264)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/sasaki_0222/status/1248910333835530241&#34;&gt;解像度とビットレードについて by sasaki_0222&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;映像について&#34;&gt;映像について&lt;/h2&gt;

&lt;p&gt;映像の3D描画は基本的に全部レイマーチングです。&lt;/p&gt;

&lt;p&gt;前半のサイバーなシーンはMandelboxをベースにしました。&lt;/p&gt;

&lt;p&gt;後半の宇宙空間とグリーティングのシーンでは、宇宙空間はレイマーチング、惑星の上のグリーティングの文字はAABBとして解析的に衝突判定をするハイブリッドなレイトレをしています。&lt;/p&gt;

&lt;p&gt;パスの構成は、最終的にこうなりました。&lt;/p&gt;

&lt;p&gt;1パス目と2パス目を分離したのは、シェーダーのコンパイル時間の短縮のためです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1パス目: 前半のシーンのレイマーチング&lt;/li&gt;
&lt;li&gt;2パス目: 後半のシーンのレイマーチング&lt;/li&gt;
&lt;li&gt;3パス目: テキストの描画&lt;/li&gt;
&lt;li&gt;4～13パス目: Bloomのポストエフェクト&lt;/li&gt;
&lt;li&gt;14パス目: ポストエフェクトとトーンマッピング&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;惑星のバリエーション生成の仕組み&#34;&gt;惑星のバリエーション生成の仕組み&lt;/h3&gt;

&lt;p&gt;後半のグリーティングでは、自分が特に尊敬しているデモグループをイメージした惑星が合計14パターン登場します。&lt;/p&gt;

&lt;p&gt;様々なバリエーションの惑星を効率的に生成するための仕組みを実装しました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;地形の高さマップの自動生成&lt;/li&gt;
&lt;li&gt;テクスチャの色のグラデーションの自動生成&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;地形の高さマップの自動生成&#34;&gt;地形の高さマップの自動生成&lt;/h4&gt;

&lt;p&gt;2DのValue Noiseを重ね合わせたfbm（Fractal Brownian Motion）で地形の高さマップを生成しました。&lt;/p&gt;

&lt;p&gt;さらに、fbm関数をネストして（fbmのUV計算にfbmをつかって）、歪んだような不思議な雰囲気の地形も生成できるようにしました。&lt;/p&gt;

&lt;p&gt;左がfbmのネストよる歪みなしで、右がfbmのネストによる歪みありです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2020-04-19-revision2020/fbm-shift.jpg&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2020-04-19-revision2020/fbm-shift.jpg&#34; alt=&#34;fbm-shift&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;fbmの各種パラメーター（振幅や周波数、Y方向のスケール、歪み用のfbmの強度）は、乱数ではなく、配列で直接指定することで、イメージ通りの結果に調整できるようにしました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;// fbmAmp, fbmFreq, fbmYScale, fbmShift
vec4[PLANETS_PAT_MAX * PLANETS_NUM_MAX] planetFbmParams = vec4[](
    // MIX_A
    vec4(0.3, 17.0, 1.0, 0.01), vec4(0.05, 10.0, 1.05, 0.0), vec4(0.05, 10.0, 1.05, 0.01),
    vec4(0.05, 10.0, 4.05, 0.02), vec4(0.05, 10.0, 2.05, 00.1), vec4(0.0),
    // MIX_B
    vec4(0.0, 10.0, 1.0, 0.2), vec4(0.0, 10.0, 1.0, 0.01), vec4(0.0, 10.0, 1.0, 0.03),
    vec4(0.05, 10.0, 1.0, 00.2), vec4(0.06, 10.0, 1.0, 0.03), vec4(0.05, 10.0, 1.0, 0.03));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このようなfbmをネストしたシンプルな関数で高さマップを生成しました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;// 惑星の高さマップ（height map）を生成する関数
// pは球体のUV, id は惑星のID
float hPlanetsMix(vec2 p, int id) {
    p.y *= planetFbmParams[id].z;
    return fbm(p + 
        planetFbmParams[id].w * fbm(p, 4.0 * planetFbmParams[id].y), planetFbmParams[id].y);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;テクスチャの色のグラデーションの自動生成&#34;&gt;テクスチャの色のグラデーションの自動生成&lt;/h4&gt;

&lt;p&gt;iqのColor Palettesを使いました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://iquilezles.org/www/articles/palettes/palettes.htm&#34;&gt;Color Palettes - Inigo Quilez :: fractals, computer graphics&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;vec3 pal(in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d) {
    return a + b * cos(TAU * (c * t + d));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;pal 関数の使い方は簡単で、&lt;code&gt;a, b, c, d&lt;/code&gt; を任意に指定すれば、&lt;code&gt;t&lt;/code&gt; を変化することでグラデーションを生成できます。&lt;/p&gt;

&lt;p&gt;今回は &lt;code&gt;a, b, c&lt;/code&gt; は定数、&lt;code&gt;d&lt;/code&gt; は惑星ごとに乱数で決定しました。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;a, b, c&lt;/code&gt; や乱数のseed値はインスペクタで値を調整しながら、イメージ通りのグラデーションが生成されるまで試行錯誤しました。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;t&lt;/code&gt; は地形の高さマップにマッピングしました。&lt;/p&gt;

&lt;h3 id=&#34;無数の小惑星のランダムな配置&#34;&gt;無数の小惑星のランダムな配置&lt;/h3&gt;

&lt;p&gt;宇宙空間がスカスカすぎて寂しかったので、無数の小惑星をランダムに配置しようとしたら、予想外に苦戦しました。&lt;/p&gt;

&lt;p&gt;レイマーチングだと空間をmodすることで物体を無限に複製することは簡単なのですが、それでは規則的な配置にしかならず、かなり不自然になってしまいます。&lt;/p&gt;

&lt;p&gt;gazさんのシェーダーを参考にして、空間をgridに分割して、gridごとに乱数を生成して、乱数で確率的に物体を間引く手法を採用しました。&lt;/p&gt;

&lt;p&gt;また、アーティファクトの回避するために、rayの長さを制限する工夫も必要でした。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;もう忘れてるよ。自分で読み解いてしまったじゃないか。xy平面を通常のmod()で分割。z軸の奥行のみgridをseedに乱数を使い間引きしてる。z軸だけ空間移動のスピード、回転を変えてる。アーティファクト対策で、min(map(p), 1.0)を使いrayの長さを制限。effectにビルボードを使い発光を演出。&lt;/p&gt;&amp;mdash; gaz (@gaziya5) &lt;a href=&#34;https://twitter.com/gaziya5/status/1247671912521596928?ref_src=twsrc%5Etfw&#34;&gt;April 7, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;最終的に、ランダムな位置と大きさをもつ小惑星の距離関数はこうなりました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;float dGomi(vec3 p) {
    // アーティファクト対策のための固定長の距離
    float d = 1.0;

    // グリット（4m四方の立方体）の計算
    vec3 g = vec3(floor(p / 4.0));

    // 座標の繰り返し
    p = mod(p, 4.0) - 2.0;

    // 確率 rate に応じて球体を配置
    vec3 rand = hash33(g);
    float rate = (gPlanetsId != PLANETS_EARTH) ? 0.08 : 0.01;
    if (rand.x &amp;lt; rate) {
        p -= (rand - 0.5);
        d = sdSphere(p, 0.1 * rand.y);
    }

    // fbmで表面の凹凸のディテールを加える
    // レイが接近したときだけに計算するのは、LODによる負荷対策
    // fbmの計算はかなり高負荷なので、LODをしないと激重になる
    if (d &amp;lt; 0.5) {
        vec2 uv = uvSphere(normalize(p));
        uv.x += dot(rand, vec3(1.0));
        d -= remapTo(rand.z, 0.01, 0.08) * fbm(uv, 5.0);
    }

    return d;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;音楽について&#34;&gt;音楽について&lt;/h2&gt;

&lt;p&gt;基盤となるGLSLサウンド用のシーケンサーの実装は私が、それ以外のオシレーターの関数やメロディの実装はさだきちさんが担当しました。&lt;/p&gt;

&lt;p&gt;音楽もやはり容量制約のためにGLSLで実装する必要があり、さだきちさんにはコーディングによる作曲をお願いしました。
さだきちさんはプログラミングもGLSLも未経験だったので、それらの習得から始まりました。
かなり無茶なお願いだったにも関わらず、かっこいいトランスミュージックを提供してくれたさだきちさんには感謝しかありません。ありがとうございます！&lt;/p&gt;

&lt;p&gt;私が担当したGLSLサウンド用のシーケンサーはGLSLサウンド上で実装されており、GLSLサウンドを鳴らす仕組みについては、AMAGIさん（&lt;a href=&#34;https://twitter.com/amagitakayosi&#34;&gt;@amagitakayosi&lt;/a&gt;）の記事を参考に、Shadertoy互換のGLSLサウンドの再生機能を実装しました。ありがとうございます！&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.amagi.dev/entry/veda-sound&#34;&gt;VEDA 2.4: GLSLで音楽を演奏できるようになったぞ！！！ - マルシテイア&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;サウンド用のシーケンサーの利用例&#34;&gt;サウンド用のシーケンサーの利用例&lt;/h3&gt;

&lt;p&gt;これはベースのパートの波形を生成するGLSLの関数です。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;vec2 bass1(float beat, float time) {
// 1つのパターンのビート数
#define BASS1_BEAT_LEN 8

// パターンの種類
#define BASS1_DEV_PAT 10

// 楽曲全体の長さのパターン数
#define BASS1_DEV_LEN 32

    // パターンの定義
    int[BASS1_BEAT_LEN * NOTE_DIV * BASS1_DEV_PAT] notes = int[](
        // パターン0
        F(0), F(33), E(0, 33), S(0, 33, 0, 33),
        F(0), F(33), E(0, 33), S(0, 33, 0, 33),

        // パターン1
        E(33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33),
        E(33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33),

        // パターン2
        E(33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33),
        E(29, 29), S(0, 29, 29, 29), S(0, 31, 31, 31), S(48, 47, 43, 40),

        // パターン3
        E(33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33),
        E(33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33), S(0, 34, 34, 34),

        // パターン4
        E(33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33),
        E(33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33), S(0, 36, 36, 36),

        // パターン5
        E(33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33),
        E(33, 33), S(0, 33, 33, 33), S(0, 34, 34, 34), S(0, 36, 36, 36),

        // パターン6
        E(33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33),
        E(33, 33), S(0, 33, 33, 33), S(0, 43, 43, 43), S(0, 55, 57, 69),

        // パターン7
        E(29, 29), S(0, 29, 29, 29), S(0, 29, 29, 29), S(0, 31, 33, 45),
        E(29, 29), S(0, 29, 29, 29), S(0, 29, 29, 29), S(0, 31, 31, 31),

        // パターン8
        E(33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33),
        E(33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33), S(0, 43, 45, 57),

        // パターン9
        E(29, 29), S(0, 29, 29, 29), S(0, 29, 29, 29), S(0, 31, 33, 45),
        E(29, 29), S(0, 29, 29, 29), S(0, 31, 31, 31), S(0, 31, 31, 31));

    // パターンの進行
    int[BASS1_DEV_LEN / DEV_PACK] development = int[](
        D(0, 0, 0, 0, 0, 0, 0, 0), D(1, 1, 1, 2, 3, 4, 5, 6),
        D(7, 0, 7, 8, 7, 0, 9, 0), D(0, 0, 0, 0, 0, 0, 0, 0));

    SEQUENCER(beat, time, BASS1_BEAT_LEN, BASS1_DEV_PAT, BASS1_DEV_LEN,
        notes, development, bass)

    return ret;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;パターン（2小節分のノートナンバーの並び）の定義と進行は、それぞれ配列で指定できるようにしています。&lt;/p&gt;

&lt;p&gt;音の長さは下記の4種類に対応しました。
ノートナンバーに0を指定すれば、同じ長さの休符になります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;O: 全音符&lt;/li&gt;
&lt;li&gt;F: 4分音符&lt;/li&gt;
&lt;li&gt;E: 8分音符&lt;/li&gt;
&lt;li&gt;S: 16分音符&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;GLSLのコンスタントバッファのサイズには上限があり、サウンド用のシェーダー全体で要素数が4096個まででしか配列を宣言できません。&lt;/p&gt;

&lt;p&gt;そこで、&lt;code&gt;O, F, E, S&lt;/code&gt; を関数マクロとし、16分音符を最小単位として各音符を16bit（うち、ノートナンバーが8bit、音の長さが8bit）ずつパッキングしています。
GLSLのintは32bitなので、int配列の1要素に16分音符なら2つ、8分音符なら1つ入るような設計です。&lt;/p&gt;

&lt;p&gt;また、パターン進行の &lt;code&gt;D&lt;/code&gt; もマクロにしていて、要素数の節約のために4bitずつパッキングをしています。&lt;/p&gt;

&lt;p&gt;続いて、&lt;code&gt;bass&lt;/code&gt; は時間とノートナンバーを入力として、波形を出力するオシレーターのGLSL関数です。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;SEQUENCER&lt;/code&gt; は、時間、パターンの定義の配列、パターンの進行の配列、オシレーターの関数を指定することで、パートごとの波形を生成して &lt;code&gt;vec2 ret&lt;/code&gt; に代入する関数マクロです。
GLSLでは関数を引数とするような高階関数は実現できませんが、関数マクロで擬似的に実現しました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#define SEQUENCER(beat, time, beatLen, devPat, devLen, notes, development, toneFunc)  \
    int indexOffset = development[int(                                                \
        mod(beat / float(beatLen * DEV_PACK), float(devLen / DEV_PACK)))];            \
    indexOffset =                                                                     \
        (indexOffset &amp;gt;&amp;gt; (4 * int(mod(beat / float(beatLen), float(DEV_PACK))))) &amp;amp; 15; \
    indexOffset *= beatLen * NOTE_VDIV;                                               \
                                                                                      \
    for (int i = 0; i &amp;lt; beatLen * NOTE_VDIV;) {                                       \
        int index = i + indexOffset;                                                  \
        int shift = (index % 2 == 1) ? 16 : 0;                                        \
        int div = ((notes[index &amp;gt;&amp;gt; 1] &amp;gt;&amp;gt; shift) &amp;gt;&amp;gt; 8) &amp;amp; 255;                          \
        int len = NOTE_VDIV * NOTE_VDIV / div;                                        \
        for (int j = 0; j &amp;lt; len; j++) {                                               \
            tmpIndexes[i + j] = i;                                                    \
        }                                                                             \
        i += len;                                                                     \
    }                                                                                 \
                                                                                      \
    float indexFloat = mod(beat * float(NOTE_VDIV), float(beatLen * NOTE_VDIV));      \
    int index = int(indexFloat);                                                      \
    int shift = (index % 2 == 1) ? 16 : 0;                                            \
    int note = (notes[(index + indexOffset) &amp;gt;&amp;gt; 1] &amp;gt;&amp;gt; shift) &amp;amp; 255;                    \
    float localTime =                                                                 \
        beatToTime((indexFloat - float(tmpIndexes[index])) / float(NOTE_VDIV));       \
    float amp = (note == 0) ? 0.0 : 1.0;                                              \
    vec2 ret = vec2(toneFunc(float(note), localTime) * amp);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;パターンの定義・進行のマクロはこちらです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;// 1ビートを最大何分割するか。16分音符に対応するなら4
#define NOTE_VDIV 4

// 1ビートのpackingを考慮した分割数。32bitのintに16bitずつ詰めているので
// 4 / (32 / 16) = 2
#define NOTE_DIV 2

// 展開用の配列のpacking数。32bitのintに4bitずつ詰めているので
// 32 / 4 = 8
#define DEV_PACK 8

#define MAX_BEAT_LEN 8
int[MAX_BEAT_LEN * NOTE_VDIV] tmpIndexes;

#define O(a)                                                                      \
    (a | 1 &amp;lt;&amp;lt; 8) | ((a | 1 &amp;lt;&amp;lt; 8) &amp;lt;&amp;lt; 16), (a | 1 &amp;lt;&amp;lt; 8) | ((a | 1 &amp;lt;&amp;lt; 8) &amp;lt;&amp;lt; 16),     \
        (a | 1 &amp;lt;&amp;lt; 8) | ((a | 1 &amp;lt;&amp;lt; 8) &amp;lt;&amp;lt; 16), (a | 1 &amp;lt;&amp;lt; 8) | ((a | 1 &amp;lt;&amp;lt; 8) &amp;lt;&amp;lt; 16), \
        (a | 1 &amp;lt;&amp;lt; 8) | ((a | 1 &amp;lt;&amp;lt; 8) &amp;lt;&amp;lt; 16), (a | 1 &amp;lt;&amp;lt; 8) | ((a | 1 &amp;lt;&amp;lt; 8) &amp;lt;&amp;lt; 16), \
        (a | 1 &amp;lt;&amp;lt; 8) | ((a | 1 &amp;lt;&amp;lt; 8) &amp;lt;&amp;lt; 16), (a | 1 &amp;lt;&amp;lt; 8) | ((a | 1 &amp;lt;&amp;lt; 8) &amp;lt;&amp;lt; 16)
#define F(a) (a | 4 &amp;lt;&amp;lt; 8) | ((a | 4 &amp;lt;&amp;lt; 8) &amp;lt;&amp;lt; 16), (a | 4 &amp;lt;&amp;lt; 8) | ((a | 4 &amp;lt;&amp;lt; 8) &amp;lt;&amp;lt; 16)
#define E(a, b) (a | 8 &amp;lt;&amp;lt; 8) | ((a | 8 &amp;lt;&amp;lt; 8) &amp;lt;&amp;lt; 16), (b | 8 &amp;lt;&amp;lt; 8) | ((b | 8 &amp;lt;&amp;lt; 8) &amp;lt;&amp;lt; 16)
#define S(a, b, c, d) \
    (a | 16 &amp;lt;&amp;lt; 8) | ((b | 16 &amp;lt;&amp;lt; 8) &amp;lt;&amp;lt; 16), (c | 16 &amp;lt;&amp;lt; 8) | ((d | 16 &amp;lt;&amp;lt; 8) &amp;lt;&amp;lt; 16)
#define D(a, b, c, d, e, f, g, h) \
    (a) | (b &amp;lt;&amp;lt; 4) | (c &amp;lt;&amp;lt; 8) | (d &amp;lt;&amp;lt; 12) | (e &amp;lt;&amp;lt; 16) | (f &amp;lt;&amp;lt; 20) | (g &amp;lt;&amp;lt; 24) | (h &amp;lt;&amp;lt; 28)
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;re-simulated-の意味&#34;&gt;『RE: SIMULATED』の意味&lt;/h1&gt;

&lt;p&gt;タイトルの『RE: SIMULATED』には2つの意味を込めました。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;前作『WORMHOLE』の64K Introとしての「再現」&lt;/li&gt;
&lt;li&gt;SIMULATED REALITY&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;1-前作-wormhole-の64k-introとしての-再現&#34;&gt;1. 前作『WORMHOLE』の64K Introとしての「再現」&lt;/h2&gt;

&lt;p&gt;一昨年のTokyo Demo Fest 2018のCombined Demo Compoでも、さだきちさんとチームを組んで『WORMHOLE』という作品を制作しました（&lt;a href=&#34;https://gam0022.net/blog/2018/12/12/tdf2018/&#34;&gt;記事&lt;/a&gt;）。&lt;/p&gt;

&lt;p&gt;前半のシーンが顕著ですが、『WORMHOLE』と表現や演出が酷似していると思います。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;フラクタルの形状変化&lt;/li&gt;
&lt;li&gt;光の色の変化&lt;/li&gt;
&lt;li&gt;シーン転換前の激しい点滅&lt;/li&gt;
&lt;li&gt;シーン転換後のホワイトイン&lt;/li&gt;
&lt;li&gt;パーティのロゴの登場&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;『WORMHOLE』はUnityで制作したので、60.7 MB（zip圧縮で 23.18MB）というファイルサイズでした。&lt;/p&gt;

&lt;p&gt;前作では、Unityを利用したことで賛否両論があったので、ツールに頼らなくても同様のビジュアルを再現できることを証明する意図がありました。&lt;/p&gt;

&lt;p&gt;また、64K Introなどの容量制限のある部門への参加が個人的にも憧れだったという理由もあります。&lt;/p&gt;

&lt;p&gt;今回は自作のシステムで作品を制作することでファイルサイズは26KBになりました。&lt;/p&gt;

&lt;p&gt;同じ表現を「再現」しつつも、容量を &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;2334&lt;/sub&gt; まで圧縮する試みのコンセプトは達成できました。&lt;/p&gt;

&lt;p&gt;まさか、コンポで優勝するという結果まで「再現」してしまうのは予想外でした（笑）&lt;/p&gt;

&lt;h2 id=&#34;2-simulated-reality&#34;&gt;2. SIMULATED REALITY&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E3%82%B7%E3%83%9F%E3%83%A5%E3%83%AC%E3%83%BC%E3%83%86%E3%83%83%E3%83%89%E3%83%BB%E3%83%AA%E3%82%A2%E3%83%AA%E3%83%86%E3%82%A3&#34;&gt;Simulated Reality&lt;/a&gt;という裏設定もありました。&lt;/p&gt;

&lt;p&gt;作品の最後に「RE: SIMULATED」の文字が&lt;/p&gt;

&lt;p&gt;&lt;code&gt;RE: SIMULATED&lt;/code&gt; → &lt;code&gt;RE&lt;/code&gt; → &lt;code&gt;REALITY&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;と変化して、REALITYに変化するタイミングで「地球」がフラッシュバックするのは、Simulated Realityの暗喩です。&lt;/p&gt;

&lt;p&gt;前半のサイバーなシーンは電子的な仮想空間という設定で、シーン転換時に球体を中心に空間が歪んで圧縮するのは、宇宙誕生の爆発であるビッグバンの暗喩です。&lt;/p&gt;

&lt;p&gt;この世界は上位存在によって電子的にシミュレーションされた仮想現実で、最後に自分たちが住む地球を見つけるというストーリーでした（あくまで裏設定だったので、見た人に通じなくても良い）。&lt;/p&gt;

&lt;p&gt;できれば現実と見分けがつかないようなリアルなグラフィックで表現できたら良かったのですが、力量不足でした……。&lt;/p&gt;

&lt;h1 id=&#34;おわりに&#34;&gt;おわりに&lt;/h1&gt;

&lt;p&gt;Webフロントエンドは久しぶりで、node.jsとwebpackは初めてだったので、新しい技術を学ぶ良い機会となりました。&lt;/p&gt;

&lt;p&gt;昔はjQueryが必要だったDOMのセレクターやHTTPアクセスが、標準のAPI（&lt;a href=&#34;https://developer.mozilla.org/ja/docs/Web/API/Document/querySelector&#34;&gt;querySelector&lt;/a&gt;や&lt;a href=&#34;https://developer.mozilla.org/ja/docs/Web/API/Fetch_API/Using_Fetch&#34;&gt;Fetch&lt;/a&gt;）になっていて驚きました。&lt;/p&gt;

&lt;p&gt;TypeScript（ECMascript）に苦手意識がありましたが、最近はかなり使いやすい言語になったなぁと認識を改めました。
演算子オーバーロードがないのだけは、3Dプログラミングには必須のベクトル計算の実装の可読性が落ちて苦しい気持ちになったので、早くサポートして欲しいと感じました。&lt;/p&gt;

&lt;p&gt;また、64K Introのエントリーは今回が初めてということで、どのくらいのコンテンツが詰め込めるか感覚がつかめず、容量を半分以上も余らせてしまいました。
次の機会には64KBギリギリまで使って、もっと映像としても洗練させて、さらにCoolな作品を発表したいです。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;実は26KBしか使いきれなかったので、次回は64KBギリギリまで使えるように精進します💪 &lt;a href=&#34;https://t.co/uxF2M5DZmg&#34;&gt;pic.twitter.com/uxF2M5DZmg&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ / encoder killer (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1249677712815321088?ref_src=twsrc%5Etfw&#34;&gt;April 13, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;例年のRevisionの64K Introの作品と比較すると、かなり未熟なので、もっと精進して最高のデモを作りたいという気持ちです。&lt;/p&gt;

&lt;p&gt;ともあれ、このたびは優勝作品に選んでいただき、とても光栄に思います。&lt;/p&gt;

&lt;p&gt;世界中の尊敬するデモチームの方々からいただいたお祝いのコメントも嬉しかったです。わーい！&lt;/p&gt;

&lt;p&gt;最後に、世界的に大変な状況の中、オンラインでの開催のためにご尽力いただいた皆様に、心より感謝申し上げます。
とても楽しく充実した3日間を過ごせました。来年はドイツでお会いしましょう！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>emscripten night !! #2で発表しました</title>
      <link>https://gam0022.net/blog/2016/12/28/emsn2/</link>
      <pubDate>Wed, 28 Dec 2016 00:03:38 +0900</pubDate>
      
      <guid>https://gam0022.net/blog/2016/12/28/emsn2/</guid>
      <description>&lt;p&gt;12/21に開催された&lt;a href=&#34;https://emsn.connpass.com/event/42375/&#34;&gt;emscripten night !! #2&lt;/a&gt;という勉強会に参加して、
「Emscriptenを使ってブラウザ上でレイトレーシングする」というタイトルで10分間のLT発表を行いました。&lt;/p&gt;

&lt;p&gt;こちらが発表資料です。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-slide=&#34;1&#34; data-id=&#34;cec29326e01e463d8c7f6b586069ea4d&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;内容は&lt;a href=&#34;http://qiita.com/gam0022/items/6a1fb3e6946da1a3d7e5&#34;&gt;同タイトルのQiitaの記事&lt;/a&gt;をLT用に再構成したものです。&lt;/p&gt;

&lt;h1 id=&#34;参加の動機&#34;&gt;参加の動機&lt;/h1&gt;

&lt;p&gt;主催の &lt;a href=&#34;https://twitter.com/ikkou&#34;&gt;@ikkou&lt;/a&gt; さんからのお誘いがあったのと、Emscriptenを使ってるのはどんな人なんだろうという興味から勇気を出して参加しました。&lt;/p&gt;

&lt;h1 id=&#34;感想&#34;&gt;感想&lt;/h1&gt;

&lt;p&gt;Emscriptenだったら、Webフロントエンドの人も多いのかなーと思っていたら、
蓋を開けてみたらC++勢やアセンブラ勢、Haskellの人みたいな感じの参加者層で、いい意味で期待を裏切られました！&lt;/p&gt;

&lt;p&gt;私はC++やアセンブラについて、詳しいわけでないので、断片的にしか理解できない部分もありましたが、濃くて面白い発表が多かったです。&lt;/p&gt;

&lt;p&gt;個人的にすごい期待しているWebAssemblyについて、Mozilla Japanの清水さんからお話も聞くことができました。&lt;/p&gt;

&lt;p&gt;WebGL勢としてはスクエニの加島さんの「Unity WebGLを用いた乖離性ミリオンアーサーブラウザ版移植事例」も楽しみにしていました。
このセッションはSNS NGだったので、現地参加した価値はあったなと感じました。
2016年の現段階で、WebGLをつかった商業ゲームはかなり珍しいので、大変貴重な事例を聞くことができたと思います。&lt;/p&gt;

&lt;p&gt;Googleの &lt;a href=&#34;https://twitter.com/toyoshim&#34;&gt;@toyoshim&lt;/a&gt; さんの発表では、実際のゲーム移植の試行錯誤などの実践的なお話を聞くことができました。
かなり技術的には高度なことをしていて、すごいなーと思いました。VR対応も熱かったです！&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/JJt6VvQvR8hhiU&#34; width=&#34;595&#34; height=&#34;485&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&#34;margin-bottom:5px&#34;&gt; &lt;strong&gt; &lt;a href=&#34;//www.slideshare.net/toyoshim/oh-java-script-emscripten&#34; title=&#34;Oh! java script 夢の続きを語ろうよ〜emscriptenの逆襲&#34; target=&#34;_blank&#34;&gt;Oh! java script 夢の続きを語ろうよ〜emscriptenの逆襲&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a target=&#34;_blank&#34; href=&#34;//www.slideshare.net/toyoshim&#34;&gt;Takashi Toyoshima&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;junji hashimoto さんの発表も良かったです。Emscriptenでデバッグはどうするだろうとは、ずっと疑問に思っていたのですが、予想通りに闇でした…&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://slides.com/junjihashimoto-1/emscripten#/&#34;&gt;デバッグのためのEmscripten内部&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/janus_wel&#34;&gt;@janus_wel&lt;/a&gt;さんの「emscriptenでドメイン層に型と速度を持ち込む」も面白かったです。
Webフロントエンドでも型が持ち込まれていますが、EmscriptenでWebフロントエンドのドメイン層をC++で実装して、JavaScriptのUIのフレームワーク(React Redux)を組み合わせるお話でした。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/janus_wel/items/291ff255bdeb65e93ccc&#34;&gt;emscripten and DDD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/janus_wel/items/f039c91576358bb69626&#34;&gt;emscripten でドメイン層に型と速度を持ち込む&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;当日の様子&#34;&gt;当日の様子&lt;/h1&gt;

&lt;p&gt;当日の様子はこちらにまとめられています。気になる方はぜひご覧ください。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://togetter.com/li/1062035&#34;&gt;emscripten night !! #2 まとめ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>GLSL シェーダテクニック勉強会 #GLSLTechで登壇しました</title>
      <link>https://gam0022.net/blog/2016/02/16/glsl-tech/</link>
      <pubDate>Tue, 16 Feb 2016 09:46:00 +0900</pubDate>
      
      <guid>https://gam0022.net/blog/2016/02/16/glsl-tech/</guid>
      <description>&lt;p&gt;バレンタインデー（2016/02/14）に&lt;a href=&#34;http://connpass.com/event/25758/&#34;&gt;GPU の熱でチョコも溶けちゃう！？ GLSL シェーダテクニック勉強会&lt;/a&gt;でレイマーチングについて発表してきました。&lt;/p&gt;

&lt;p&gt;シェーダというニッチな分野にも関わらず、100人以上の参加者となる熱い勉強会でした。
無料なのに出席率が高く、参加者のモチベーションが高くて良いことだなと思いました。
WebGLの普及により、Web系のエンジニアもシェーダを触ることで、シェーダの注目度が上がってきたのを感じました！&lt;/p&gt;

&lt;p&gt;当日の様子は&lt;a href=&#34;http://togetter.com/li/938400&#34;&gt;togetterまとめ&lt;/a&gt;を参考にしてください。&lt;/p&gt;

&lt;p&gt;私は「シェーダだけで世界を創る！three.jsによるレイマーチング」という発表をしました。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/rS2j757JUrqeWL&#34; width=&#34;595&#34; height=&#34;485&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&#34;margin-bottom:5px&#34;&gt; &lt;strong&gt; &lt;a href=&#34;//www.slideshare.net/shohosoda9/threejs-58238484&#34; title=&#34;シェーダだけで世界を創る！three.jsによるレイマーチング&#34; target=&#34;_blank&#34;&gt;シェーダだけで世界を創る！three.jsによるレイマーチング&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&#34;//www.slideshare.net/shohosoda9&#34; target=&#34;_blank&#34;&gt;Sho Hosoda&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;最近取り組んている、レイマーチングというレイトレーシングの1種のWebGLのフラグメントシェーダ実装について話しました。&lt;/p&gt;

&lt;p&gt;なるべく聞き手を限定したくなかったので、そもそもシェーダやレイトレーシングとは？という基礎的な知識から分かりやすく説明しました。
そこまで知識が無くても、ある程度分かるような内容になったと思います。&lt;/p&gt;

&lt;p&gt;最後に発表練習に付き合ってくださった社内のみなさんはありがとうございました。この場をかりて感謝します。&lt;/p&gt;

&lt;h1 id=&#34;他の登壇者の発表&#34;&gt;他の登壇者の発表&lt;/h1&gt;

&lt;p&gt;せっかくなので、他の登壇者の方のスライドもまとめました！&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;今日の資料をアップしました / Live2D&amp;amp;GLSLエフェクト表現 &lt;a href=&#34;https://t.co/EM6tAqUxH5&#34;&gt;https://t.co/EM6tAqUxH5&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/GLSLTech?src=hash&#34;&gt;#GLSLTech&lt;/a&gt;&lt;/p&gt;&amp;mdash; naotaro (@naotaro0123) &lt;a href=&#34;https://twitter.com/naotaro0123/status/698749543559475200&#34;&gt;2016, 2月 14&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;先ほどのスライドです&lt;a href=&#34;https://t.co/MS3tAPAeh4&#34;&gt;https://t.co/MS3tAPAeh4&lt;/a&gt;&lt;a href=&#34;https://twitter.com/hashtag/GLSLTech?src=hash&#34;&gt;#GLSLTech&lt;/a&gt;&lt;/p&gt;&amp;mdash; kyasbal (@kyasbal_1994) &lt;a href=&#34;https://twitter.com/kyasbal_1994/status/698786195459821568&#34;&gt;2016, 2月 14&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/hashtag/GLSLTech?src=hash&#34;&gt;#GLSLTech&lt;/a&gt; っていうか今公開しちゃうか。最後の私の最適化の話、スライドこちらです &lt;a href=&#34;https://t.co/kDI60iUeqe&#34;&gt;https://t.co/kDI60iUeqe&lt;/a&gt;&lt;/p&gt;&amp;mdash; エマ・デュランダル (@emadurandal) &lt;a href=&#34;https://twitter.com/emadurandal/status/698858495567728641&#34;&gt;2016, 2月 14&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;個人的には @emadurandal さんの「GLSL最適化、 そして…」がもっとも勉強になりました。&lt;/p&gt;

&lt;p&gt;主催者の doxas さんのスライドが見つかりませんな…&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>coinsLT #0 で発表しました</title>
      <link>https://gam0022.net/blog/2014/08/03/coins-lt-0/</link>
      <pubDate>Sun, 03 Aug 2014 11:03:00 +0900</pubDate>
      
      <guid>https://gam0022.net/blog/2014/08/03/coins-lt-0/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://atnd.org/events/51236&#34;&gt;coinsLT #0&lt;/a&gt; で three.js についてのLTをしました。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/35917660&#34; width=&#34;427&#34; height=&#34;356&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&#34;margin-bottom:5px&#34;&gt; &lt;strong&gt; &lt;a href=&#34;https://www.slideshare.net/shohosoda9/threejs-35917660&#34; title=&#34;three.js の紹介&#34; target=&#34;_blank&#34;&gt;three.js の紹介&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&#34;http://www.slideshare.net/shohosoda9&#34; target=&#34;_blank&#34;&gt;Sho Hosoda&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;three.js は、卒業研究で開発しているアプリケーションで使用しているのですが、
思ったより使いやすかったので紹介することにしました。&lt;/p&gt;

&lt;p&gt;当日に参加することになって、直前の数時間でスライドを作ったので、
雑な感じになってしまったので準備をしっかりすればと良かったなと反省しています。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JavaScriptとCoffeeScriptのメモ</title>
      <link>https://gam0022.net/blog/2014/06/15/javascript-and-coffeescript/</link>
      <pubDate>Sun, 15 Jun 2014 06:50:00 +0900</pubDate>
      
      <guid>https://gam0022.net/blog/2014/06/15/javascript-and-coffeescript/</guid>
      <description>&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;

&lt;p&gt;卒研で &lt;a href=&#34;http://threejs.org/&#34;&gt;three.js&lt;/a&gt; という3DCGのライブラリを使って何か開発することしたので、JavaScript について勉強しました。&lt;/p&gt;

&lt;p&gt;また、CoffeeScript という、コンパイルするとJavaScriptのコードに変換される言語についても使ってみることにしたので、
これについても勉強しました。&lt;/p&gt;

&lt;p&gt;忘れてしまうと勿体無く思うので、備忘録です。&lt;/p&gt;

&lt;p&gt;この記事では、&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;JavaScriptを勉強する上で重要だと思われる概念&lt;/li&gt;
&lt;li&gt;CoffeScript の学び方&lt;/li&gt;
&lt;li&gt;Rails で CoffeeScript を使う時のメモ&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;を紹介します。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;javascript-について&#34;&gt;JavaScript について&lt;/h1&gt;

&lt;p&gt;一般的なオブジェクト指向を使いこなせる人が本格的に JavaScript で開発する前に、次のルールについては抑えておきたいと思いました。
クロージャーは別としても、どれも他の言語にはない、特異なルールとなっています。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;変数のスコープとクロージャ&lt;/li&gt;
&lt;li&gt;プロトタイプチェーン(プロトタイプ・ベースのオブジェクト指向)&lt;/li&gt;
&lt;li&gt;thisキーワードの指す4種類のパターン&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;変数のスコープとクロージャについて&#34;&gt;変数のスコープとクロージャについて&lt;/h2&gt;

&lt;p&gt;JavaScriptのローカル変数のスコープは関数ごとにしかありません。
一般的な言語ではブロックごとにスコープを持つので混乱しやすいと思いました。&lt;/p&gt;

&lt;p&gt;また、スコープチェーンという仕組みによって、関数をネストすると、中の関数から、外の関数のローカル変数を参照できます。&lt;/p&gt;

&lt;p&gt;そして、関数を返す関数(クロージャ)を作ると、内側の関数(クロージャー)から参照された外の関数のローカル変数は、
「クロージャの呼び出し元のスコープからは参照できない」かつ「クロージャを抜けても値を保持し続ける」という性質があります。&lt;/p&gt;

&lt;p&gt;この説明だけだと理解不能だと思うので、コード例などを踏まえながら、
以下の記事を読んでおくと理解できると思います。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/takeharu/items/4975031faf6f7baf077a&#34;&gt;JavaScriptでクロージャ入門&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.atmarkit.co.jp/ait/articles/0708/21/news116.html&#34;&gt;第3回　変数の宣言とスコープ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://tacamy.hatenablog.com/entry/2012/12/31/005951&#34;&gt;JavaScript のスコープチェーンとクロージャを理解する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;プロトタイプチェーン-プロトタイプ-ベースのオブジェクト指向-について&#34;&gt;プロトタイプチェーン(プロトタイプ・ベースのオブジェクト指向)について&lt;/h2&gt;

&lt;p&gt;JavaScriptでは関数オブジェクトにクラスとしての役割を与えているのですが、
prototypeプロパティを用いて、複数のインスタンスで同じメソッドを参照したり、
別のクラスを継承することを実現することができます。&lt;/p&gt;

&lt;p&gt;また、別の視点から見ると、全てのインスタンスはハッシュオブジェクトです。&lt;/p&gt;

&lt;p&gt;インスタンスのメンバーはハッシュのキーのことであり、
メソッドは、prototype プロパティによって複数のハッシュ(インスタンス)から参照できる関数オブジェクトでしかありません。&lt;/p&gt;

&lt;p&gt;プロトタイプチェーンについては、次の記事が分かりやすかったので、読んでおくと良いと思います。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.atmarkit.co.jp/ait/articles/0709/25/news148.html&#34;&gt;第4回　JavaScriptでオブジェクト指向プログラミング&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;thisキーワードの指す4種類のパターンについて&#34;&gt;thisキーワードの指す4種類のパターンについて&lt;/h2&gt;

&lt;p&gt;一般的な言語では、this は自身のインスタンスを参照するキーワードで変化することありませんが、
JavaScriptのthisはメソッドの呼び出しのパターンによって変化します。&lt;/p&gt;

&lt;p&gt;このthisキーワードの指す4種類のパターンについては、次の記事が分かりやすかったので、読んでおくといいと思います。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://qiita.com/takeharu/items/9935ce476a17d6258e27&#34;&gt;JavaScriptの「this」は「4種類」？？&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;coffescript-の学び方&#34;&gt;CoffeScript の学び方&lt;/h1&gt;

&lt;p&gt;基本的には&lt;a href=&#34;http://coffeescript.org/&#34;&gt;公式ページ&lt;/a&gt;に例がたくさんあるので、それを読んだほうが良い場合が多いです。&lt;/p&gt;

&lt;p&gt;また、サンプルコードは[load]ボタンで実際に実行したり編集することができるので、いっそう理解が深まると思います。&lt;/p&gt;

&lt;p&gt;翻訳された、&lt;a href=&#34;http://memo.sappari.org/coffeescript/coffeescript-langref&#34;&gt;CoffeeScript 言語リファレンス&lt;/a&gt;も内容が充実していて参考になったのですが、
1.0.1のものらしくて、最新版の1.7.1からけっこう遅れており、私の気がついた範囲で、1つだけ間違っている箇所があったので、
次の章で間違いを指摘しておきます。&lt;/p&gt;

&lt;p&gt;慣れるまでは、出力される JavaScript のコードを確認しながら開発した方が良さそうな認識です。
(CoffeeScriptで開発しても、デバッグは JavaScript のコードを読むことになります。)&lt;/p&gt;

&lt;p&gt;また、既存の JavaScriptのコードを手っ取り早く CoffeeScript に移植したいと思った時には、
&lt;a href=&#34;http://js2coffee.org/&#34;&gt;Js2coffee&lt;/a&gt;という JavaScript から CoffeeScript に逆変換してくれるサイトが役立ちます。&lt;/p&gt;

&lt;h2 id=&#34;coffeescript-のクラスについて&#34;&gt;CoffeeScript のクラスについて&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://memo.sappari.org/coffeescript/coffeescript-langref&#34;&gt;CoffeeScript 言語リファレンス&lt;/a&gt;の「クラス, 継承, super」の章に、次のコードが紹介されています。&lt;/p&gt;

&lt;p&gt;```ruby 間違ったインスタンス変数の定義
class Hoge
  someInstanceProp: &amp;ldquo;hoge&amp;rdquo;       # インスタンス変数
  someInstanceMethod: -&amp;gt;         # インスタンスメソッド
    @callAnotherInstanceMethod() # インスタンスメソッドを呼ぶ
    alert @someInstanceProp      # ==&amp;gt; &amp;ldquo;hoge&amp;rdquo;&lt;/p&gt;

&lt;p&gt;@someClassProp: &amp;ldquo;hogehoge&amp;rdquo;     # クラス変数
  @someClassMethod: -&amp;gt;           # クラスメソッド
    @callAnotherClassMethod()    # 同一クラスのクラスメソッドを呼ぶ
    alert @someClassProp         # ==&amp;gt; &amp;ldquo;hogehoge&amp;rdquo;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
しかし、この someInstanceProp はprototypeに保存されるので、インスタンス変数としての使い方は間違いだと思います。

例えば、次のように `someInstanceProp` に破壊的な操作をすると、他のインスタンスの `someInstanceProp` まで影響を与えてしまいます。

```ruby 他のクラスのsomeInstancePropまで影響がでる
class Hoge
  someInstanceProp: [1,2,3]      # インスタンス変数
  someInstanceMethod: -&amp;gt;         # インスタンスメソッド
    @callAnotherInstanceMethod() # インスタンスメソッドを呼ぶ
    alert @someInstanceProp      # ==&amp;gt; &amp;quot;hoge&amp;quot;

  @someClassProp: &amp;quot;hogehoge&amp;quot;     # クラス変数
  @someClassMethod: -&amp;gt;           # クラスメソッド
    @callAnotherClassMethod()    # 同一クラスのクラスメソッドを呼ぶ
    alert @someClassProp         # ==&amp;gt; &amp;quot;hogehoge&amp;quot;

h1 = new Hoge()
alert h1.someInstanceProp # =&amp;gt; [1,2,3]
h1.someInstanceProp.reverse()
alert h1.someInstanceProp # =&amp;gt; [3,2,1]

h2 = new Hoge()
alert h2.someInstanceProp # =&amp;gt; [3,2,1] !他のクラスでの変更の影響を受けている
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://coffeescript.org/#try:class%20Hoge%0A%20%20someInstanceProp%3A%20%5B1%2C2%2C3%5D%20%20%20%20%20%20%23%20%E3%82%A4%E3%83%B3%E3%82%B9%E3%82%BF%E3%83%B3%E3%82%B9%E5%A4%89%E6%95%B0%0A%20%20someInstanceMethod%3A%20-%3E%20%20%20%20%20%20%20%20%20%23%20%E3%82%A4%E3%83%B3%E3%82%B9%E3%82%BF%E3%83%B3%E3%82%B9%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%0A%20%20%20%20%40callAnotherInstanceMethod()%20%23%20%E3%82%A4%E3%83%B3%E3%82%B9%E3%82%BF%E3%83%B3%E3%82%B9%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%82%92%E5%91%BC%E3%81%B6%0A%20%20%20%20alert%20%40someInstanceProp%20%20%20%20%20%20%23%20%3D%3D%3E%20%22hoge%22%0A%0A%20%20%40someClassProp%3A%20%22hogehoge%22%20%20%20%20%20%23%20%E3%82%AF%E3%83%A9%E3%82%B9%E5%A4%89%E6%95%B0%0A%20%20%40someClassMethod%3A%20-%3E%20%20%20%20%20%20%20%20%20%20%20%23%20%E3%82%AF%E3%83%A9%E3%82%B9%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%0A%20%20%20%20%40callAnotherClassMethod()%20%20%20%20%23%20%E5%90%8C%E4%B8%80%E3%82%AF%E3%83%A9%E3%82%B9%E3%81%AE%E3%82%AF%E3%83%A9%E3%82%B9%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%82%92%E5%91%BC%E3%81%B6%0A%20%20%20%20alert%20%40someClassProp%20%20%20%20%20%20%20%20%20%23%20%3D%3D%3E%20%22hogehoge%22%0A%0Ah1%20%3D%20new%20Hoge()%0Aalert%20h1.someInstanceProp%20%23%20%3D%3E%20%5B1%2C2%2C3%5D%0Ah1.someInstanceProp.reverse()%0Aalert%20h1.someInstanceProp%20%23%20%3D%3E%20%5B3%2C2%2C1%5D%0A%0Ah2%20%3D%20new%20Hoge()%0Aalert%20h2.someInstanceProp%20%23%20%3D%3E%20%5B1%2C2%2C3%5D&#34;&gt;coffeescript.org で動作確認する&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;正しいsomeinstancepropの定義&#34;&gt;正しいsomeInstancePropの定義&lt;/h3&gt;

&lt;p&gt;正しい &lt;code&gt;someInstanceProp&lt;/code&gt; の定義はこうです。&lt;/p&gt;

&lt;p&gt;```ruby 正しいインスタンス変数の定義
class Hoge
  constructor: () -&amp;gt;
    @someInstanceProp = [1,2,3]  # インスタンス変数&lt;/p&gt;

&lt;p&gt;someInstanceMethod: -&amp;gt;         # インスタンスメソッド
    @callAnotherInstanceMethod() # インスタンスメソッドを呼ぶ
    alert @someInstanceProp      # ==&amp;gt; &amp;ldquo;hoge&amp;rdquo;&lt;/p&gt;

&lt;p&gt;@someClassProp: &amp;ldquo;hogehoge&amp;rdquo;     # クラス変数
  @someClassMethod: -&amp;gt;           # クラスメソッド
    @callAnotherClassMethod()    # 同一クラスのクラスメソッドを呼ぶ
    alert @someClassProp         # ==&amp;gt; &amp;ldquo;hogehoge&amp;rdquo;&lt;/p&gt;

&lt;p&gt;h1 = new Hoge()
alert h1.someInstanceProp # =&amp;gt; [1,2,3]
h1.someInstanceProp.reverse()
alert h1.someInstanceProp # =&amp;gt; [3,2,1]&lt;/p&gt;

&lt;p&gt;h2 = new Hoge()
alert h2.someInstanceProp # =&amp;gt; [1,2,3]
```&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://coffeescript.org/#try:class%20Hoge%0A%20%20constructor%3A%20()%20-%3E%0A%20%20%20%20%40someInstanceProp%20%3D%20%5B1%2C2%2C3%5D%20%20%23%20%E3%82%A4%E3%83%B3%E3%82%B9%E3%82%BF%E3%83%B3%E3%82%B9%E5%A4%89%E6%95%B0%0A%0A%20%20someInstanceMethod%3A%20-%3E%20%20%20%20%20%20%20%20%20%23%20%E3%82%A4%E3%83%B3%E3%82%B9%E3%82%BF%E3%83%B3%E3%82%B9%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%0A%20%20%20%20%40callAnotherInstanceMethod()%20%23%20%E3%82%A4%E3%83%B3%E3%82%B9%E3%82%BF%E3%83%B3%E3%82%B9%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%82%92%E5%91%BC%E3%81%B6%0A%20%20%20%20alert%20%40someInstanceProp%20%20%20%20%20%20%23%20%3D%3D%3E%20%22hoge%22%0A%0A%20%20%40someClassProp%3A%20%22hogehoge%22%20%20%20%20%20%23%20%E3%82%AF%E3%83%A9%E3%82%B9%E5%A4%89%E6%95%B0%0A%20%20%40someClassMethod%3A%20-%3E%20%20%20%20%20%20%20%20%20%20%20%23%20%E3%82%AF%E3%83%A9%E3%82%B9%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%0A%20%20%20%20%40callAnotherClassMethod()%20%20%20%20%23%20%E5%90%8C%E4%B8%80%E3%82%AF%E3%83%A9%E3%82%B9%E3%81%AE%E3%82%AF%E3%83%A9%E3%82%B9%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%82%92%E5%91%BC%E3%81%B6%0A%20%20%20%20alert%20%40someClassProp%20%20%20%20%20%20%20%20%20%23%20%3D%3D%3E%20%22hogehoge%22%0A%0Ah1%20%3D%20new%20Hoge()%0Aalert%20h1.someInstanceProp%20%23%20%3D%3E%20%5B1%2C2%2C3%5D%0Ah1.someInstanceProp.reverse()%0Aalert%20h1.someInstanceProp%20%23%20%3D%3E%20%5B3%2C2%2C1%5D%0A%0Ah2%20%3D%20new%20Hoge()%0Aalert%20h2.someInstanceProp%20%23%20%3D%3E%20%5B3%2C2%2C1%5D&#34;&gt;coffeescript.org で動作確認する&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;補足すると、classのトップレベルでの&lt;code&gt;@var&lt;/code&gt;と、関数内での&lt;code&gt;@var&lt;/code&gt;は意味が違います。&lt;/p&gt;

&lt;p&gt;前者は&lt;code&gt;ClassName.var&lt;/code&gt;となりますが、後者は&lt;code&gt;this.var&lt;/code&gt;となります。&lt;/p&gt;

&lt;p&gt;インスタンス変数は、後者の関数内での&lt;code&gt;@var&lt;/code&gt;で定義すると良さそうです。&lt;/p&gt;

&lt;h1 id=&#34;rails-で-coffeescript-を使う時のメモ&#34;&gt;Rails で CoffeeScript を使う時のメモ&lt;/h1&gt;

&lt;p&gt;Rails を 使うと、Asset Pipeline で CoffeeScript の自動コンパイル環境ができて楽なのですが、
Railsのデフォルトの設定だと、出力される JavaScript が無名関数&lt;code&gt;(function(){ }).call(this)&lt;/code&gt;の中に隠されてしまうので、
class を作っても外部から参照できなくなってしまいます。&lt;/p&gt;

&lt;p&gt;そういう場合は、&lt;code&gt;bare&lt;/code&gt;オプションを使うと良いです。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;config/environment.rb&lt;/code&gt; の中に &lt;code&gt;Tilt::CoffeeScriptTemplate.default_bare = true&lt;/code&gt;という行を加えると、
無名関数に囲まれなくなります。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Canvasでハマった点まとめ</title>
      <link>https://gam0022.net/blog/2013/09/16/canvas-memo/</link>
      <pubDate>Mon, 16 Sep 2013 14:05:00 +0900</pubDate>
      
      <guid>https://gam0022.net/blog/2013/09/16/canvas-memo/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://gam0022.net/app/tmg/&#34;&gt;Twitter名刺ジェネレータ&lt;/a&gt;を作るにあたって、
Canvas を使ったので、勉強になったことを適当にメモします。&lt;/p&gt;

&lt;p&gt;関連記事&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gam0022.net/blog/2013/09/16/sqlite3-memo/&#34;&gt;SQlite3でハマった点まとめ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;canvas-todataurl-の注意点&#34;&gt;canvas#toDataURL() の注意点&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://www.html5.jp/canvas/ref/HTMLCanvasElement/toDataURL.html&#34;&gt;&lt;code&gt;canvas#toDataURL()&lt;/code&gt;&lt;/a&gt; の注意点なのですが、
一度でもクロスドメインで読み込んだファイルを描画した canvas に対して使うと、
&lt;code&gt;Uncaught SecurityError: An attempt was made to break through the security policy of the user agent.&lt;/code&gt; というエラーがでます。&lt;/p&gt;

&lt;p&gt;クロスドメインで取得した&lt;code&gt;Image&lt;/code&gt;を引数にしても、&lt;a href=&#34;http://www.html5.jp/canvas/ref/method/drawImage.html&#34;&gt;&lt;code&gt;context#drawImage()&lt;/code&gt;&lt;/a&gt;は成功するので、すこし気が付きにくいと思いました。&lt;/p&gt;

&lt;p&gt;Chrome バージョン 29.0.1547.65 で確認しました。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;canvas-で複数行のテキストを描画する&#34;&gt;Canvas で複数行のテキストを描画する&lt;/h1&gt;

&lt;p&gt;Canvas で、指定した幅でテキストを改行させたかったのですが、標準の関数では実現できませんでした。&lt;/p&gt;

&lt;p&gt;仕方ないので、&lt;a href=&#34;http://ninoha.com/?p=60&#34;&gt;指定した幅で文字列を分割して配列に入れる関数&lt;/a&gt;を作って、
複数回に分けて &lt;code&gt;context#fillText()&lt;/code&gt; をするしかないようです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/gam0022/twitter-meishi-generator/blob/master/js/functions.js&#34;&gt;twitter-meishi-generator / js / functions.js&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Canvas で複数行のテキストを描画する&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// http://ninoha.com/?p=60
/*
      文字列を指定幅ごとに区切る

      context : 描画コンテキスト
      text    : 変換元の文字列
      width   : １行の最大幅

      戻り値  : １行毎に分割した文字列の配列
*/
function multilineText(context, text, width) {
    var len = text.length;
    var strArray = [];
    var tmp = &amp;quot;&amp;quot;;
    var i = 0;

    if( len &amp;lt; 1 ){
        //textの文字数が0だったら終わり
        return strArray;
    }

    for( i = 0; i &amp;lt; len; i++ ){
        var c = text.charAt(i);  //textから１文字抽出
        if( c == &amp;quot;\n&amp;quot; ){
            /* 改行コードの場合はそれまでの文字列を配列にセット */
            strArray.push( tmp );
            tmp = &amp;quot;&amp;quot;;

            continue;
        }

        /* contextの現在のフォントスタイルで描画したときの長さを取得 */
        if (context.measureText( tmp + c ).width &amp;lt;= width){
            /* 指定幅を超えるまでは文字列を繋げていく */
            tmp += c;
        }else{
            /* 超えたら、それまでの文字列を配列にセット */
            strArray.push( tmp );
            tmp = c;
        }
    }

    /* 繋げたままの分があれば回収 */
    if( tmp.length &amp;gt; 0 )
        strArray.push( tmp );

    return strArray;
}

function fillMultilineText(context, text, width, x, y, line_height, max_line) {
  var ary = multilineText(context, text, width);
  var n = ary.length;
  if (n &amp;gt; max_line) {
    n = max_line;
  }
  for (var i = 0; i &amp;lt; n; ++i) {
    context.fillText(ary[i], x, y + line_height * i);
  }
}
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>JavaScriptのメモ</title>
      <link>https://gam0022.net/blog/2013/07/11/javascript-memo/</link>
      <pubDate>Thu, 11 Jul 2013 05:58:00 +0900</pubDate>
      
      <guid>https://gam0022.net/blog/2013/07/11/javascript-memo/</guid>
      <description>

&lt;p&gt;最近、COJTという授業でWebGLとHTML5、JavaScriptなどを駆使して、3Dを使ったカバンの商品カタログのような物体を生成しています。&lt;/p&gt;

&lt;p&gt;JavaScriptなどについて色々調べているので、有益そうなことをメモします。&lt;/p&gt;

&lt;p&gt;とりあえず、動くようになったので、公開用のURLを晒しておきます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://gam0022.net/app/shelf/&#34;&gt;COJT用の何か&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;実は、開発方法が色々とアレなのですが、ここでは深く言わないことにします。&lt;/p&gt;

&lt;h1 id=&#34;javascriptそのものについて&#34;&gt;JavaScriptそのものについて&lt;/h1&gt;

&lt;p&gt;私のようにクラスベースオブジェクト指向の言語から入った人間にとっては、
JavaScriptのプロトタイプベースオブジェクト指向はなかなか馴染みにくいものでした。&lt;/p&gt;

&lt;p&gt;そういう人は、以下のサイトなどから、JavaScriptのOOPについて学習するのが良いと思います。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/yuka2py/javascript-23768378&#34;&gt;最強オブジェクト指向言語 JavaScript 再入門！ slideshare&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.atmarkit.co.jp/ait/articles/0709/25/news148.html&#34;&gt;JavaScriptでオブジェクト指向プログラミング @IT&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;イーズ-アウト-について&#34;&gt;イーズ・アウト について&lt;/h1&gt;

&lt;p&gt;COJT用の何かをみてもらえれば分かると思うのですが、棚の回転やパネルのポップアップの動きが
等速ではなく、動きの終わりに減速するようになっていると思います。&lt;/p&gt;

&lt;p&gt;動きの終わりに減速する動きを「イーズ・アウト」と呼ぶそうです。&lt;/p&gt;

&lt;p&gt;イーズ・アウトは重要で、フレーム数が限られた描画でも滑らかに動きに見せることができます。&lt;/p&gt;

&lt;p&gt;ぶっちゃけ、COJTで学んだ一番のことと言うと、イーズ・アウトという単語を覚えたことな気がします。&lt;/p&gt;

&lt;p&gt;イーズ・アウトの実現方法は色々とあると思いますが、私は次の関数で実装することにしました。&lt;/p&gt;

&lt;p&gt;{% math%}
f(t) = 1 - exp(-6t)
{% endmath %}&lt;/p&gt;

&lt;p&gt;tは時間で、tを0〜1の間で変化させると、f(t)が良い感じにイーズアウトする物体の座標になります。&lt;/p&gt;

&lt;p&gt;この式は、次のサイトから知りました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://radiumsoftware.tumblr.com/post/5031889912&#34;&gt;指数関数を使ったお手軽イーズ・アウト&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;spinrfの実装&#34;&gt;spinrfの実装&lt;/h1&gt;

&lt;p&gt;JavaScriptには、spinrfがないので、自分で実装するか、誰かが作った実装を使う必要があります。&lt;/p&gt;

&lt;p&gt;単純な用途なら、この実装で十分だと思いました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.atmarkit.co.jp/ait/articles/1003/12/news088_11.html&#34;&gt;連載：jQuery逆引きリファレンス：第5回 コア編 (&lt;sup&gt;11&lt;/sup&gt;&amp;frasl;&lt;sub&gt;13&lt;/sub&gt;) @IT&lt;/a&gt; より&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// sprintf(&#39;{0}は{1}&#39;, &#39;猫&#39;, &#39;うろうろ&#39;); =&amp;gt; &#39;猫はうろうろ&#39;
sprintf = function(format) {

  // 第2引数以降を順に処理
  for (var i = 1; i &amp;lt; arguments.length; i++) {

    // 正規表現でプレイスホルダと対応する引数の値を置換処理
    var reg = new RegExp(&#39;\\{&#39; + (i - 1) + &#39;\\}&#39;, &#39;g&#39;);
    format = format.replace(reg, arguments[i]);
  }

  // 最終的な置き換え結果を戻り値として返す
  return format;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;android-の判定&#34;&gt;Android の判定&lt;/h1&gt;

&lt;p&gt;Android からアクセスされたときだけ、JavaScriptで別の処理をしたい場合があったのですが、
userAgentを使うことで判定できました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var agent = navigator.userAgent;
this.is_android = false;
if(agent.search(/Android/) != -1){
  this.is_android = true;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;まとめ&#34;&gt;まとめ&lt;/h1&gt;

&lt;p&gt;あまりJavaScriptのメモではないですね。&lt;/p&gt;

&lt;p&gt;他にも書きたいことがあるのですが、&lt;a href=&#34;http://mxengine-se.net-dimension.com/&#34;&gt;MatrixEngine&lt;/a&gt; というレアな開発環境のために、
記事にしてもたぶん必要とする人がいないので、MatrixEngine については書きませんでした。&lt;/p&gt;

&lt;p&gt;しかし、COJTのアレのリポジトリをgithubに上げているので、それを見れば、少しは開発の苦労が想像できるかもしれません。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/gam0022/shelf&#34;&gt;COJT用に作った何か github&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

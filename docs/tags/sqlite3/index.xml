<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>gam0022.net</title>
    <link>https://gam0022.net/tags/sqlite3/index.xml</link>
    <description>Recent content on gam0022.net</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>jp</language>
    <copyright>&amp;copy; 2016 gam0022</copyright>
    <atom:link href="/tags/sqlite3/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>SQLite3でハマった点まとめ</title>
      <link>https://gam0022.net/blog/2013/09/16/sqlite3-memo/</link>
      <pubDate>Mon, 16 Sep 2013 14:05:00 +0900</pubDate>
      
      <guid>https://gam0022.net/blog/2013/09/16/sqlite3-memo/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://gam0022.net/app/tmg/&#34;&gt;Twitter名刺ジェネレータ&lt;/a&gt;を作るにあたって、
ActiveRecord と SQLite3 を使ったので、勉強になったことを適当にメモします。&lt;/p&gt;

&lt;p&gt;関連記事&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gam0022.net/blog/2013/09/16/canvas-memo/&#34;&gt;Canvasでハマった点まとめ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;activerecord-は-initialize-が遅すぎて-cgi-には使えない&#34;&gt;ActiveRecord は initialize が遅すぎて CGI には使えない&lt;/h1&gt;

&lt;p&gt;ActiveRecord をCGIで単体で使おうとしたのですが、ActiveRecord の初期化に数秒かかってしまい、
レスポンスが遅すぎて使い物になりませんでした。&lt;/p&gt;

&lt;p&gt;結局、&lt;a href=&#34;https://github.com/gam0022/twitter-meishi-generator/blob/master/posts.rb&#34;&gt;ActiveRecord の部分を生のSQLite3で再実装&lt;/a&gt;しました。&lt;/p&gt;

&lt;p&gt;Rails のようにサーバが起動したらずっと同じプロセスで動作するようなものであれは、初期化が遅くても問題にはならないのですが、
CGI のように、appache が毎回プロセスを起動するようなものだと、ActiveRecord を使うのは諦めたほうがいいようです。&lt;/p&gt;

&lt;p&gt;ActiveRecord の悪口になってしまいましたが、ActiveRecord そのものは本当に便利でした。&lt;/p&gt;

&lt;p&gt;テーブルの作成のために ActiveRecord を使うのはいいかもしれないと思いました。&lt;/p&gt;

&lt;h1 id=&#34;sqlite3-を-cgi-で使うときはパーミッション注意&#34;&gt;SQLite3 を CGI で使うときはパーミッション注意&lt;/h1&gt;

&lt;p&gt;SQLite3(というか、ActiveRecordの問題なのだろうか。要検証。) を CGI から使うときは、パーミッションに注意しないと、ハマります。&lt;/p&gt;

&lt;p&gt;以下のような例外が起きることが有りました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SQLite3::CantOpenException: unable to open database file&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SQLite3::ReadOnlyException: attempt to write a readonly database&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上のような例外が発生した場合、次のことを確認して下さい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;データベースファイルのオーナーが appache のユーザになっているか？

&lt;ul&gt;
&lt;li&gt;appache のユーザとグループが &lt;code&gt;www-data&lt;/code&gt; で、データベースのファイル名が &lt;code&gt;db/db.sqlite3&lt;/code&gt; なら、以下のように変更する。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;chown www-data.www-data db/db.sqlite3&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;データベースファイルを置くディレクトリのパーミッションが 777 になっているか?

&lt;ul&gt;
&lt;li&gt;例えば、データベースのファイル名が &lt;code&gt;db/db.sqlite3&lt;/code&gt; なら、ディレクトリ&lt;code&gt;db&lt;/code&gt;のパーミッションは 777 である必要があるようです。
&lt;a href=&#34;http://d.hatena.ne.jp/yun_kichi/20100113/1263362175&#34;&gt;参考&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;sqlite3で-time-を渡す時には文字列にしないとダメ&#34;&gt;SQLite3で、Time を渡す時には文字列にしないとダメ&lt;/h1&gt;

&lt;p&gt;Ruby で &lt;code&gt;sqlite3 gem&lt;/code&gt; を使ってtableにプレースホルダを使って&lt;code&gt;insert&lt;/code&gt; した時、
&lt;code&gt;can&#39;t prepare Time&lt;/code&gt;とかいうエラーが発生するときは、値を文字列に変換してやると解消するかもしれません。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Timeクラスを直接渡すと、can&#39;t prepare Time とか言われる例
h = {:time =&amp;gt; Time.now, :data = &amp;quot;なんとかかんとか&amp;quot;}
db.execute(&amp;quot;insert into table(time, data) values (:time, :data)&amp;quot;, h)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;次のように、Time クラスを直接渡さずに、明示的に文字列に変換してから渡すと解消するかもしれません。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Timeクラスを文字列に変換して渡すと解消するかも
h = {:time =&amp;gt; Time.now.to_s, :data = &amp;quot;なんとかかんとか&amp;quot;}
db.execute(&amp;quot;insert into table(time, data) values (:time, :data)&amp;quot;, h)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;sqlite3で-結果を-hash-で取る&#34;&gt;SQLite3で、結果を Hash で取る&lt;/h1&gt;

&lt;p&gt;Rubyの&lt;code&gt;sqlite3 gem&lt;/code&gt;で、&lt;code&gt;db.results_as_hash = ture&lt;/code&gt; にすると、
select文などの結果が配列ではなく、Hash で返るようになるので、プログラムの可読性などが向上します。&lt;/p&gt;

&lt;h1 id=&#34;hash-の中身を-ドット演算子-で参照できるようにする&#34;&gt;Hash の中身を ドット演算子 で参照できるようにする&lt;/h1&gt;

&lt;p&gt;SQLite3は関係ないですが、覚えておくと便利だと思ったので、メモします。&lt;/p&gt;

&lt;p&gt;ActiveRecord で実装した部分を SQLite3 で再実装するとき、変更範囲を小さくしたかったので利用したテクニックです。&lt;/p&gt;

&lt;p&gt;(ActiveRecordの結果はクラスだが、SQLite3の結果は &lt;code&gt;db.results_as_hash = ture&lt;/code&gt;した場合、
Hash なので、なんとか既存のコードを変更せずに対応させたかった。)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Hash の中身を ドット演算子 で参照したい(キーがString)
class Hash
  def method_missing(n)
    self[n.to_s]
  end
end

h = {&amp;quot;a&amp;quot; =&amp;gt; 1, &amp;quot;b&amp;quot; =&amp;gt; 2, &amp;quot;c&amp;quot; =&amp;gt; 3}

puts h[&amp;quot;b&amp;quot;] # =&amp;gt; 2
puts h.b    # =&amp;gt; 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ちなみに、ハッシュのキーがシンボルのときは、次のようにすればOKです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Hash の中身を ドット演算子 で参照したい(キーがSymbol)
class Hash
  def method_missing(n)
    self[n.to_sym]
  end
end

h = {:a =&amp;gt; 1, :b =&amp;gt; 2, :c =&amp;gt; 3}

puts h[:b]
puts h.b
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;method_missing&lt;/code&gt;を使った黒魔術なので、速度的に気になる点もありますが、そこは目をつぶりましょう。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>gam0022.net</title>
    <link>https://gam0022.net/tags/uva-online-judge/index.xml</link>
    <description>Recent content on gam0022.net</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>jp</language>
    <copyright>&amp;copy; 2016 gam0022</copyright>
    <atom:link href="/tags/uva-online-judge/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Programming Challenges 3</title>
      <link>https://gam0022.net/blog/2013/08/26/programming-challenges-3/</link>
      <pubDate>Mon, 26 Aug 2013 21:34:00 +0900</pubDate>
      
      <guid>https://gam0022.net/blog/2013/08/26/programming-challenges-3/</guid>
      <description>&lt;p&gt;Uva Online Judgeで解いた問題を適当に解説します。&lt;/p&gt;

&lt;p&gt;3ということで、&lt;a href=&#34;https://gam0022.net/blog/2013/07/09/programming-challenges-2/&#34;&gt;前回&lt;/a&gt;と&lt;a href=&#34;https://gam0022.net/blog/2013/06/06/programming-challenges-1/&#34;&gt;前々回&lt;/a&gt;の続きです。&lt;/p&gt;

&lt;h1 id=&#34;10018-reverse-and-add&#34;&gt;10018 Reverse and Add&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://uva.onlinejudge.org/index.php?option=onlinejudge&amp;amp;page=show_problem&amp;amp;problem=959&#34;&gt;10018 - Reverse and Add&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;$n = 入力 + reverse(入力)$ を計算、回文だったらその値を返す。
回分でなければ、$ 入力 = n $ として回文になるまえ繰り返す問題だった。&lt;/p&gt;

&lt;p&gt;ここで言う回分というのは、&lt;code&gt;12321&lt;/code&gt;のような整数のこと。&lt;/p&gt;

&lt;p&gt;問題文に &lt;code&gt;&amp;quot;palindrome that is not greater than 4,294,967,295. &amp;quot;&lt;/code&gt;
とあったので、&lt;code&gt;BigNumber&lt;/code&gt; を使う必要は特に無く、&lt;code&gt;unsigned long long int&lt;/code&gt; で対応できた。&lt;/p&gt;

&lt;p&gt;ごく普通に、&lt;code&gt;回文を返す関数&lt;/code&gt;と&lt;code&gt;回分かどうかを判定する関数&lt;/code&gt;を実装して、問題を解いた。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;701-the-archeologist-s-dilemma&#34;&gt;701 The Archeologist&amp;rsquo;s Dilemma&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;category=33&amp;amp;page=show_problem&amp;amp;problem=642&#34;&gt;701 - The Archeologists&amp;rsquo; Dilemma&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;$ N $ を入力として、$2^E$が10進数として$N$のprefixとなる、
最小の$E$を求める問題だった。&lt;/p&gt;

&lt;p&gt;注意点としては、&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;(remember that more than half of the digits are missing).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;とあるので、例えば、入力が10のときは、出力は20になる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;これでは、桁の半分以上がprefixとなっているからダメ

&lt;ul&gt;
&lt;li&gt;$ 2^{10} = 10_24 $&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;桁の半分未満がprefixとなっているから答え。

&lt;ul&gt;
&lt;li&gt;$ 2^{20} = 10_48576 $&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;結論から言うと、$2^E$の桁数を$i$と仮定したとき、&lt;/p&gt;

&lt;p&gt;$$
E = ceil( log2( n \times 10^i ) ) = floor( log2( (n+1) \times 10^i) )
$$&lt;/p&gt;

&lt;p&gt;となることを利用して、問題を解いた。(iを上の式を満たすまで変化させれて求めれば良い)&lt;/p&gt;

&lt;p&gt;ここで、対数の公式より、以下のように上の式を変形して計算量を減らした。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;$ log2(A \times B) = log2(A) + log2(B) $&lt;/li&gt;
&lt;li&gt;$ log2(10^i) = log2(10) \times i $&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;10127-ones&#34;&gt;10127 Ones&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;category=33&amp;amp;page=show_problem&amp;amp;problem=1068&#34;&gt;10127 - Ones&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;入力を&lt;code&gt;N&lt;/code&gt;として、1の連続で表現される10進数
となる最小の&lt;code&gt;N&lt;/code&gt;の倍数の桁数を求める問題だった。&lt;/p&gt;

&lt;p&gt;1の連続で表現される10進数 を &lt;code&gt;i&lt;/code&gt; とすると、&lt;code&gt;i % N = 0&lt;/code&gt; となるまで、
総当りで&lt;code&gt;i&lt;/code&gt;を求めた。&lt;/p&gt;

&lt;p&gt;このとき、&lt;code&gt;i = i % N&lt;/code&gt; としても、&lt;code&gt;i % N&lt;/code&gt; が変わらないことを利用して、
&lt;code&gt;i&lt;/code&gt; が巨大にならないようにした。&lt;/p&gt;

&lt;h1 id=&#34;847-a-multiplication-game&#34;&gt;847 A Multiplication Game&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;category=33&amp;amp;page=show_problem&amp;amp;problem=788&#34;&gt;847 - A Multiplication Game&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;あるゲームの勝者がどちらかを判定する問題だった。&lt;/p&gt;

&lt;p&gt;ゲームのルールは、Stan と Ollie が 交互に ある数字pに 2から9の数字を掛けていき、
先にpを入力の値n以上にした者が勝者となる。Satanが常にp = 1から開始するらしい。&lt;/p&gt;

&lt;p&gt;両方が最善を尽くした場合、Satanは常に2を掛け、Oliieは常に9を掛けると分かる。&lt;/p&gt;

&lt;p&gt;$1 &amp;lt; n &amp;lt; 4294967295$ だと分かっているので、nとpに &lt;code&gt;unsigned long long int&lt;/code&gt; 型を使えば、
オーバーフローをせずに、計算できるので、素朴にシュミュレーションをした。&lt;/p&gt;

&lt;h1 id=&#34;10198-counting&#34;&gt;10198 Counting&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;category=34&amp;amp;page=show_problem&amp;amp;problem=1139&#34;&gt;10198 - Counting&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;この問題は、Gustavoの書く数字の表し方が何通りあるかを調べる問題だった。&lt;/p&gt;

&lt;p&gt;今回は&lt;code&gt;Bignum&lt;/code&gt;を使う必要があったので、
&lt;code&gt;C++&lt;/code&gt; ではなく &lt;code&gt;Java(java.math.BigInteger)&lt;/code&gt; を使って解いた。&lt;/p&gt;

&lt;p&gt;この問題は、動的計画法で解くことができ、
求めるnの表し方の通りf(n)は、次の漸化式で求めることができた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;$f(0) = 2$&lt;/li&gt;
&lt;li&gt;$f(1) = 5$&lt;/li&gt;
&lt;li&gt;$f(2) = 13$&lt;/li&gt;
&lt;li&gt;$f(n) = 2 \times f(n-1) + f(n - 2) + f(n - 3)$&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;問題とは関係ないが、Javaで提出するときはClass名をMainにしないと
Runtime Errorになってしまったので苦労した。&lt;/p&gt;

&lt;h1 id=&#34;10049-self-describing-sequence&#34;&gt;10049 Self-describing Sequence&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;category=34&amp;amp;page=show_problem&amp;amp;problem=990&#34;&gt;10049 - Self-describing Sequence&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;この問題は、ある数列の第n項の値&lt;code&gt;f(n)&lt;/code&gt;を求める問題だった。&lt;/p&gt;

&lt;p&gt;この問題のポイントは、事前に&lt;code&gt;f(n)&lt;/code&gt;を求めたいのだが、
普通に&lt;code&gt;f(n)&lt;/code&gt;の配列を計算すると、
要素数が2000000000個となってしまってメモリが足りなくなる点だ。&lt;/p&gt;

&lt;p&gt;そこで、&lt;code&gt;f(n)&lt;/code&gt;の値は同じ値が何個か連続して並ぶことを利用して、
$f(i) = f(i + 1) = &amp;hellip; = f(j) = n$ となっていたら、
$nums(n) = i$ となる numsの配列だけを記録するようにした。&lt;/p&gt;

&lt;p&gt;こうすれば、&lt;code&gt;f(n)&lt;/code&gt;の値を知りたいときには、
$nums(i) \le n $ となる&lt;code&gt;nums&lt;/code&gt;を見つけて、$ f(n) = i $ とすれば求まる。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;nums(n)&lt;/code&gt; は次の式を計算して求めた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;$nums(0) = 1$&lt;/li&gt;
&lt;li&gt;$nums(1) = 2$&lt;/li&gt;
&lt;li&gt;$nums(3) = 4$&lt;/li&gt;
&lt;li&gt;$nums(j) = nums(j) + i + 1 (だだし、nums(i) \le j &amp;lt; nums(i+1))$&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;10001-garden-of-eden&#34;&gt;10001 Garden of Eden&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;category=36&amp;amp;page=show_problem&amp;amp;problem=942&#34;&gt;10001 - Garden of Eden&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;セルオートマトンが、&lt;code&gt;Garden of Eden&lt;/code&gt; というパターンかどうかを判定する問題だった。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Garden of Eden&lt;/code&gt; とは、どうやっても到達できないCAのパターンである。&lt;/p&gt;

&lt;dl&gt;
&lt;dt&gt;入力&lt;/dt&gt;
&lt;dd&gt;CAの規則(id)&lt;/dd&gt;
&lt;dd&gt;パターンの長さn&lt;/dd&gt;
&lt;dd&gt;パターン(0と1)&lt;/dd&gt;
&lt;dt&gt;出力&lt;/dt&gt;
&lt;dd&gt;&lt;code&gt;&amp;quot;Garden of Eden&amp;quot;&lt;/code&gt; or &lt;code&gt;&amp;quot;REACHABLE&amp;quot;&lt;/code&gt;&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;解法としては、バックトラックを使った。&lt;/p&gt;

&lt;p&gt;CAは3つの組み合わせで次の状態が決まるので、バックトラックを使うにしても難しかった。&lt;/p&gt;

&lt;p&gt;結論から言うと、候補となるCAの最初と最後を先に決定する。
つまり、以下のような4通りを先に作る。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;0xxxxx0&lt;/li&gt;
&lt;li&gt;0xxxxx1&lt;/li&gt;
&lt;li&gt;1xxxxx0&lt;/li&gt;
&lt;li&gt;1xxxxx1&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;次に、バックトラックを使って、残りのxの部分を埋めていき、
&lt;code&gt;&amp;quot;Garden of Eden&amp;quot;&lt;/code&gt;かどうかを判定した。&lt;/p&gt;

&lt;h1 id=&#34;10099-the-tourist-guide&#34;&gt;10099 The Tourist Guide&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;category=37&amp;amp;page=show_problem&amp;amp;problem=1040&#34;&gt;10099 - The Tourist Guide&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;問題の概要&#34;&gt;問題の概要&lt;/h2&gt;

&lt;p&gt;グラフの各ノードは地点を表していて、各エッジの数字は地点間を移動するバスのキャパシティを示している。&lt;/p&gt;

&lt;p&gt;スタート地点からゴール地点まで移動するとき、最善を尽くしても何往復する必要があるかを求める。&lt;/p&gt;

&lt;h2 id=&#34;解説&#34;&gt;解説&lt;/h2&gt;

&lt;p&gt;Dijkstra法を使って解いた。&lt;/p&gt;

&lt;p&gt;より大きいキャパシティの道を選択したいが、最終的なキャパシティは全てのパスのキャパシティの最小になる。
これを考慮して、一般的な最小パスを求めるDijkstra法をすこし改造した。&lt;/p&gt;

&lt;h2 id=&#34;注意点&#34;&gt;注意点&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;まず一度に運べる人数は、バスガイドを考慮しないといけないので、客が25人であれば、実際には25-1 = 24人しか運べなかった。&lt;/li&gt;
&lt;li&gt;全てのテストケースの終わりにブランクラインを入れて良かった。&lt;/li&gt;
&lt;li&gt;無向グラフなので注意する。&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;10034-freckles&#34;&gt;10034 Freckles&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;category=38&amp;amp;page=show_problem&amp;amp;problem=975&#34;&gt;10034 - Freckles&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;問題の概要-1&#34;&gt;問題の概要&lt;/h2&gt;

&lt;p&gt;点の座標を与えられた時、全ての点を1本の線で結ぶために必要な最小の線の長さを求める。&lt;/p&gt;

&lt;h2 id=&#34;解説-1&#34;&gt;解説&lt;/h2&gt;

&lt;p&gt;クラスカル法を使って解いた。
クラスカル法は、priority_queueを使って実装した。&lt;/p&gt;

&lt;h1 id=&#34;10131-is-bigger-smarter&#34;&gt;10131 Is Bigger Smarter?&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;category=39&amp;amp;page=show_problem&amp;amp;problem=1072&#34;&gt;10131 - Is Bigger Smarter?&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;問題の概要-2&#34;&gt;問題の概要&lt;/h2&gt;

&lt;p&gt;入力は、像の体重$ W $ と賢さ $S$ のペア。&lt;/p&gt;

&lt;p&gt;以下のように、体重が軽い象の方がより賢くなるsequenceが最大になるような、
象の番号の順番a を求める。&lt;/p&gt;

&lt;p&gt;$$
W[a[i]] &amp;lt; W[a[i+1]] &amp;lt; W[a[i+2]] &amp;lt; &amp;hellip; &amp;lt; W[a[i+n]]&lt;br /&gt;
S[a[i]] &amp;gt; S[a[i+1]] &amp;lt; S[a[i+2]] &amp;lt; &amp;hellip; &amp;lt; W[a[i+n]]&lt;br /&gt;
$$&lt;/p&gt;

&lt;h2 id=&#34;解説-2&#34;&gt;解説&lt;/h2&gt;

&lt;p&gt;動的計画法で求めた。&lt;/p&gt;

&lt;p&gt;まず、入力を 重さが小さい順 で、同じ重さなら賢さ順でソートした。&lt;/p&gt;

&lt;p&gt;次に、動的計画法で、条件を満たすような最大の長さのsequenceを求めた。&lt;/p&gt;

&lt;p&gt;DPの大きさは、1次元で象の数と同じで、各要素にはsequenceの数が入るようにした。
また、sequenceの順番を記録するために、nextという配列に、前の添字を記録するようにした。&lt;/p&gt;

&lt;h1 id=&#34;10154-weights-and-measures&#34;&gt;10154 Weights and Measures&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;category=39&amp;amp;page=show_problem&amp;amp;problem=1095&#34;&gt;10154 - Weights and Measures&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;問題の概要-3&#34;&gt;問題の概要&lt;/h2&gt;

&lt;p&gt;入力は、亀の重さと 自分を含めて耐えられるキャパシティのペア。&lt;/p&gt;

&lt;p&gt;亀をうまく並び替えて、最大何個の亀の亀を重ねられるかを求める。&lt;/p&gt;

&lt;h2 id=&#34;解説-3&#34;&gt;解説&lt;/h2&gt;

&lt;p&gt;動的計画法で、Is Bigger Smarter? と同じ要領で解いた。&lt;/p&gt;

&lt;p&gt;DPは重ねられる最大数DP、重ねた最大の重さsum を記録して解いた。&lt;/p&gt;

&lt;p&gt;しかし、自分の実装した方法では入力によっては最大が求められない場合があるらしく、
WA となってしまった。&lt;/p&gt;

&lt;h1 id=&#34;116-unidirectional-tsp&#34;&gt;116 Unidirectional TSP&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;category=39&amp;amp;page=show_problem&amp;amp;problem=52&#34;&gt;116 - Unidirectional TSP&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;問題の概要-4&#34;&gt;問題の概要&lt;/h2&gt;

&lt;p&gt;MAPを最短経路を求めるような問題。&lt;/p&gt;

&lt;p&gt;左上がスタートで、1マスずつ、右 or 右上 or 右下 しか進めないという制約がある。&lt;/p&gt;

&lt;p&gt;注意点として、MAPの上下がループして繋がっているので、剰余で処理した。&lt;/p&gt;

&lt;h2 id=&#34;解説-4&#34;&gt;解説&lt;/h2&gt;

&lt;p&gt;再帰的に動的計画法を使って、最小のコストとなるようなパスを求めた。&lt;/p&gt;

&lt;h1 id=&#34;10310-dog-and-gopher&#34;&gt;10310 Dog and Gopher&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;category=41&amp;amp;page=show_problem&amp;amp;problem=1251&#34;&gt;10310 - Dog and Gopher&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;問題の概要-5&#34;&gt;問題の概要&lt;/h2&gt;

&lt;p&gt;犬とネズミの座標が1組ずつと、複数の穴の座標が与えられる。
犬はネズミより2倍速い。&lt;/p&gt;

&lt;p&gt;穴に隠れることでネズミが犬から逃げられるかを判定する問題。&lt;/p&gt;

&lt;h2 id=&#34;解説-5&#34;&gt;解説&lt;/h2&gt;

&lt;p&gt;全ての穴について、犬と穴、ネズミと穴の距離を比較して、
以下のような関係を満たす穴が1つでも存在すれば、ネズミは穴に逃げることができるとすれば解けた。&lt;/p&gt;

&lt;p&gt;$$
|犬 - 穴| \times 2 \ge |ネズミ - 穴|
$$&lt;/p&gt;

&lt;h1 id=&#34;10167-birthday-cake&#34;&gt;10167 Birthday Cake&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;category=41&amp;amp;page=show_problem&amp;amp;problem=1108&#34;&gt;10167 - Birthday Cake&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;問題の概要-6&#34;&gt;問題の概要&lt;/h2&gt;

&lt;p&gt;誕生日ケーキに苺がバラバラに載っかているので、苺が同じ数になるようにケーキを二等分する切り方を求める問題。&lt;/p&gt;

&lt;h2 id=&#34;解説-6&#34;&gt;解説&lt;/h2&gt;

&lt;p&gt;この問題では、切り方を $Ax + Ay = 0$ となるような直線で表現する。&lt;/p&gt;

&lt;p&gt;$ -500 \le A \le 500, -500 \le B \le 500 $という制約があるので、
$A, B$ の全ての組みわせでも、高々$ 1000 \times 1000 $通りしか無い。&lt;/p&gt;

&lt;p&gt;よって、総当りで、$A, B$ の組み合わせを求めれば解けた。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Programming Challenges 2</title>
      <link>https://gam0022.net/blog/2013/07/09/programming-challenges-2/</link>
      <pubDate>Tue, 09 Jul 2013 07:00:00 +0900</pubDate>
      
      <guid>https://gam0022.net/blog/2013/07/09/programming-challenges-2/</guid>
      <description>&lt;p&gt;Uva Online Judgeで解いた問題を適当に解説します。&lt;/p&gt;

&lt;p&gt;2ということで、&lt;a href=&#34;https://gam0022.net/blog/2013/06/06/programming-challenges-1/&#34;&gt;前回&lt;/a&gt;の続きです。&lt;/p&gt;

&lt;h1 id=&#34;where-s-waldorf&#34;&gt;Where&amp;rsquo;s Waldorf?&lt;/h1&gt;

&lt;h2 id=&#34;問題&#34;&gt;問題&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;category=31&amp;amp;page=show_problem&amp;amp;problem=951&#34;&gt;10010 - Where&amp;rsquo;s Waldorf?&lt;/a&gt;&lt;/p&gt;

&lt;dl&gt;
&lt;dt&gt;問題&lt;/dt&gt;
&lt;dd&gt;MxNの広さの2次元の行列から単語を検索する問題。&lt;/dd&gt;
&lt;dd&gt;単語は、上、下、左、右、右上、左上、右下、左下の8通りの並び方がある。(縦読みや横読み的な)&lt;/dd&gt;
&lt;dd&gt;また、大文字と小文字は区別しない。&lt;/dd&gt;
&lt;dt&gt;入力&lt;/dt&gt;
&lt;dd&gt;書くのが面倒なので省略。&lt;/dd&gt;
&lt;dt&gt;出力&lt;/dt&gt;
&lt;dd&gt;見つけた単語の1文字目の座標&lt;/dd&gt;
&lt;/dl&gt;

&lt;h2 id=&#34;解説&#34;&gt;解説&lt;/h2&gt;

&lt;p&gt;特にアルゴリズムの工夫のしようもないので、総当りで解く。
ちょっとした工夫としては、1文字目を見つけた次に最後の文字から照合すると、
文字の座標的にありえないケースを早々に飛ばすことができる。&lt;/p&gt;

&lt;p&gt;大文字と小文字を区別しないので、入力を読み取るときにどちらかに統一する。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;crypt-kicker-ii&#34;&gt;Crypt Kicker II&lt;/h1&gt;

&lt;h2 id=&#34;問題-1&#34;&gt;問題&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;category=31&amp;amp;page=show_problem&amp;amp;problem=791&#34;&gt;850 - Crypt Kicker II&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;この問題は、暗号文を解読する問題だった。&lt;/p&gt;

&lt;p&gt;解読のヒントは暗号文を平文にしたときに、次の1行が含まれていることだった。&lt;/p&gt;

&lt;p&gt;&amp;ldquo;the quick brown fox jumps over the lazy dog&amp;rdquo;&lt;/p&gt;

&lt;h2 id=&#34;解説-1&#34;&gt;解説&lt;/h2&gt;

&lt;p&gt;方針としては、まず暗号文を全てstring型のリストとして読み込み、
上の平文の文字数と一致する行を抽出した。
そして、抽出した暗号文から、暗号文→平文にするテーブルの作成を試みる。&lt;/p&gt;

&lt;p&gt;同じ暗号文字に対応する平文字が2文字以上になったら、テーブルの作成を失敗とみなし、
次の抽出した行からテーブルの作成を試みる。
テーブルを作成できなければ、&amp;rdquo;No solution.&amp;rdquo; とする。&lt;/p&gt;

&lt;p&gt;ほとんど総当りのような方法だったが、TLEにならずに解けてよかった。&lt;/p&gt;

&lt;h1 id=&#34;file-fragmentation&#34;&gt;File Fragmentation&lt;/h1&gt;

&lt;h2 id=&#34;問題-2&#34;&gt;問題&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;category=31&amp;amp;page=show_problem&amp;amp;problem=1073&#34;&gt;10132 - File Fragmentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2つに分かれてしまったファイルがあるので、分かれる前の元のファイルを答える問題。&lt;/p&gt;

&lt;h2 id=&#34;解説-2&#34;&gt;解説&lt;/h2&gt;

&lt;p&gt;方針としては次のように行った。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;最大の文字数 max と最小の文字数 min を求める。&lt;/li&gt;
&lt;li&gt;求める文字列の文字数は l = min + max となる。&lt;/li&gt;
&lt;li&gt;長さがl となる ペアの組み合わせを全て作る。&lt;/li&gt;
&lt;li&gt;どの入力に対してもできる文字列があれば、それが答え。&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;vito-s-family&#34;&gt;Vito’s Family&lt;/h1&gt;

&lt;h2 id=&#34;問題-3&#34;&gt;問題&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;category=32&amp;amp;page=show_problem&amp;amp;problem=982&#34;&gt;10041 - Vito’s Family&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ある1つの家を主発点として、他の全てのを訪ねるときに、最小となる距離を求める問題だった。&lt;/p&gt;

&lt;h2 id=&#34;解説-3&#34;&gt;解説&lt;/h2&gt;

&lt;p&gt;ある1つの家を決定する方法がポイントで、Brute Forceしなくても、
家を番地でソートすると、中央の番地(±1)を出発点とすれば、最小の距離となるようだった。&lt;/p&gt;

&lt;h1 id=&#34;longest-nap&#34;&gt;Longest Nap&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;category=32&amp;amp;page=show_problem&amp;amp;problem=1132&#34;&gt;10191 - Longest Nap&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;スケジュールとスケジュールの間の最も長い空き時間を求める問題。&lt;/p&gt;

&lt;p&gt;入力となるスケジュールが時系列順に並んでいるとは限らないので、ソートする必要があった。&lt;/p&gt;

&lt;p&gt;時間は hh:mm 形式で与えられるが、比較するために私は分単位で保持し、
outputの時に hh:mm に計算をして戻すようにした。&lt;/p&gt;

&lt;p&gt;scanf()の指定にミスがあることが原因で、しばらく WA に苦しめられた。&lt;/p&gt;

&lt;h1 id=&#34;shoemaker-s-problem&#34;&gt;Shoemaker&amp;rsquo;s Problem&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;category=32&amp;amp;page=show_problem&amp;amp;problem=967&#34;&gt;10026 - Shoemaker&amp;rsquo;s Problem&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;案件を開始するまにかかった日数、1日ごとに罰金(day)を払わなくてはいけない靴屋が
罰金を最小にするにはどのような順番で案件を処理したら良いかという問題。&lt;/p&gt;

&lt;p&gt;結論から言うと、一日あたりの罰金が大きい順で案件をソートすれば AC となった。&lt;/p&gt;

&lt;p&gt;一日あたりの罰金 = 罰金 / 修理に必要な日数 = fine / day&lt;/p&gt;

&lt;p&gt;初めは、安定ソートでないといけないかと思ったが、不安定なソート(std::sort)でもACとなった。&lt;/p&gt;

&lt;p&gt;どうして、この方法で答えが導けるか証明は難しいが、感覚的には確かに成り立ちそうである。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Programming Challenges 1</title>
      <link>https://gam0022.net/blog/2013/06/06/programming-challenges-1/</link>
      <pubDate>Thu, 06 Jun 2013 09:14:00 +0900</pubDate>
      
      <guid>https://gam0022.net/blog/2013/06/06/programming-challenges-1/</guid>
      <description>&lt;p&gt;Uva Online Judgeで解いた問題を適当に解説します。&lt;/p&gt;

&lt;h1 id=&#34;the-3n-1-problem&#34;&gt;The 3n+1 Problem&lt;/h1&gt;

&lt;h2 id=&#34;問題&#34;&gt;問題&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;category=29&amp;amp;page=show_problem&amp;amp;problem=36&#34;&gt;100 - The 3n + 1 problem&lt;/a&gt;&lt;/p&gt;

&lt;dl&gt;
&lt;dt&gt;問題&lt;/dt&gt;
&lt;dd&gt;ある整数nに対して、問題文のように数列を1になるまで計算する。&lt;/dd&gt;
&lt;dd&gt;nを iからjの 範囲にして、数列を計算した時、&lt;/dd&gt;
&lt;dd&gt;1で終わるまでの数列のサイクル数が最大になるときのサイクル数を求める。&lt;/dd&gt;
&lt;dt&gt;入力&lt;/dt&gt;
&lt;dd&gt;1つのテストケースに対して、次の1行の入力。&lt;/dd&gt;
&lt;dd&gt;&lt;code&gt;i, j&lt;/code&gt;&lt;/dd&gt;
&lt;dt&gt;出力&lt;/dt&gt;
&lt;dd&gt;&lt;code&gt;i, j, 最大のサイクル数&lt;/code&gt;&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;解説&#34;&gt;解説&lt;/h2&gt;

&lt;p&gt;数列を計算するときに、同じ計算を何度もすることになるので、計算結果をHashMapなどに
入れてもいいが、時間制限は3秒なので、特に工夫しなくてもTLEにはならなかった。&lt;/p&gt;

&lt;p&gt;入力が意地悪になっていて、i &amp;lt; j とは限らないので、i &amp;lt; j になるようにswapしないとWAになる。&lt;/p&gt;

&lt;h1 id=&#34;jolly-jumper&#34;&gt;Jolly Jumper&lt;/h1&gt;

&lt;h2 id=&#34;問題-1&#34;&gt;問題&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;category=30&amp;amp;page=show_problem&amp;amp;problem=979&#34;&gt;10038 - Jolly Jumpers&lt;/a&gt;&lt;/p&gt;

&lt;dl&gt;
&lt;dt&gt;問題&lt;/dt&gt;
&lt;dd&gt;与えられた数列a(長さはn)が、&lt;code&gt;Jolly Jumpers&lt;/code&gt;かどうかを判定する問題。&lt;/dd&gt;
&lt;dd&gt;&lt;code&gt;Jolly Jumpers&lt;/code&gt;とは、| a[i] - a[i+1] | の値が、1からn-1までの全ての値をとるような数列。&lt;/dd&gt;
&lt;dt&gt;入力&lt;/dt&gt;
&lt;dd&gt;1つのテストケースに対して、次の1行の入力。&lt;/dd&gt;
&lt;dd&gt;&lt;code&gt;数列の長さn, 数列&lt;/code&gt;&lt;/dd&gt;
&lt;dt&gt;出力&lt;/dt&gt;
&lt;dd&gt;&lt;code&gt;Jolly&lt;/code&gt; or &lt;code&gt;Not jolly&lt;/code&gt;&lt;/dd&gt;
&lt;/dl&gt;

&lt;h2 id=&#34;解説-1&#34;&gt;解説&lt;/h2&gt;

&lt;p&gt;まあ、普通に計算するだけ。&lt;/p&gt;

&lt;p&gt;注意点としては、&lt;code&gt;n == 1&lt;/code&gt;のときは例外処理で&lt;code&gt;Jolly&lt;/code&gt;を出力しないといけない。&lt;/p&gt;

&lt;p&gt;私の場合は、&lt;code&gt;std::set&amp;lt;int&amp;gt;&lt;/code&gt;に数列の差の絶対値をinsertしていき、
&lt;code&gt;(nums.size() == n-1 &amp;amp;&amp;amp; dmin == 1 &amp;amp;&amp;amp; dmax == n-1&lt;/code&gt; になっていたら&lt;code&gt;Jolly&lt;/code&gt;とした。&lt;/p&gt;

&lt;h1 id=&#34;stack-em-up&#34;&gt;Stack &amp;lsquo;em Up&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;category=30&amp;amp;page=show_problem&amp;amp;problem=1146&#34;&gt;10205 - Stack &amp;lsquo;em Up&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;問題-2&#34;&gt;問題&lt;/h2&gt;

&lt;p&gt;トランプをシャッフルする問題。
初期状態は整列した状態。
入力とか書くのめんどいです。&lt;/p&gt;

&lt;h2 id=&#34;解説-2&#34;&gt;解説&lt;/h2&gt;

&lt;p&gt;まあ、そのまま実装するだけなので、特にハマル点は無いと思いました。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>

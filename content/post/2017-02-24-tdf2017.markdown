+++
date = "2017-02-24T10:13:11+09:00"
draft = false
image = ""
math = false
slug = "tdf2017"
tags = ["event", "demo", "CG", "レイマーチング"]
title = "#TokyoDemoFest 2017 の GLSL Graphics Compo で3位入賞！"
toc = true

+++

2017年2月18日(土)・19日(日)の2日間に開催された[Tokyo Demo Fest 2017](http://tokyodemofest.jp/2017/)に参加しました。

Tokyo Demo Fest(TDF)とは、こんなイベントです（公式サイトからの引用）。

> Tokyo Demo Fest は日本で唯一のデモパーティです。 デモパーティは、コンピュータを用いたプログラミングとアートに興味のある人々が日本中、世界中から一堂に会し、デモ作品のコンペティション(コンポ)やセミナーなどを行います。また、イベント開催中は集まった様々な人たちとの交流が深められます。

去年に引き続き、2回目の参加でした。去年の記事はこちらです。

- [#TokyoDemoFest 2016 の GLSL Graphics Compo で3位入賞！](http://gam0022.net/blog/2016/02/24/tokyo-demo-fest/)

今年は、なんと私の勤め先である[KLab株式会社](http://www.klab.com/jp/)もTDFにパートナーという形で参加させていただきました！
去年の様子を紹介したことをきっかけに、弊社内でデモシーンへの関心が高まりつつあり非常に嬉しいです。

また、個人としては「Fusioned Bismuth」という作品でGLSL Graphics Compoで3位を頂くことができました！
自分の作品を多くの方に評価していただけて、大変嬉しいです！！
投票してくださった方々に、この場をお借りして感謝申し上げます。ありがとうございました。

<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr"><a href="https://twitter.com/hashtag/TokyoDemoFest?src=hash">#TokyoDemoFest</a> 2017のGLSL Graphics Compoにて、昨年に引き続き3位をいただきました！嬉しいです！<br>せっかくなのでトロフィーを並べました（左が今年、右が去年）。 <a href="https://t.co/In8QqliO1L">pic.twitter.com/In8QqliO1L</a></p>&mdash; がむ (@gam0022) <a href="https://twitter.com/gam0022/status/833340442578071552">2017年2月19日</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<!--more-->

<blockquote class="twitter-tweet" data-conversation="none" data-lang="ja"><p lang="ja" dir="ltr"><a href="https://twitter.com/hashtag/TokyoDemoFest?src=hash">#TokyoDemoFest</a> 2017のGLSL Graphics Compoにて3位をいただいた作品を個人サイト上に公開しました！上部のGLSL sandbox/Shadertoyボタンからフラグメントシェーダをご覧になれます。<a href="https://t.co/ptqNTT73o3">https://t.co/ptqNTT73o3</a> <a href="https://t.co/0gUwjLO9W1">pic.twitter.com/0gUwjLO9W1</a></p>&mdash; がむ (@gam0022) <a href="https://twitter.com/gam0022/status/833703821935120384">2017年2月20日</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

この記事では、「Fusioned Bismuth」の紹介と、本作品に使った技術やテクニックを紹介したいと思います。

# 作品紹介

作品のスクリーンショットです。

![Fusioned Bismuth - UFO風の形状](/images/posts/2017-02-24-tdf2017/ufo.png)

![Fusioned Bismuth - 雪の結晶](/images/posts/2017-02-24-tdf2017/snow.png)

「金属の生命体」をコンセプトに作成しました。

次のリンクから、作品をWebブラウザ上で実際に動かすこともできます。

ただ、負荷の高い処理を多用しているため、専用のGPUを搭載したPCでないと、フルスクリーンで動作させるのは厳しいです……。

- [Fusioned Bismuth | gam0022.net](http://gam0022.net/webgl/#raymarching_tdf2017)
- [Fusioned Bismuth | Shadertoy](https://www.shadertoy.com/view/Msscz7)

# Fusioned Bismuth に使った技術・テクニック
<!--
「Fusioned Bismuth」で使ったテクニックを紹介したいと思います。
（数行前に同じこと言ってるので省略）
-->

## レイマーチング

レイマーチング（別名 Sphere Tracing）とは、距離関数と呼ばれる数式で定義したシーンに対して、レイの衝突判定を行って絵を出す手法です。
技術的な詳細は、こちらの記事に書いてあります。

- [シェーダだけで世界を創る！three.jsによるレイマーチング](https://www.slideshare.net/shohosoda9/threejs-58238484)

レイマーチングは、デモシーン界隈ではすっかり定着していて、GLSL Graphics Compoでも多く見かけられました。
おそらく10人中8人はレイマーチングを使っていたのではないでしょうか。

そのような中、
[@soma_arc](https://twitter.com/soma_arc)さんはレイマーチングを全く使わない[「Schottky Waltz」](https://www.shadertoy.com/view/XslyzH)という2D作品を投稿し、見事にGLSL Graphics Compoの1位を獲得されていました！

レイマーチングや3Dに頼らずとも、魅せ方によってこんなにもクールな表現ができるのか！と頭を殴られたような衝撃を受けました。

レイマーチングはとても面白い手法ですが、一辺倒にならずにバランスが大切だなと痛感しました。

## fold（折りたたみ）を使った形状設計

本作品では、foldというテクニックを活用して、少し凝った距離関数を設計しています。
foldについては、去年のTDFで[gaziya5](https://twitter.com/gaziya5)さんに教えていただきました。

<!--
### 2Dのfold

foldの分かりやすい例は「鏡文字」です。

これはアルファベットのGをY軸中心に折りたたんだ、いわゆる鏡文字です。

![Gの鏡文字](/images/posts/2017-02-24-tdf2017/mirror.png)

このようなY軸中心のfoldをGLSLの関数にすると、単純にxを絶対値することにより実現できます。

```c
float foldX(vec2 p) {
    p.x = abs(p.x);
    return p;
}
```

### foldの実例(3D)

箱をZ軸に時計回りに回転させたものをYZ平面にfoldすると、距離関数としては1つの箱なのに、左右2つに枝分かれさせることができます。

![YZ平面にfoldしたBox](/images/posts/2017-02-24-tdf2017/fold-1.png)

前の例では2DだったのでY軸に対するfoldでしたが、今回は3DなのでYZ平面に対するfoldになっています。

実際にGLSLとして動作する距離関数はこうなります。

```c
vec3 foldX(vec3 p) {
    p.x = abs(p.x);
    return p;
}

mat2 rotate(float a) {
    float s = sin(a),c = cos(a);
    return mat2(c, s, -s, c);
}

float dTree(vec3 p) {
    vec3 size = vec3(0.1, 1.0, 0.1);
    float d = sdBox(p, size);
    p = foldX(p);
    p.y -= 0.1;
    p.xy *= rotate(-1.2);
    d = min(d, sdBox(p, size));
    return d;
}
```

### 再帰的なfold

このfoldを再帰的に適用すると、フラクタル図形ができます。

![再帰的なfold](/images/posts/2017-02-24-tdf2017/fold-2.png)

これがGLSLの距離関数です。

ループの末尾でpを更新することで、再帰的にfoldを適用しています。

```c
float dTree(vec3 p) {
    float scale = 0.8;
    vec3 size = vec3(0.1, 1.0, 0.1);
    float d = sdBox(p, size);
    for (int i = 0; i < 7; i++) {
        vec3 q = foldX(p);
        q.y -= size.y;
        q.xy *= rotate(-0.5);
        d = min(d, sdBox(p, size));
        p = q;
        size *= scale;
    }
    return d;
}
```

通常、フラクタル図形を表現するためには再帰関数が必要ですが、距離関数を用いればループで十分表現できるというのが興味深いポイントですね。
たとえば、`dTree` の中には、sdBoxがたったの2回しか登場していません。再帰的に `foldX` を適用することで、Boxを無数に複製しています。

### 回転のfold

これまでは面に対するfoldを扱いましたが、特定の軸を中心に回転させたfoldも考えられます。

回転のfoldは[gaz](https://twitter.com/gaziya5)さんの[DE used folding](https://www.shadertoy.com/view/Mlf3Wj)からお借りしました。

dTreeの木のような形をうまく調整し、Z軸方向に6回転させるfoldを適用すると「Fusioned Bismuth」に登場した雪の結晶のような形状を得られます。

![Fusioned Bismuth - 雪の結晶](/images/posts/2017-02-24-tdf2017/snow.png)

```c
mat2 rotate(in float a) {
    float s = sin(a), c = cos(a);
    return mat2(c, s, -s, c);
}

// https://www.shadertoy.com/view/Mlf3Wj
vec2 foldRotate(in vec2 p, in float s) {
    float a = PI / s - atan(p.x, p.y);
    float n = PI2 / s;
    a = floor(a / n) * n;
    p *= rotate(a);
    return p;
}

float dTree(vec3 p) {
    float scale = 0.6 * saturate(1.5 * sin(0.05 * time));
    float width = mix(0.3 * scale, 0.0, saturate(p.y));
    vec3 size = vec3(width, 1.0, width);
    float d = sdBox(p, size);
    for (int i = 0; i < 10; i++) {
        vec3 q = p;
        q.x = abs(q.x);
        q.y -= 0.5 * size.y;
        q.xy *= rotate(-1.2);
        d = min(d, sdBox(p, size));
        p = q;
        size *= scale;
    }
    return d;
}

float dSnowCrystal(inout vec3 p) {
    p.xy = foldRotate(p.xy, 6.0);
    return dTree(p);
}
```

### 回転のfoldの別例

この `foldRotate` はUFO風の形状にも利用しています。
たった4つのBoxに`mod` や `foldRotate` を適用しただけなのに、それなりに雰囲気を出すことができたと思っています。

![Fusioned Bismuth - UFO風の形状](/images/posts/2017-02-24-tdf2017/ufo.png)

```
#define opRep(p, interval) (mod(p, interval) - 0.5 * interval)
#define opRepLimit(p, interval, limit) (mod(clamp(p, -limit, limit), interval) - 0.5 * interval)

float dWing(in vec3 p) {
    float t = time;
    float l = length(p.xz);
    float fusion = gauss(time * 2.0);

    float a = 0.1 + 0.06 * (1.0 + sin(PI * t + l));
    float b = min(0.2 * t, 10.0) * gauss(l) + 0.1 * fusion * hWave(p.xz, t);
    p.y += -b + 15.0;

    vec3 p1 = p;
    p1.xz = opRepLimit(p.xz, 1.0, 20.0);

    vec3 p2 = p;
    p2 = opRep(p, 0.5);

    float d =   sdBox(p1, vec3(0.2 + a * 3.0, 12.0 - a,       0.2 + a));
    d = min(d,  sdBox(p1, vec3(0.4 - a,       13.0 - 4.0 * a, 0.1 + a)));
    d = max(d, -sdBox(p1, vec3(0.3 - a,       14.0 - 4.0 * a, a)));
    d = max(d, -sdBox(p2, vec3(0.8 * a, 1.0 - a, 0.8 * a)));
    return d;
}

float dUfo(inout vec3 p) {
    float t = max(time * 0.5, 1.0);
    float t1 = floor(t);
    float t2 = t1 + easeInOutCubic(t - t1);

    p.xz = foldRotate(p.xz, min(t2, 10.0));
    p.z -= 0.5;

    float d = dWing(p);
    return d;
}
```

### 一般化されたfold

また、任意の法線 `n` を持った面に対する一般化されたfoldがSyntopiaに紹介されています。興味のある方は、見てみると良いでしょう。

- [Distance Estimated 3D Fractals (III): Folding Space](http://blog.hvidtfeldts.net/index.php/2011/08/distance-estimated-3d-fractals-iii-folding-space/)

```c
p -= 2.0 * min(0.0, dot(p, n)) * n;
```

### foldまとめ
-->
foldは面白いテクニックですが、使いこなすのが大変でした。
参考になる資料がほとんど無かったので、トライ・アンド・エラーを繰り返して、なんとか欲しい形に持っていきました。

それでも苦労に見合うだけの強力なテクニックだと思いますので、もっと使いこなせるようになりたいですね。

## シェーディング関係

綺麗にシェーディングを行うために、使えそうなテクニックは全部詰め込みました。

- ソフトシャドウ
- Ambient Occlusion
- 環境マップ
- ハーフランバート
- ノーマルマップ（距離関数を衝突判定とシェーディングで使い分け）

### ソフトシャドウ

ソフトシャドウはデモシーン界隈では広く知られている手法を使いました。
以前に[スライド](https://speakerdeck.com/gam0022/reimatingudesohutosiyadou)を書いたので、もし興味のある方はご覧ください。

### Ambient Occlusion

Ambient Occlusionは、[レイトレ合宿で覚えた方法](http://gam0022.hatenablog.com/entry/raytracingcamp4)をそのまま流用しました。

### 環境マップ

[昨年度末にパストレーサーを開発した時](http://qiita.com/gam0022/items/18bb3612d7bdb6f4360a)、IBLを入れた途端に急激に雰囲気が良くなったことに味をしめて、本作品にも環境マップを取り入れました。
2Dのパーリンノイズをうまく3Dにマッピングすることで、空の環境マップを表現しています。
これにはmorgan3dさんの[Sky and Ground](https://www.shadertoy.com/view/4sKGWt)のコードをお借りしました。

### ハーフランバート

普通にランバートシェーディングを行うと陰影がはっきりしすぎるので、`0.5 * diffuse + 0.5` という式で補正しています。
この手法はハーフランバートと呼ばれます。
実装が簡単で処理も軽量なのに、ぐっと見た目が良くなります。

### ノーマルマップ（衝突判定とシェーディングで距離関数を使い分け）

生肉のような気持ち悪い質感のマテリアルの表面の凹凸には、衝突判定用とシェーディング用で距離関数を使い分ける軽量化の工夫を行いました。

![ノーマルマップを使ったマテリアル](/images/posts/2017-02-24-tdf2017/normal.png)

レイマーチングでは通常数百回程度のマーチングループが必要で、マーチングループのたびに距離関数を評価しなければなりません。
そのため、距離関数が少しでも複雑になると、パフォーマンスが極端に悪化してしまいます。
本作品でも細かな凹凸を表現するために、雲に使用したものと同様のパーリンノイズを距離関数に組み込もうとしたのですが、パフォーマンスが非常に悪くなってしまいました。

そこで、評価回数に基いて距離関数を使い分けることで、処理の軽量化を図りました。
まず、レイマーチングで使用する距離関数（複数回評価される）には、凹凸の無い処理の軽い距離関数を使用しています。
そして、一度しか評価されないシェーディング用の距離関数には、凹凸のある重たい距離関数を使用しています。

このような使い分けは、[@\_Pheema\_](https://twitter.com/_Pheema_)さんに教えていただきました。

### 雪のポストエフェクト

後半の雪が降るシーンは、スクリーンスペースのポストエフェクトで実現しました。そのため、実はカメラの動きが雪に追従していません。
このポストエフェクトには[baldand](https://www.shadertoy.com/view/ldsGDn)さんのコードをお借りしました。

## デバッグ用のGLSL Sandbox互換システム

GLSL Graphics Compoでは、GLSL Sandbox上で動作する作品を提出します。
直接GLSL Sandbox上で開発することも可能ですが、開発中のデバッグを効率化するためにローカル環境で動くGLSL Sandbox互換システムを用意しました。

このシステムには、再生位置のシーク機能や自由カメラモードが付いています。

また、非常に雑な実装ですが、GLSL Sandbox/Shadertoy 用に加工した状態でシェーダをエクスポートする機能も実装しました。
<!--
去年は作品の提出直前にコードをGLSL Sandboxで動作するように修正する作業があったのですが、今年は自動化できました。
-->

- [Fusioned Bismuth (TokyoDemoFest GLSL Graphics Compo 3rd place)](https://github.com/gam0022/webgl-sandbox/pull/11)

## カメラワーク

カメラワークはゴリゴリとハードコーディングしました。

カメラの座標とターゲットでカメラの動きを定義し、キーフレームで制御するようにしました。
シーン中に複数の頂点を配置し、頂点間を時間で補完しています。

カメラワークをコード制御するのは初めてで、なかなか思った通りにカメラを動かせず苦労しました……。

[cameraControl](https://github.com/gam0022/webgl-sandbox/blob/1a3f626ed4c5cfb6fedd69ea0feb93a4ea5324bb/raymarching_tdf2017.html#L529-L584)
関数でカメラ制御を行っているので、興味のある方はどうぞ（反面教師として）。

カメラワークと言えば、Combined PC Demo Compoで1位を獲得された[@FMS_Cat](https://twitter.com/FMS_Cat)さんは、TDFのためにAutomatonというツールを開発されていました。
カメラを含めた様々な「動き」をGUI上で定義して、WebGLで扱いやすいJSON形式で書き出す仕組みのようです。
本気で作品を作ろうと思ったら、カメラワークの制御はツールから開発するような大きなコストを払って当然かもしれませんね。

<blockquote class="twitter-tweet" data-lang="ja"><p lang="en" dir="ltr">The Automaton playground! You can try Automaton Experience here!<a href="https://t.co/1A3UaoJ0P6">https://t.co/1A3UaoJ0P6</a> <a href="https://t.co/5pmk0VEUsq">pic.twitter.com/5pmk0VEUsq</a></p>&mdash; FM Synthesis Cat (@FMS_Cat) <a href="https://twitter.com/FMS_Cat/status/834037276921384960">2017年2月21日</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

## 反省

今年は、技術的な知識が増えたお陰で、様々な手法を取り入れた高度な作品となりました。
一方で、カメラワークが遅かったり、いまいち盛り上がりにかけたりと、デモシーンとしては退屈な作品だったな、と会場の様子を見ていて反省しました。
デモシーンの作品には、ノリや勢いといった観る人を飽きさせない工夫も大切ですね。
来年は、観客が目を離せなくなるような魅力的な作品を出したいと思います！頑張ります！！

# まとめ

とにかくTDFは最高のイベントでした！

<!--Compoやセミナー、参加者との交流を含めて、どれも非常に楽しかったです！（↓言ってること同じ）-->
Compoやセミナーを通して新しい発見を多く得られたのはもちろんのこと、他の参加者とレイマーチングなどのCG技術について深い議論ができました。

TDFについて書きたいことはたくさんあるのですが、長くなるので、この記事では自分の作品の紹介のみに留めさせていただきました。

デモシーンは面白い文化だと思うので、もっと多くの人が興味を持ってくださると嬉しいです。

来年はどんなフレンズの作品に会えるかな？

![どんなフレンズの作品に会えるかな？](/images/posts/2017-02-24-tdf2017/friends.png)

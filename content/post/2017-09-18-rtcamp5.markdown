+++
draft = false
tags = [
  "CG", "レイトレーシング", "パストレーシング", "Rust", "レイトレ合宿"
]
title = "レイトレ合宿5‽に参加して、Rustでパストレーシングを実装しました！"
slug = "rtcamp5"
date = "2017-10-02T09:00:00+09:00"
image = "/images/posts/2017-09-18-rtcamp5/result.png"
toc = true
math = false

+++

9月9日(土)～9月10日(日)に諏訪湖で開催された[レイトレ合宿5‽](https://sites.google.com/site/raytracingcamp5/)に参加しました！

レイトレ合宿は完全自作のレイトレーサーを走らせて画像の美しさを競うイベントです。

去年に初参加させていただき、今年で2回目の参加になります。去年の参加報告は[こちら](http://gam0022.hatenablog.com/entry/raytracingcamp4)です。

私はRustでパストレーサ（Hanamaruレンダラー）を実装して、こんな感じの画像をレンダリングしました。

今年は16人中9位なので、去年の13人中10位よりは進歩しました！

[![result](/images/posts/2017-09-18-rtcamp5/result.jpg)](/images/posts/2017-09-18-rtcamp5/result.png)

↑リンクをクリックするとオリジナルの可逆圧縮の画像になります。

ソースコードはGitHubに公開しています（スターください）。

- [https://github.com/gam0022/hanamaru-renderer/](https://github.com/gam0022/hanamaru-renderer/)

<!--more-->

こちらは合宿当日のプレゼン資料です。

<script async class="speakerdeck-embed" data-slide="1" data-id="6159e679b62d4d87a718fdf97efe5ed8" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script>

今年もレンダリング分野の最先端で活躍されている方々がたくさん参加されていました。

趣味でRedqueenレンダラーを開発し、仕事でAutodeskのArnoldレンダラーを開発されている[大垣真二](https://twitter.com/redqueenrender)さん、
[ファーストオーサーの論文がSIGGRAPH 2017にアクセプトされた](http://lightmetrica.org/h-otsu/project/inverse/)研究者の[Hisanari Otsu](https://twitter.com/hi2p_perim)さんなどが参加されていました。
他にも[t-pot.com](http://t-pot.com/)の[今給黎隆](https://twitter.com/Imagire)さん、
[project-asura.com](http://project-asura.com/)の[Pocol](https://twitter.com/projectasura)さんなど、
CGの勉強をしたことがあれば必ずお世話になるような有名なサイトの管理人たちも参加されていました。

この記事では、自作のパストレーサの解説やRust初心者によるRustの感想を書きます。

当日の様子は[Pentan](https://twitter.com/c5h12)さんの[記事](http://c5h12.hatenablog.com/entry/2017/09/17/184007)にまとめられています。
興味がある方はそちらもご覧ください。

# Hanamaruレンダラーの主な仕様

ポリゴンとの衝突判定をBVHで高速化したり、薄レンズモデルによる被写界深度を入れたり、IBLしたりしました。

- ポリゴンメッシュに対応
    - objファイルの読み込みに対応
    - BVHで衝突判定を高速化
- albedo / roughness / emissionをテクスチャで指定可能
    - PBR用のテクスチャ素材などを使える
- 薄レンズモデルによる被写界深度（レンズのピンぼけ）
- Image Based Lighting（IBL）
    - CubeMapに対応
- 対応マテリアル
    - 完全拡散反射
    - 完全鏡面反射
    - 金属面（GGXの法線分布モデル）
    - ガラス面（GGXの法線分布モデル）

# シーンの解説

宝石をランタイム時にプロシージャルに配置してシーンを作りました。

- うさぎのモデル
    - [Stanford Bunny](http://graphics.stanford.edu/data/3Dscanrep/)を[MeshLab](http://www.meshlab.net/)で1000ポリゴンにリダクション
- 宝石のモデル
    - 知り合いにモデリングしてもらいました。感謝
    - 拡大・平行移動・回転の変換行列を実装
    - 重ねて置けない制約をつけつつ、乱数でいい感じに配置（43個）
    - seed値を変えればシーンも変化する（ランタイム時にプロシージャルに配置）
- 床はPBR用のテクスチャを拝借
    - [Marble Floor Tiles Substance 2 (Customizable)](https://www.textures.com/download/substance0010/125790)
- CubeMap用のテクスチャも拝借
    - [Humus - Textures](http://www.humus.name/index.php?page=Textures)

# 高速化の取り組み

今年の合宿では4分33秒以内にレンダリングするルールでしたので、いくつかの高速化に取り組みました。

ちなみに出力画像の解像度についてはルールはありませんが、目標を高くするために1980x1080を採用しました。

パストレーシング・レイトレーシングの高速化のアプローチはいくつかあります。

1. 衝突判定の高速化
2. モンテカルロ積分のサンプリングの効率化
3. 並列処理

それぞれ何を行ったのか簡単に紹介します。

## 衝突判定の高速化

レイトレの実行時間のほとんどは衝突判定が占めるので、これを高速化するのは効果的です。

衝突判定の高速化としてはBVH（Bounding Volume Hierarchy）を実装しました。

シーン内のすべてのオブジェクトを総当りで衝突判定せずに、空間分割によって衝突判定の回数を減らします。

具体的な実装などについては、[お餅](https://twitter.com/omochi64)さんの記事を参考にしました。

- [Bounding Volume Hierarchy (BVH) の実装 - 構築編](http://qiita.com/omochi64/items/9336f57118ba918f82ec)
- [Bounding Volume Hierarchy (BVH) の実装 - 交差判定編](http://qiita.com/omochi64/items/c2bbe92d707b280896fd)

お餅さんの記事では、Surface Area Heuristicsという手法で評価関数をつかった領域分割をしていましたが、
今回は実装の時間が無かったので、領域の最長辺を軸に選んで要素数で2分割する実装にしました。
単純な分割方法ではありますが、総当りと比較すれば十分に高速化できました。

<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">全探索だと251.251 sec<br>軸をランダムに選んでポリゴンを2等分するBVHだと 36.28 sec<br>AABBの最長辺を軸に選んでポリゴンを2等分するBVHだと 28.424 sec</p>&mdash; がむ (@gam0022) <a href="https://twitter.com/gam0022/status/896963950947975168">2017年8月14日</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

シーンを構成するオブジェクトとして、ポリゴンメッシュ、球体、立方体の3種類に対応しました。
シーンを構成するオブジェクトに対してのBVHだけでなく、ポリゴンメッシュを構成するメッシュに対してもBVHを構築しました。

## モンテカルロ積分のサンプリングの効率化

パストレーシングはレンダリング方程式を[モンテカルロ法](http://rayspace.xyz/CG/contents/montecarlo/)をつかって解を求める手法です。

モンテカルロ積分のサンプリングを効率化すれば、より少ないサンプリング数でノイズの少ない収束した結果を得ることができます。

サンプリングの効率化のための手法としては、重点的サンプリング、多重重点的サンプリング、Next Event Estimationなどがあります。

詳しくは[Shocker](https://twitter.com/Shocker_0x15)さんの資料を参照してください。

<iframe src="//www.slideshare.net/slideshow/embed_code/key/aoZ5RhsL8f6NPC" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe> <div style="margin-bottom:5px"> <strong> <a href="//www.slideshare.net/shocker_0x15/ss-52688052" title="パストレーシング" target="\_blank">パストレーシング</a> </strong> from <strong><a href="https://www.slideshare.net/shocker_0x15" target="\_blank">Shin Watanabe</a></strong> </div>

今回はレンダリング方程式のcos項に比例した重点的サンプリングのみ行いました。

レンダリング方程式のcos項に比例した重点的サンプリングを行うと、
確率密度関数で除算する処理でレンダリング方程式のcos項を打ち消すことができ、パストレーシング実装をシンプルにできます。

今回のシーンではIBL光源が支配的なため、cos項に比例した重点的サンプリングのみで少ないサンプリング数でレンダリング結果が収束しましたが、
光源が小さいシーンだと分散が大きいために収束が遅くなってしまいます。

来年までにはNext Event Estimationに挑戦してみたいです。

## 並列処理

並列処理もレイトレにおいては超重要です。

今回の実行環境は64コアのCPUなので、並列処理しないと計算リソースを全体の1/64しか使うことができません。

Rustの標準ライブラリの`std::thread`でも並列化はできるのですが、
CPUのコア数に応じてスレッドプールを作ったり、適切にスケジューリングする部分はプログラマーが頑張る必要がありました。

[Rayon](https://github.com/nikomatsakis/rayon)という並列処理のライブラリを利用すれば、面倒なスケジューリングを自動でやってくれそうだったので、これを採用しました。

### 並列化の戦略

並列化の戦略を2通り試しました。

![並列化の戦略](/images/posts/2017-09-18-rtcamp5/pararell.jpg)

#### サンプリング数を固定化した並列化

まずは開発初期の並列化の戦略を説明します。

図の左のように時系列で行(y方向)ごとに処理し、列(x方向)の各ピクセルの計算を並列で行うようにしました。
各スレッド内で全サンプリングの計算して、最終的な画素値まで決定しました。

この戦略はサンプリング数を事前に決定する必要があるのですが、
サンプリング数を大きくしすぎると4:33の制限時間をオーバーしすぎる心配があり、
逆に小さくしすぎると計算リソースを使い切れなくなってしまいます。

今回のようにレンダリング時間がルールで決まっている場合は、あまり良い戦略ではありませんでした。

#### サンプリング数を動的に変更できる並列化

そこで、開発後半では並列化の戦略を変更しました。

図の右のように時系列でサンプリングごとに処理し、全ピクセルの計算を並列で行うようにしました。
直前の1サンプリングの所要時間から次のサンプリングで時間切れになることを予想したら、その時点でのサンプリング数の結果を出力して終了します。

これでサンプリング数を実行環境のスペックに応じて動的に調整できるようになりました。

しかし、この変更によって少しパフォーマンスが低下しました。
同じサンプリング数で比較すると、計算時間が5%程度増加してしまいました。
テクスチャをたくさん使ったシーンなので、キャッシュのヒット率が低下したのが原因かもしれません。

### Rayonによる並列化をしたレンダリングの関数

これが実際のサンプリング数を動的に変更できる並列化をしたレンダリングの関数です。

Rayonでは、`iter_mut()`の代わりに`par_iter_mut()`でイテレーターを作ると並列処理ができます。

元のコードをほとんど変更せずに並列化できるのは素晴らしいですね。

同じことを`std::thread`で書こうとすると、かなりコードが複雑になると思います。

```
fn render(&mut self, scene: &SceneTrait, camera: &Camera, imgbuf: &mut ImageBuffer<Rgb<u8>, Vec<u8>>) -> u32 {
    let resolution = Vector2::new(imgbuf.width() as f64, imgbuf.height() as f64);
    let num_of_pixel = imgbuf.width() * imgbuf.height();
    let mut accumulation_buf = vec![Vector3::zero(); num_of_pixel as usize];

    // NOTICE: sampling is 1 origin
    for sampling in 1..(self.max_sampling() + 1) {
        accumulation_buf.par_iter_mut().enumerate().for_each(|(i, pixel)| {
            let y = i as u32 / imgbuf.width();
            let x = i as u32 - y * imgbuf.width();
            let frag_coord = Vector2::new(x as f64, (imgbuf.height() - y) as f64);
            *pixel += self.supersampling(scene, camera, &frag_coord, &resolution, sampling);
        });

        if self.report_progress(&accumulation_buf, sampling, imgbuf) {
            return sampling;
        }
    }

    self.max_sampling()
}
```

[https://github.com/gam0022/hanamaru-renderer/blob/57041bcdd84d44ce9a0ea4aa0a9c94756ed835ee/src/renderer.rs#L27-L47](https://github.com/gam0022/hanamaru-renderer/blob/57041bcdd84d44ce9a0ea4aa0a9c94756ed835ee/src/renderer.rs#L27-L47)

# 開発の振り返り

開発期間は1ヶ月弱でした。7/30くらいに着手して9/8の締め切りギリギリまで開発していました。

最低限のパストレが動くまでは1週間くらい、並列化やポリゴンの衝突判定のBVHによる高速化までは2週間くらいかかりました。

シーン調整していくうちに、バグや不具合が見つかったので、後半はシーン構築のための機能を追加しつつ、バグ修正をしていました。

## Rustについて

去年はC++で開発したのですが、今年はRustでフルスクラッチで書き直しました。

Rustの所有権に慣れるまでは大変でしたが、トータルで見ればC++ではなくRustで開発して良かったと思います。

### Rustの採用理由

こんな感じの理由でRustを採用しました。

- 実行時のパフォーマンスを重視している
    - 並列処理が簡単にできて、実行時のオーバヘッドが低いことはレイトレには必須条件
- 高いポータビリティ
    - MacでもWindowsでも、コードの変更なしに動かせる
- Webブラウザ上でも動かせる
    - WebAssemblyの出力をサポートしている数少ない言語
        - 他にサポートしているのはC++だけ？
        - FirefoxのMollizaが中心に開発しているからなのだろうか
- 弊社(KLab)の社員が2人もRustでレイトレしており、困ったら教えてもらおうと思った
    - [Rust でレイトレーシング入門しました](https://qiita.com/kiritex/items/786dbed4b7a2a22cbb89) by [@trigott](https://twitter.com/trigott)さん
    - [hhatto/ray-tracing-in-one-weekend-in-rust](https://github.com/hhatto/ray-tracing-in-one-weekend-in-rust) by [@hhatto](https://twitter.com/hhatto)さん

### Rustの学習方法

Rustについて何も知らなかったので、まずは通勤中に[プログラミング言語Rust](https://rust-lang-ja.github.io/the-rust-programming-language-ja/1.6/book/README.html)を読んでRustの思想を学びました。

[Rust Playground](https://play.rust-lang.org/)でブラウザ上でRustのコードを書いて実行できるので、
よく分からないところは実際に短いコードを書いて理解を深めました。

正直に言うと、Rustの学習コストはかなり高いと感じました。
Rustの予習に1週間かけましたが、いざコードを書いてみると所有権や型のサイズが不定などのコンパイルエラーに阻まれて、心が折れそうになりました。
特に所有権やライフタイムは自分には全く馴染みの無い概念で理解するのに苦労させられました。
また所有権を理解できたとしても、所有権のルールを守りながらコードを書くのは別問題だなと痛感しました。

はじめは大変でしたが、慣れてくればコンパイルエラーに阻まれることはなくりました。
所有権を守るために設計から見直すこともありましたが、結果的に所有権を意識することでコードがスッキリしました。

Rustは所有権という仕組みによってデータ競合を排除したり、ガーベジコレクタのない低オーバヘッドを実現しているので、
この辺は「学習コスト」対「安全性＋実行時パフォーマンス」のトレードオフだろうと感じました。

C++の経験がある人は[Rustは何が新しいのか（基本的な言語機能の紹介） - いもす研 (imos laboratory)](https://imoz.jp/note/rust-functions.html)という記事を読むとRustの所有権の雰囲気を掴めると思いました。

Rustにはcargoというビルドツール兼パッケージ管理システムが標準搭載されていて、これはとても便利でした。
`cargo run`を叩くだけで、自動的にパッケージをフェッチし、依存関係を解決してビルドと実行ができます。

開発前半は通勤中にMacで開発して、開発後半は高スペックなWindowsデスクトップに開発環境を移行しました。
cargoのおかげでMacもWindowsも同じようにビルドができるので、開発環境を行き来するコストが全くありませんでした。

### Rustのenum

Rustの特徴はたくさんあるのですが、[列挙型](https://rust-lang-ja.github.io/the-rust-programming-language-ja/1.6/book/enums.html)は良いと思いました。
Cのenumとは違って、構造体やタプルのような各ヴァリアントに関連するデータを持たせることができるので、マテリアルのタイプの定義に便利でした。

```rust
#[derive(Clone, Debug)]
pub enum SurfaceType {
    Diffuse,
    Specular,
    Refraction { refractive_index: f64 },
    GGX { roughness: f64 },
    GGXReflection { roughness: f64, refractive_index: f64 },
}
```

https://github.com/gam0022/hanamaru-renderer/blob/d4eb5320fbe9ed18de152496c6e3aa070e947dfb/src/material.rs

言語組み込みのnull許容型（[Option](https://doc.rust-lang.org/std/option/enum.Option.html)）もenumで実装されていました。
`Option<T>`を`Some(T)`または`None`をとるenumにすることでnullチェック漏れをコンパイル時の型のチェックでエラーとして検出できます。
この仕組はとても賢いですね。

```rust
pub enum Option<T> {
    None,
    Some(T),
}
```

HaskellのMaybeモナドと全く同じ仕組みなので、関数型言語の良いところも取り入れているのかなと思いました。

他にも[リスト処理](https://rust-lang-ja.github.io/the-rust-programming-language-ja/1.6/book/iterators.html)も充実していて好感が持てました。

### RustのオススメIDE

個人的にRustの開発環境は[IntelliJにRustのプラグイン](https://intellij-rust.github.io/)をインストールするのが最強だと思いました。
関数定義にジャンプできるのはもちろん、メソッド名の補完やリファクタリングなども普通に使えます。Vimは卒業しました。

## デバッグ機能

レンダラーがある程度完成したら、シーンの編集作業がメインになっていきます。
しかし、シーンの確認のためにレンダリング結果を何分も待つのは時間の無駄です。

そこで直接照明のみ考慮し、屈折や反射をしない高速なレンダリングのモードを実装しました。

その他にも、法線・深度値・焦点面からの距離を表示するデバッグ機能を実装して、シーン編集の効率を向上させました。

![debug](/images/posts/2017-09-18-rtcamp5/debug.jpg)

# まとめ

締め切り駆動開発でしたが、前から試したかったBVHなどを実装できたので良かったです。
Rustも手ごわかったですが、気合でなんとか習得することができました。

合宿のセミナーや雑談などでは、レンダリング分野の最先端で活躍されている方々にレイトレの知見をいただき、モチベーションが高まりました。
セミナーでは、大垣さんによる「20年間レンダラーを開発しているうちに考えたこと」、うしおさんによる「ファーのレンダリング」、Otsuさんによる「最新のPM/MCMC系手法」についてお話ししていただきました。
また、他の参加者にもNext Event Estimationの疑問点、双方向パストレーシングについて教えていただきました。

また、宿の料理が美味しかったことや、温泉から見える夕暮れの諏訪湖がとても綺麗だったことが思い出深いです。観光もとても楽しかったです。

運営・企画してくださった[q](https://twitter.com/q_cinnamon)さん、[hole](https://twitter.com/h013)さん、本当にありがとうございました。

# おまけ：制作の過程

モチベーション維持のために進捗をTwitterにアップロードするようにしました。

徐々にステップアップしていく様子を振り返ることができたので、やってよかったと思います。

<!--これまでTwitterのモーメント機能を活用していませんでしたが、ツイートをブログにまとめるときには便利ですね。-->

<a class="twitter-moment" href="https://twitter.com/i/moments/913798905455718401?ref_src=twsrc%5Etfw">レイトレ合宿5‽</a> <script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

資料公開したときのツイートです。

<blockquote class="twitter-tweet" data-conversation="none" data-lang="ja"><p lang="ja" dir="ltr"><a href="https://twitter.com/hashtag/%E3%83%AC%E3%82%A4%E3%83%88%E3%83%AC%E5%90%88%E5%AE%BF?src=hash">#レイトレ合宿</a> のためにRustで開発したパストレーサの紹介スライドです。 BVHによるポリゴンとの衝突判定を高速化、薄レンズモデルによる被写界深度などしました😆<a href="https://t.co/itDLyWNpFx">https://t.co/itDLyWNpFx</a></p>&mdash; がむ (@gam0022) <a href="https://twitter.com/gam0022/status/906817610246848512">2017年9月10日</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<!--
<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">土日はRustを頑張っていた。<br>鬼門と噂の所有権や借用については、予習してきたので、思ったより苦労せずに済んだ。<br>Rustはスタック領域にメモリ確保するので、structのサイズが事前に分かってないとコンパイルできない仕様に悩まされた(Box&lt;T&gt;で解決)。</p>&mdash; がむ (@gam0022) <a href="https://twitter.com/gam0022/status/891665053644054529">2017年7月30日</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet" data-conversation="none" data-lang="ja"><p lang="ja" dir="ltr">Rustで生成した最初の画像<br>image crateが超便利だった。 <a href="https://t.co/ZCZrg05ms6">pic.twitter.com/ZCZrg05ms6</a></p>&mdash; がむ (@gam0022) <a href="https://twitter.com/gam0022/status/891665290659889153">2017年7月30日</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet" data-conversation="none" data-lang="ja"><p lang="ja" dir="ltr">なんとかレイを飛ばすことに成功した図<br>Rust、慣れるまでがやっぱり大変だった...<br>実装1割、コンパイル通すの9割みたいな時間配分ｗ <a href="https://t.co/bmD8pwaWRR">pic.twitter.com/bmD8pwaWRR</a></p>&mdash; がむ (@gam0022) <a href="https://twitter.com/gam0022/status/891665866089091072">2017年7月30日</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet" data-conversation="none" data-lang="ja"><p lang="ja" dir="ltr">Planeを実装。<br>スクリーン上のY軸を反転させるのを忘れていて、座標系が何もかもバグってたのを修正。<br>ずっと床が無い状態だったので気がつけなかった…ｗ<br>影もつけた。 <a href="https://t.co/MKtlNsBHyB">pic.twitter.com/MKtlNsBHyB</a></p>&mdash; がむ (@gam0022) <a href="https://twitter.com/gam0022/status/891723700139024384">2017年7月30日</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet" data-conversation="none" data-lang="ja"><p lang="ja" dir="ltr">パストレができるようになった。<br>Rayonで並列処理も実現できた。<br>Macでコード書いていたけど、rustupでWindowsにRustインストールしたら、手直し0でcargo buildでWindows用バイナリ生成できた。Rust良いね。 <a href="https://t.co/VhIqlu1bqe">pic.twitter.com/VhIqlu1bqe</a></p>&mdash; がむ (@gam0022) <a href="https://twitter.com/gam0022/status/893725960180187137">2017年8月5日</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet" data-conversation="none" data-lang="ja"><p lang="ja" dir="ltr">SuperSampling + IBL実装<br>フルスクラッチでCubeTexture実装したことなかったので、画像の向きが滅茶苦茶になるのを治すのに苦労した。<br>Bilinearフィルター実装しないとジャギがやばいね… <a href="https://t.co/zZIl36eXEV">pic.twitter.com/zZIl36eXEV</a></p>&mdash; がむ (@gam0022) <a href="https://twitter.com/gam0022/status/893889557027987456">2017年8月5日</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet" data-conversation="none" data-lang="ja"><p lang="ja" dir="ltr">Bilinearフィルターできた。<br>一度もバグらせることなく実装できたので良かった。 <a href="https://t.co/462rdPWGjP">pic.twitter.com/462rdPWGjP</a></p>&mdash; がむ (@gam0022) <a href="https://twitter.com/gam0022/status/894090372707606528">2017年8月6日</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet" data-conversation="none" data-lang="ja"><p lang="ja" dir="ltr">GGXと屈折できた〜<br>右の紫はGGX+屈折の磨りガラスにしているけど、床が単色だから普通の屈折面と区別がつかないw <a href="https://t.co/jlNaPeWRI6">pic.twitter.com/jlNaPeWRI6</a></p>&mdash; がむ (@gam0022) <a href="https://twitter.com/gam0022/status/894204969674391552">2017年8月6日</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet" data-conversation="none" data-lang="ja"><p lang="ja" dir="ltr">テクスチャ対応とガンマ補正した。<br>エイリアシングが酷すぎるが、Mipmapの実装は今回は見送ろうかな <a href="https://t.co/XMGUbfJ3Ab">pic.twitter.com/XMGUbfJ3Ab</a></p>&mdash; がむ (@gam0022) <a href="https://twitter.com/gam0022/status/895954424656388097">2017年8月11日</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet" data-conversation="none" data-lang="ja"><p lang="ja" dir="ltr">ポリゴンの衝突判定とobjファイルのローダを実装した。<br>モデルは1000ポリゴンに削ったスタンフォードバニー。<br>ついでに簡単なBVHも実装してポリゴンの衝突判定を高速化してみた。 <a href="https://t.co/7yWJQnnpyR">pic.twitter.com/7yWJQnnpyR</a></p>&mdash; がむ (@gam0022) <a href="https://twitter.com/gam0022/status/896963739412340736">2017年8月14日</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet" data-conversation="none" data-lang="ja"><p lang="ja" dir="ltr">被写界深度（レンズのピンぼけ）をシミュレーションした。<br>薄レンズモデルで、絞り羽根は円形。<br>時間があれば、星型とか六角形とか、面白い絞り羽根も試してみたい。 <a href="https://t.co/YAkiJwF0WA">pic.twitter.com/YAkiJwF0WA</a></p>&mdash; がむ (@gam0022) <a href="https://twitter.com/gam0022/status/897685643672920064">2017年8月16日</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

賞品もいただいたときのツイートです。

<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">入賞商品の「つかめる水」をいただいました😂<br>来年のシーンは決まりましたね <a href="https://twitter.com/hashtag/%E3%83%AC%E3%82%A4%E3%83%88%E3%83%AC%E5%90%88%E5%AE%BF?src=hash">#レイトレ合宿</a> <a href="https://t.co/VihgAITecy">pic.twitter.com/VihgAITecy</a></p>&mdash; がむ (@gam0022) <a href="https://twitter.com/gam0022/status/906670183867080704">2017年9月10日</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
-->
